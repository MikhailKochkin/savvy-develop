generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Application {
  id            String     @id @default(cuid())
  applicantId   String     @default(cuid())
  applicantName String
  message       String?
  coursePageID  String     @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  coursePageId  String
  coursePage    CoursePage @relation(fields: [coursePageId], references: [id])
}

model CareerTrack {
  id               String            @id @default(cuid())
  name             String
  img              String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  careerTrackUnits CareerTrackUnit[]
  members          User?
  coursePages      CoursePage[]      @relation("CoursePageForCareer")
}

model CareerTrackUnit {
  id            String       @id @default(cuid())
  title         String
  number        Int?
  img           String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  topics        String[]
  articles      String[]
  careerTrackId String
  careerTrack   CareerTrack  @relation(fields: [careerTrackId], references: [id])
  coursePages   CoursePage[]
}

model ChallengeResult {
  id        String   @id @default(cuid())
  correct   Int?
  wrong     Int?
  time      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Clause {
  id         String   @id @default(cuid())
  number     Int
  commentary String
  sample     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  keywords   String[]
  userId     String
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Company {
  id         String       @id @default(cuid())
  name       String
  paidMonths Int?         @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CoursePage CoursePage[]
  hrs        User[]
}

model Construction {
  id                  String               @id @default(cuid())
  name                String
  hint                String?
  type                String
  lessonID            String               @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  variants            String[]
  answer              String[]
  userId              String
  lessonId            String
  lesson              Lesson               @relation(fields: [lessonId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  constructionResults ConstructionResult[]
}

model ConstructionResult {
  id             String        @id @default(cuid())
  answer         String?
  attempts       Int?
  constructionID String?       @default(cuid())
  lessonID       String?       @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  inputs         String[]
  studentId      String
  lessonId       String?
  constructionId String?
  construction   Construction? @relation(fields: [constructionId], references: [id])
  lesson         Lesson?       @relation(fields: [lessonId], references: [id])
  student        User          @relation(fields: [studentId], references: [id])
}

model CoursePage {
  id                    String            @id @default(cuid())
  title                 String
  description           String
  image                 String
  banner                String?
  news                  String?           @default("Добро пожаловать на курс! Проходите уроки, выполняйте задания и выполняйте финальное задание!")
  audience              String?
  result                String?
  tariffs               String?
  methods               String?
  video                 String?
  reviews               Json?
  numInCareerTrack      Int?
  published             Boolean?          @default(false)
  uniID                 String?           @default(cuid())
  courseType            CourseType?
  price                 Int?
  discountPrice         Int?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  company               String?
  weeks                 Int?
  subscription          Boolean?          @default(false)
  subscriptionPrice     Int?
  batch                 String?
  openLesson            String?
  tags                  String[]
  students              String[]
  promocode             Json[]
  userId                String
  uniId                 String?
  Company               Company?          @relation(fields: [company], references: [id])
  uni                   Uni?              @relation(fields: [uniId], references: [id])
  User_CoursePageToUser User              @relation(fields: [userId], references: [id])
  applications          Application[]
  visits                CourseVisit[]
  lessons               Lesson[]
  orders                Order[]
  authors               User[]            @relation("AuthorsCoursePage")
  careerTrackUnit       CareerTrackUnit[]
  careerTrack           CareerTrack[]     @relation("CoursePageForCareer")
  CoursePage_B          CoursePage[]      @relation("CoursePageToCoursePage")
  CoursePage_A          CoursePage[]      @relation("CoursePageToCoursePage")
  posts                 Post[]            @relation("PostCoursePages")
  new_students          User[]            @relation("UserSubjects")
}

model CourseVisit {
  id           String     @id @default(cuid())
  visitsNumber Int?       @default(0)
  finish       DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reminders    DateTime[]
  studentId    String
  coursePageId String
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])
}

model Document {
  id              String           @id @default(cuid())
  title           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  lessonId        String
  lesson          Lesson           @relation(fields: [lessonId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  clauses         Clause[]
  documentResults DocumentResult[]
}

model DocumentResult {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  answers    String[]
  drafts     String[]
  userId     String?
  lessonId   String?
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])
  lesson     Lesson?   @relation(fields: [lessonId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String
  studentId String
  lessonId  String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  teacher   User     @relation("TeacherFeedback", fields: [studentId], references: [id])
  student   User     @relation("StudentFeedback", fields: [teacherId], references: [id])
}

model Forum {
  id         String      @id @default(cuid())
  text       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  lesson     Lesson?
  rating     Rating[]
  statements Statement[]
}

model LegalPortfolio {
  id        String   @id @default(cuid())
  cv        String?
  resume    String?
  open      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

model Lesson {
  id                  String               @id @default(cuid())
  name                String
  number              Int?
  text                String
  type                String?              @default("REGULAR")
  description         String?
  structure           Json?
  open                Boolean?             @default(false)
  coursePageID        String               @default(cuid())
  change              String?
  challenge_num       Int?                 @default(10)
  published           Boolean?             @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  map                 Json[]
  userId              String
  coursePageId        String
  forumId             String?              @unique
  coursePage          CoursePage           @relation(fields: [coursePageId], references: [id])
  forum               Forum?               @relation(fields: [forumId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  challengeResults    ChallengeResult[]
  constructions       Construction[]
  constructionResults ConstructionResult[]
  documents           Document[]
  documentResults     DocumentResult[]
  lessonFeedback      Feedback[]
  lessonResults       LessonResult[]
  newTests            NewTest[]
  notes               Note[]
  problems            Problem[]
  problemResults      ProblemResult[]
  quizes              Quiz[]
  quizResults         QuizResult[]
  shots               Shot[]
  shotResults         ShotResult[]
  testResults         TestResult[]
  texteditors         TextEditor[]
  textEditorResults   TextEditorResult[]
}

model LessonResult {
  id           String   @id @default(cuid())
  visitsNumber Int?     @default(0)
  lessonID     String?  @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  progress     Int?     @default(0)
  studentId    String
  lessonId     String
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  student      User     @relation(fields: [studentId], references: [id])
}

model NewTest {
  id          String       @id @default(cuid())
  ifRight     String?
  ifWrong     String?
  type        String?      @default("TEST")
  lessonID    String?      @default(cuid())
  next        Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    String[]
  answers     String[]
  correct     Boolean[]
  userId      String
  lessonId    String?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  testResults TestResult[]
}

model Note {
  id        String   @id @default(cuid())
  text      String
  next      Json?
  lessonID  String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  lessonId  String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Order {
  id           String     @id @default(cuid())
  paymentID    String?
  price        Int?
  level        Level?
  comment      String?
  promocode    String?
  isPaid       Boolean?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  coursePageId String
  coursePage   CoursePage @relation(fields: [coursePageId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Post {
  id          String       @id @default(cuid())
  title       String?
  text        String?
  likes       Int?         @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  tags        String[]
  user        User         @relation(fields: [userId], references: [id])
  coursePages CoursePage[] @relation("PostCoursePages")
}

model Problem {
  id             String          @id @default(cuid())
  text           String
  hints          String?
  solution       String?
  answer         String?
  lessonID       String          @default(cuid())
  nodeType       String?
  nodeID         String?         @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  hintsList      String[]
  solutionList   String[]
  userId         String
  lessonId       String
  lesson         Lesson          @relation(fields: [lessonId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  problemResults ProblemResult[]
}

model ProblemResult {
  id        String   @id @default(cuid())
  answer    String?
  lessonID  String?  @default(cuid())
  problemID String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  revealed  String[]
  studentId String
  lessonId  String?
  problemId String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  problem   Problem? @relation(fields: [problemId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Quiz {
  id          String       @id @default(cuid())
  question    String
  answer      String
  type        String?      @default("TEST")
  ifRight     String?
  ifWrong     String?
  lessonID    String?      @default(cuid())
  next        Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  check       String?      @default("IDEA")
  userId      String
  lessonId    String?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  quizResults QuizResult[]
}

model QuizResult {
  id        String   @id @default(cuid())
  answer    String?
  attempts  Int?
  correct   Boolean?
  lessonID  String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String?
  quizId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  quiz      Quiz?    @relation(fields: [quizId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  forumId   String?
  forum     Forum?   @relation(fields: [forumId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Shot {
  id          String       @id @default(cuid())
  title       String
  lessonID    String?      @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parts       String[]
  comments    String[]
  userId      String
  lessonId    String?
  lesson      Lesson?      @relation(fields: [lessonId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  shotResults ShotResult[]
}

model ShotResult {
  id        String   @id @default(cuid())
  answer    String
  lessonID  String?  @default(cuid())
  shotID    String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String?
  shotId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  shot      Shot?    @relation(fields: [shotId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
}

model Statement {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  forumId   String?
  forum     Forum?   @relation(fields: [forumId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model TestResult {
  id        String   @id @default(cuid())
  answer    String?
  attempts  Int?
  lessonID  String?  @default(cuid())
  testID    String?  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  lessonId  String?
  testId    String?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])
  test      NewTest? @relation(fields: [testId], references: [id])
}

model TextEditor {
  id                String             @id @default(cuid())
  name              String
  text              String
  totalMistakes     Int?
  lessonID          String             @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  lessonId          String
  lesson            Lesson             @relation(fields: [lessonId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  textEditorResults TextEditorResult[]
}

model TextEditorResult {
  id           String      @id @default(cuid())
  attempts     Int?
  wrong        String
  correct      String
  result       Boolean?
  guess        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  studentId    String
  lessonId     String?
  textEditorId String?
  lesson       Lesson?     @relation(fields: [lessonId], references: [id])
  student      User        @relation(fields: [studentId], references: [id])
  textEditor   TextEditor? @relation(fields: [textEditorId], references: [id])
}

model Uni {
  id             String       @id @default(cuid())
  title          String
  capacity       Int?         @default(2)
  paidMonths     Int?         @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  uniCoursePages CoursePage[]
  teachers       User[]
}

model User {
  id                          String               @id @default(cuid())
  name                        String
  surname                     String?
  email                       String               @unique
  password                    String
  resetToken                  String?
  resetTokenExpiry            Float?
  status                      String?              @default("STUDENT")
  uniID                       String?              @default(cuid())
  description                 String?
  resume                      String?
  coverLetter                 String?
  careerTrackID               String?              @default(cuid())
  isFamiliar                  Boolean              @default(false)
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  image                       String?
  favourites                  String[]
  subjects                    String[]
  interests                   String[]
  permissions                 Permission[]
  uniId                       String?
  companyId                   String?
  legalPortfolioId            String?              @unique
  careerTrackId               String?              @unique
  levelId                     String?              @unique
  careerTrack                 CareerTrack?         @relation(fields: [careerTrackId], references: [id])
  company                     Company?             @relation(fields: [companyId], references: [id])
  legalPortfolio              LegalPortfolio?      @relation(fields: [legalPortfolioId], references: [id])
  level                       UserLevel?           @relation(fields: [levelId], references: [id])
  uni                         Uni?                 @relation(fields: [uniId], references: [id])
  challengeResults            ChallengeResult[]
  clauses                     Clause[]
  construction                Construction[]
  constructionResults         ConstructionResult[]
  CoursePage_CoursePageToUser CoursePage[]
  courseVisits                CourseVisit[]
  documents                   Document[]
  documentResults             DocumentResult[]
  teacherFeedback             Feedback[]           @relation("TeacherFeedback")
  studentFeedback             Feedback[]           @relation("StudentFeedback")
  forums                      Forum[]
  lessons                     Lesson[]
  lessonResults               LessonResult[]
  newTests                    NewTest[]
  notes                       Note[]
  orders                      Order[]
  posts                       Post[]
  problems                    Problem[]
  problemResults              ProblemResult[]
  quizes                      Quiz[]
  quizResults                 QuizResult[]
  ratings                     Rating[]
  shots                       Shot[]
  shotResults                 ShotResult[]
  statements                  Statement[]
  testResults                 TestResult[]
  textEditor                  TextEditor[]
  textEditorResults           TextEditorResult[]
  co_coursePages              CoursePage[]         @relation("AuthorsCoursePage")
  new_subjects                CoursePage[]         @relation("UserSubjects")
}

model UserLevel {
  id        String   @id @default(cuid())
  level     Float?   @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
}

enum CheckType {
  WORD
  IDEA
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
  CHALLENGE
}

enum Level {
  STANDARD
  ADVANCED
}

enum Permission {
  ADMIN
  USER
}

enum Status {
  STUDENT
  LAWYER
  AUTHOR
  SAVVY_AUTHOR
  HR
}

enum TaskType {
  TEST
  FORM
}

enum Type {
  STORY
  REGULAR
  CHALLENGE
}
