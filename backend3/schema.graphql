### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Application {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input ApplicationWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String
  user: User
}

type Company {
  id: String!
  name: String!
}

type CoursePage {
  applications(after: ApplicationWhereUniqueInput, before: ApplicationWhereUniqueInput, first: Int, last: Int): [Application!]!
  audience: String
  authors(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  banner: String
  batch: String
  company: Company
  courseType: CourseType
  createdAt: DateTime!
  description: String!
  discountPrice: Int
  id: String!
  image: String!
  lessons(after: LessonWhereUniqueInput, before: LessonWhereUniqueInput, first: Int, last: Int): [Lesson!]!
  methods: String
  new_students(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  news: String
  price: Int
  promocode: [Json!]!
  published: Boolean
  result: String
  reviews: Json
  students: [String!]!
  subscription: Boolean
  subscriptionPrice: Int
  tags: [String!]!
  tariffs: String
  title: String!
  uni: Uni
  updatedAt: DateTime!
  user: User!
  video: String
  weeks: Int
}

input CoursePageWhereUniqueInput {
  id: String
}

enum CourseType {
  CHALLENGE
  FORMONEY
  PRIVATE
  PUBLIC
  UNI
}

scalar DateTime

scalar Json

type Lesson {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input LessonWhereUniqueInput {
  forumId: String
  id: String
}

type Mutation {
  createCoursePage(courseType: String, description: String, image: String, published: Boolean, title: String): CoursePage
  signin(email: String, password: String): AuthPayload
  signout: SignOut
  signup(careerTrackID: String, company: String, email: String, name: String, password: String, surname: String, uniID: String): AuthPayload
}

type Query {
  coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int): [CoursePage!]!
  me: User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type SignOut {
  message: String
}

"""The first Star Wars episodes released"""
enum Status {
  AUTHOR
  HR
  LAWYER
  SAVVY_AUTHOR
  STUDENT
}

type Uni {
  capacity: Int
  id: String!
  paidMonths: Int
  teachers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  title: String!
}

type User {
  company: Company
  coursePages(after: CoursePageWhereUniqueInput, before: CoursePageWhereUniqueInput, first: Int, last: Int): [CoursePage!]!
  description: String
  email: String!
  id: String!
  name: String!
  password: String!
  resume: String
  status: String
  surname: String
  uni: Uni
}

input UserWhereUniqueInput {
  careerTrackId: String
  email: String
  id: String
  legalPortfolioId: String
  levelId: String
}
