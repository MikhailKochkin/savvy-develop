type AggregateApplication {
  count: Int!
}

type AggregateCareerTrack {
  count: Int!
}

type AggregateCareerTrackUnit {
  count: Int!
}

type AggregateChallengeResult {
  count: Int!
}

type AggregateClause {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateConstruction {
  count: Int!
}

type AggregateConstructionResult {
  count: Int!
}

type AggregateCoursePage {
  count: Int!
}

type AggregateCourseVisit {
  count: Int!
}

type AggregateDocument {
  count: Int!
}

type AggregateDocumentResult {
  count: Int!
}

type AggregateFeedback {
  count: Int!
}

type AggregateForum {
  count: Int!
}

type AggregateLegalPortfolio {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateLessonResult {
  count: Int!
}

type AggregateNewTest {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateProblemResult {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateQuizResult {
  count: Int!
}

type AggregateRating {
  count: Int!
}

type AggregateShot {
  count: Int!
}

type AggregateShotResult {
  count: Int!
}

type AggregateStatement {
  count: Int!
}

type AggregateTestResult {
  count: Int!
}

type AggregateTextEditor {
  count: Int!
}

type AggregateTextEditorResult {
  count: Int!
}

type AggregateUni {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserLevel {
  count: Int!
}

type Application {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePage!
  coursePageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  id: ID
  applicantId: ID!
  applicantName: String!
  message: String
  coursePage: CoursePageCreateOneWithoutApplicationsInput!
  coursePageID: ID!
}

input ApplicationCreateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutCoursePageInput {
  id: ID
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applicantId_ASC
  applicantId_DESC
  applicantName_ASC
  applicantName_DESC
  message_ASC
  message_DESC
  coursePageID_ASC
  coursePageID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applicantId: ID!
  applicantName: String!
  message: String
  coursePageID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applicantId: ID
  applicantId_not: ID
  applicantId_in: [ID!]
  applicantId_not_in: [ID!]
  applicantId_lt: ID
  applicantId_lte: ID
  applicantId_gt: ID
  applicantId_gte: ID
  applicantId_contains: ID
  applicantId_not_contains: ID
  applicantId_starts_with: ID
  applicantId_not_starts_with: ID
  applicantId_ends_with: ID
  applicantId_not_ends_with: ID
  applicantName: String
  applicantName_not: String
  applicantName_in: [String!]
  applicantName_not_in: [String!]
  applicantName_lt: String
  applicantName_lte: String
  applicantName_gt: String
  applicantName_gte: String
  applicantName_contains: String
  applicantName_not_contains: String
  applicantName_starts_with: String
  applicantName_not_starts_with: String
  applicantName_ends_with: String
  applicantName_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePage: CoursePageUpdateOneRequiredWithoutApplicationsInput
  coursePageID: ID
}

input ApplicationUpdateManyDataInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateManyMutationInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateManyWithoutCoursePageInput {
  create: [ApplicationCreateWithoutCoursePageInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateWithoutCoursePageDataInput {
  applicantId: ID
  applicantName: String
  message: String
  coursePageID: ID
}

input ApplicationUpdateWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutCoursePageDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutCoursePageInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutCoursePageDataInput!
  create: ApplicationCreateWithoutCoursePageInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applicantId: ID
  applicantId_not: ID
  applicantId_in: [ID!]
  applicantId_not_in: [ID!]
  applicantId_lt: ID
  applicantId_lte: ID
  applicantId_gt: ID
  applicantId_gte: ID
  applicantId_contains: ID
  applicantId_not_contains: ID
  applicantId_starts_with: ID
  applicantId_not_starts_with: ID
  applicantId_ends_with: ID
  applicantId_not_ends_with: ID
  applicantName: String
  applicantName_not: String
  applicantName_in: [String!]
  applicantName_not_in: [String!]
  applicantName_lt: String
  applicantName_lte: String
  applicantName_gt: String
  applicantName_gte: String
  applicantName_contains: String
  applicantName_not_contains: String
  applicantName_starts_with: String
  applicantName_not_starts_with: String
  applicantName_ends_with: String
  applicantName_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  coursePage: CoursePageWhereInput
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type CareerTrack {
  id: ID!
  name: String!
  img: String
  members: User
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  careerTrackUnits(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrackUnit!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CareerTrackConnection {
  pageInfo: PageInfo!
  edges: [CareerTrackEdge]!
  aggregate: AggregateCareerTrack!
}

input CareerTrackCreateInput {
  id: ID
  name: String!
  img: String
  members: UserCreateOneWithoutCareerTrackInput
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateManyWithoutCoursePagesInput {
  create: [CareerTrackCreateWithoutCoursePagesInput!]
  connect: [CareerTrackWhereUniqueInput!]
}

input CareerTrackCreateOneWithoutCareerTrackUnitsInput {
  create: CareerTrackCreateWithoutCareerTrackUnitsInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackCreateOneWithoutMembersInput {
  create: CareerTrackCreateWithoutMembersInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackCreateWithoutCareerTrackUnitsInput {
  id: ID
  name: String!
  img: String
  members: UserCreateOneWithoutCareerTrackInput
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateWithoutCoursePagesInput {
  id: ID
  name: String!
  img: String
  members: UserCreateOneWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

input CareerTrackCreateWithoutMembersInput {
  id: ID
  name: String!
  img: String
  coursePages: CoursePageCreateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitCreateManyWithoutCareerTrackInput
}

type CareerTrackEdge {
  node: CareerTrack!
  cursor: String!
}

enum CareerTrackOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  img_ASC
  img_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CareerTrackPreviousValues {
  id: ID!
  name: String!
  img: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CareerTrackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CareerTrackScalarWhereInput!]
  OR: [CareerTrackScalarWhereInput!]
  NOT: [CareerTrackScalarWhereInput!]
}

type CareerTrackSubscriptionPayload {
  mutation: MutationType!
  node: CareerTrack
  updatedFields: [String!]
  previousValues: CareerTrackPreviousValues
}

input CareerTrackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CareerTrackWhereInput
  AND: [CareerTrackSubscriptionWhereInput!]
  OR: [CareerTrackSubscriptionWhereInput!]
  NOT: [CareerTrackSubscriptionWhereInput!]
}

type CareerTrackUnit {
  id: ID!
  title: String!
  number: Int
  img: String
  topics: [String!]!
  articles: [String!]!
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  careerTrack: CareerTrack!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CareerTrackUnitConnection {
  pageInfo: PageInfo!
  edges: [CareerTrackUnitEdge]!
  aggregate: AggregateCareerTrackUnit!
}

input CareerTrackUnitCreatearticlesInput {
  set: [String!]
}

input CareerTrackUnitCreateInput {
  id: ID
  title: String!
  number: Int
  img: String
  topics: CareerTrackUnitCreatetopicsInput
  articles: CareerTrackUnitCreatearticlesInput
  coursePages: CoursePageCreateManyInput
  careerTrack: CareerTrackCreateOneWithoutCareerTrackUnitsInput!
}

input CareerTrackUnitCreateManyWithoutCareerTrackInput {
  create: [CareerTrackUnitCreateWithoutCareerTrackInput!]
  connect: [CareerTrackUnitWhereUniqueInput!]
}

input CareerTrackUnitCreatetopicsInput {
  set: [String!]
}

input CareerTrackUnitCreateWithoutCareerTrackInput {
  id: ID
  title: String!
  number: Int
  img: String
  topics: CareerTrackUnitCreatetopicsInput
  articles: CareerTrackUnitCreatearticlesInput
  coursePages: CoursePageCreateManyInput
}

type CareerTrackUnitEdge {
  node: CareerTrackUnit!
  cursor: String!
}

enum CareerTrackUnitOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  number_ASC
  number_DESC
  img_ASC
  img_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CareerTrackUnitPreviousValues {
  id: ID!
  title: String!
  number: Int
  img: String
  topics: [String!]!
  articles: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CareerTrackUnitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CareerTrackUnitScalarWhereInput!]
  OR: [CareerTrackUnitScalarWhereInput!]
  NOT: [CareerTrackUnitScalarWhereInput!]
}

type CareerTrackUnitSubscriptionPayload {
  mutation: MutationType!
  node: CareerTrackUnit
  updatedFields: [String!]
  previousValues: CareerTrackUnitPreviousValues
}

input CareerTrackUnitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CareerTrackUnitWhereInput
  AND: [CareerTrackUnitSubscriptionWhereInput!]
  OR: [CareerTrackUnitSubscriptionWhereInput!]
  NOT: [CareerTrackUnitSubscriptionWhereInput!]
}

input CareerTrackUnitUpdatearticlesInput {
  set: [String!]
}

input CareerTrackUnitUpdateInput {
  title: String
  number: Int
  img: String
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
  coursePages: CoursePageUpdateManyInput
  careerTrack: CareerTrackUpdateOneRequiredWithoutCareerTrackUnitsInput
}

input CareerTrackUnitUpdateManyDataInput {
  title: String
  number: Int
  img: String
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
}

input CareerTrackUnitUpdateManyMutationInput {
  title: String
  number: Int
  img: String
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
}

input CareerTrackUnitUpdateManyWithoutCareerTrackInput {
  create: [CareerTrackUnitCreateWithoutCareerTrackInput!]
  delete: [CareerTrackUnitWhereUniqueInput!]
  connect: [CareerTrackUnitWhereUniqueInput!]
  set: [CareerTrackUnitWhereUniqueInput!]
  disconnect: [CareerTrackUnitWhereUniqueInput!]
  update: [CareerTrackUnitUpdateWithWhereUniqueWithoutCareerTrackInput!]
  upsert: [CareerTrackUnitUpsertWithWhereUniqueWithoutCareerTrackInput!]
  deleteMany: [CareerTrackUnitScalarWhereInput!]
  updateMany: [CareerTrackUnitUpdateManyWithWhereNestedInput!]
}

input CareerTrackUnitUpdateManyWithWhereNestedInput {
  where: CareerTrackUnitScalarWhereInput!
  data: CareerTrackUnitUpdateManyDataInput!
}

input CareerTrackUnitUpdatetopicsInput {
  set: [String!]
}

input CareerTrackUnitUpdateWithoutCareerTrackDataInput {
  title: String
  number: Int
  img: String
  topics: CareerTrackUnitUpdatetopicsInput
  articles: CareerTrackUnitUpdatearticlesInput
  coursePages: CoursePageUpdateManyInput
}

input CareerTrackUnitUpdateWithWhereUniqueWithoutCareerTrackInput {
  where: CareerTrackUnitWhereUniqueInput!
  data: CareerTrackUnitUpdateWithoutCareerTrackDataInput!
}

input CareerTrackUnitUpsertWithWhereUniqueWithoutCareerTrackInput {
  where: CareerTrackUnitWhereUniqueInput!
  update: CareerTrackUnitUpdateWithoutCareerTrackDataInput!
  create: CareerTrackUnitCreateWithoutCareerTrackInput!
}

input CareerTrackUnitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  careerTrack: CareerTrackWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CareerTrackUnitWhereInput!]
  OR: [CareerTrackUnitWhereInput!]
  NOT: [CareerTrackUnitWhereInput!]
}

input CareerTrackUnitWhereUniqueInput {
  id: ID
}

input CareerTrackUpdateInput {
  name: String
  img: String
  members: UserUpdateOneWithoutCareerTrackInput
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateManyDataInput {
  name: String
  img: String
}

input CareerTrackUpdateManyMutationInput {
  name: String
  img: String
}

input CareerTrackUpdateManyWithoutCoursePagesInput {
  create: [CareerTrackCreateWithoutCoursePagesInput!]
  delete: [CareerTrackWhereUniqueInput!]
  connect: [CareerTrackWhereUniqueInput!]
  set: [CareerTrackWhereUniqueInput!]
  disconnect: [CareerTrackWhereUniqueInput!]
  update: [CareerTrackUpdateWithWhereUniqueWithoutCoursePagesInput!]
  upsert: [CareerTrackUpsertWithWhereUniqueWithoutCoursePagesInput!]
  deleteMany: [CareerTrackScalarWhereInput!]
  updateMany: [CareerTrackUpdateManyWithWhereNestedInput!]
}

input CareerTrackUpdateManyWithWhereNestedInput {
  where: CareerTrackScalarWhereInput!
  data: CareerTrackUpdateManyDataInput!
}

input CareerTrackUpdateOneRequiredWithoutCareerTrackUnitsInput {
  create: CareerTrackCreateWithoutCareerTrackUnitsInput
  update: CareerTrackUpdateWithoutCareerTrackUnitsDataInput
  upsert: CareerTrackUpsertWithoutCareerTrackUnitsInput
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackUpdateOneWithoutMembersInput {
  create: CareerTrackCreateWithoutMembersInput
  update: CareerTrackUpdateWithoutMembersDataInput
  upsert: CareerTrackUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: CareerTrackWhereUniqueInput
}

input CareerTrackUpdateWithoutCareerTrackUnitsDataInput {
  name: String
  img: String
  members: UserUpdateOneWithoutCareerTrackInput
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithoutCoursePagesDataInput {
  name: String
  img: String
  members: UserUpdateOneWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithoutMembersDataInput {
  name: String
  img: String
  coursePages: CoursePageUpdateManyWithoutCareerTrackInput
  careerTrackUnits: CareerTrackUnitUpdateManyWithoutCareerTrackInput
}

input CareerTrackUpdateWithWhereUniqueWithoutCoursePagesInput {
  where: CareerTrackWhereUniqueInput!
  data: CareerTrackUpdateWithoutCoursePagesDataInput!
}

input CareerTrackUpsertWithoutCareerTrackUnitsInput {
  update: CareerTrackUpdateWithoutCareerTrackUnitsDataInput!
  create: CareerTrackCreateWithoutCareerTrackUnitsInput!
}

input CareerTrackUpsertWithoutMembersInput {
  update: CareerTrackUpdateWithoutMembersDataInput!
  create: CareerTrackCreateWithoutMembersInput!
}

input CareerTrackUpsertWithWhereUniqueWithoutCoursePagesInput {
  where: CareerTrackWhereUniqueInput!
  update: CareerTrackUpdateWithoutCoursePagesDataInput!
  create: CareerTrackCreateWithoutCoursePagesInput!
}

input CareerTrackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  img: String
  img_not: String
  img_in: [String!]
  img_not_in: [String!]
  img_lt: String
  img_lte: String
  img_gt: String
  img_gte: String
  img_contains: String
  img_not_contains: String
  img_starts_with: String
  img_not_starts_with: String
  img_ends_with: String
  img_not_ends_with: String
  members: UserWhereInput
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  careerTrackUnits_every: CareerTrackUnitWhereInput
  careerTrackUnits_some: CareerTrackUnitWhereInput
  careerTrackUnits_none: CareerTrackUnitWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CareerTrackWhereInput!]
  OR: [CareerTrackWhereInput!]
  NOT: [CareerTrackWhereInput!]
}

input CareerTrackWhereUniqueInput {
  id: ID
}

type ChallengeResult {
  id: ID!
  student: User!
  correct: Int
  wrong: Int
  time: Int
  lesson: Lesson!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChallengeResultConnection {
  pageInfo: PageInfo!
  edges: [ChallengeResultEdge]!
  aggregate: AggregateChallengeResult!
}

input ChallengeResultCreateInput {
  id: ID
  student: UserCreateOneWithoutChallengeResultsInput!
  correct: Int
  wrong: Int
  time: Int
  lesson: LessonCreateOneWithoutChallengeResultsInput!
}

input ChallengeResultCreateManyWithoutLessonInput {
  create: [ChallengeResultCreateWithoutLessonInput!]
  connect: [ChallengeResultWhereUniqueInput!]
}

input ChallengeResultCreateManyWithoutStudentInput {
  create: [ChallengeResultCreateWithoutStudentInput!]
  connect: [ChallengeResultWhereUniqueInput!]
}

input ChallengeResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutChallengeResultsInput!
  correct: Int
  wrong: Int
  time: Int
}

input ChallengeResultCreateWithoutStudentInput {
  id: ID
  correct: Int
  wrong: Int
  time: Int
  lesson: LessonCreateOneWithoutChallengeResultsInput!
}

type ChallengeResultEdge {
  node: ChallengeResult!
  cursor: String!
}

enum ChallengeResultOrderByInput {
  id_ASC
  id_DESC
  correct_ASC
  correct_DESC
  wrong_ASC
  wrong_DESC
  time_ASC
  time_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChallengeResultPreviousValues {
  id: ID!
  correct: Int
  wrong: Int
  time: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ChallengeResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  correct: Int
  correct_not: Int
  correct_in: [Int!]
  correct_not_in: [Int!]
  correct_lt: Int
  correct_lte: Int
  correct_gt: Int
  correct_gte: Int
  wrong: Int
  wrong_not: Int
  wrong_in: [Int!]
  wrong_not_in: [Int!]
  wrong_lt: Int
  wrong_lte: Int
  wrong_gt: Int
  wrong_gte: Int
  time: Int
  time_not: Int
  time_in: [Int!]
  time_not_in: [Int!]
  time_lt: Int
  time_lte: Int
  time_gt: Int
  time_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ChallengeResultScalarWhereInput!]
  OR: [ChallengeResultScalarWhereInput!]
  NOT: [ChallengeResultScalarWhereInput!]
}

type ChallengeResultSubscriptionPayload {
  mutation: MutationType!
  node: ChallengeResult
  updatedFields: [String!]
  previousValues: ChallengeResultPreviousValues
}

input ChallengeResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChallengeResultWhereInput
  AND: [ChallengeResultSubscriptionWhereInput!]
  OR: [ChallengeResultSubscriptionWhereInput!]
  NOT: [ChallengeResultSubscriptionWhereInput!]
}

input ChallengeResultUpdateInput {
  student: UserUpdateOneRequiredWithoutChallengeResultsInput
  correct: Int
  wrong: Int
  time: Int
  lesson: LessonUpdateOneRequiredWithoutChallengeResultsInput
}

input ChallengeResultUpdateManyDataInput {
  correct: Int
  wrong: Int
  time: Int
}

input ChallengeResultUpdateManyMutationInput {
  correct: Int
  wrong: Int
  time: Int
}

input ChallengeResultUpdateManyWithoutLessonInput {
  create: [ChallengeResultCreateWithoutLessonInput!]
  delete: [ChallengeResultWhereUniqueInput!]
  connect: [ChallengeResultWhereUniqueInput!]
  set: [ChallengeResultWhereUniqueInput!]
  disconnect: [ChallengeResultWhereUniqueInput!]
  update: [ChallengeResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ChallengeResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ChallengeResultScalarWhereInput!]
  updateMany: [ChallengeResultUpdateManyWithWhereNestedInput!]
}

input ChallengeResultUpdateManyWithoutStudentInput {
  create: [ChallengeResultCreateWithoutStudentInput!]
  delete: [ChallengeResultWhereUniqueInput!]
  connect: [ChallengeResultWhereUniqueInput!]
  set: [ChallengeResultWhereUniqueInput!]
  disconnect: [ChallengeResultWhereUniqueInput!]
  update: [ChallengeResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ChallengeResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ChallengeResultScalarWhereInput!]
  updateMany: [ChallengeResultUpdateManyWithWhereNestedInput!]
}

input ChallengeResultUpdateManyWithWhereNestedInput {
  where: ChallengeResultScalarWhereInput!
  data: ChallengeResultUpdateManyDataInput!
}

input ChallengeResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutChallengeResultsInput
  correct: Int
  wrong: Int
  time: Int
}

input ChallengeResultUpdateWithoutStudentDataInput {
  correct: Int
  wrong: Int
  time: Int
  lesson: LessonUpdateOneRequiredWithoutChallengeResultsInput
}

input ChallengeResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ChallengeResultWhereUniqueInput!
  data: ChallengeResultUpdateWithoutLessonDataInput!
}

input ChallengeResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ChallengeResultWhereUniqueInput!
  data: ChallengeResultUpdateWithoutStudentDataInput!
}

input ChallengeResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ChallengeResultWhereUniqueInput!
  update: ChallengeResultUpdateWithoutLessonDataInput!
  create: ChallengeResultCreateWithoutLessonInput!
}

input ChallengeResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ChallengeResultWhereUniqueInput!
  update: ChallengeResultUpdateWithoutStudentDataInput!
  create: ChallengeResultCreateWithoutStudentInput!
}

input ChallengeResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  correct: Int
  correct_not: Int
  correct_in: [Int!]
  correct_not_in: [Int!]
  correct_lt: Int
  correct_lte: Int
  correct_gt: Int
  correct_gte: Int
  wrong: Int
  wrong_not: Int
  wrong_in: [Int!]
  wrong_not_in: [Int!]
  wrong_lt: Int
  wrong_lte: Int
  wrong_gt: Int
  wrong_gte: Int
  time: Int
  time_not: Int
  time_in: [Int!]
  time_not_in: [Int!]
  time_lt: Int
  time_lte: Int
  time_gt: Int
  time_gte: Int
  lesson: LessonWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ChallengeResultWhereInput!]
  OR: [ChallengeResultWhereInput!]
  NOT: [ChallengeResultWhereInput!]
}

input ChallengeResultWhereUniqueInput {
  id: ID
}

enum CheckType {
  WORD
  IDEA
}

type Clause {
  id: ID!
  user: User!
  number: Int!
  commentary: String!
  keywords: [String!]!
  sample: String
  document: Document!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClauseConnection {
  pageInfo: PageInfo!
  edges: [ClauseEdge]!
  aggregate: AggregateClause!
}

input ClauseCreateInput {
  id: ID
  user: UserCreateOneWithoutClausesInput!
  number: Int!
  commentary: String!
  keywords: ClauseCreatekeywordsInput
  sample: String
  document: DocumentCreateOneWithoutClausesInput!
}

input ClauseCreatekeywordsInput {
  set: [String!]
}

input ClauseCreateManyWithoutDocumentInput {
  create: [ClauseCreateWithoutDocumentInput!]
  connect: [ClauseWhereUniqueInput!]
}

input ClauseCreateManyWithoutUserInput {
  create: [ClauseCreateWithoutUserInput!]
  connect: [ClauseWhereUniqueInput!]
}

input ClauseCreateWithoutDocumentInput {
  id: ID
  user: UserCreateOneWithoutClausesInput!
  number: Int!
  commentary: String!
  keywords: ClauseCreatekeywordsInput
  sample: String
}

input ClauseCreateWithoutUserInput {
  id: ID
  number: Int!
  commentary: String!
  keywords: ClauseCreatekeywordsInput
  sample: String
  document: DocumentCreateOneWithoutClausesInput!
}

type ClauseEdge {
  node: Clause!
  cursor: String!
}

enum ClauseOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  commentary_ASC
  commentary_DESC
  sample_ASC
  sample_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClausePreviousValues {
  id: ID!
  number: Int!
  commentary: String!
  keywords: [String!]!
  sample: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClauseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  commentary: String
  commentary_not: String
  commentary_in: [String!]
  commentary_not_in: [String!]
  commentary_lt: String
  commentary_lte: String
  commentary_gt: String
  commentary_gte: String
  commentary_contains: String
  commentary_not_contains: String
  commentary_starts_with: String
  commentary_not_starts_with: String
  commentary_ends_with: String
  commentary_not_ends_with: String
  sample: String
  sample_not: String
  sample_in: [String!]
  sample_not_in: [String!]
  sample_lt: String
  sample_lte: String
  sample_gt: String
  sample_gte: String
  sample_contains: String
  sample_not_contains: String
  sample_starts_with: String
  sample_not_starts_with: String
  sample_ends_with: String
  sample_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClauseScalarWhereInput!]
  OR: [ClauseScalarWhereInput!]
  NOT: [ClauseScalarWhereInput!]
}

type ClauseSubscriptionPayload {
  mutation: MutationType!
  node: Clause
  updatedFields: [String!]
  previousValues: ClausePreviousValues
}

input ClauseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClauseWhereInput
  AND: [ClauseSubscriptionWhereInput!]
  OR: [ClauseSubscriptionWhereInput!]
  NOT: [ClauseSubscriptionWhereInput!]
}

input ClauseUpdateInput {
  user: UserUpdateOneRequiredWithoutClausesInput
  number: Int
  commentary: String
  keywords: ClauseUpdatekeywordsInput
  sample: String
  document: DocumentUpdateOneRequiredWithoutClausesInput
}

input ClauseUpdatekeywordsInput {
  set: [String!]
}

input ClauseUpdateManyDataInput {
  number: Int
  commentary: String
  keywords: ClauseUpdatekeywordsInput
  sample: String
}

input ClauseUpdateManyMutationInput {
  number: Int
  commentary: String
  keywords: ClauseUpdatekeywordsInput
  sample: String
}

input ClauseUpdateManyWithoutDocumentInput {
  create: [ClauseCreateWithoutDocumentInput!]
  delete: [ClauseWhereUniqueInput!]
  connect: [ClauseWhereUniqueInput!]
  set: [ClauseWhereUniqueInput!]
  disconnect: [ClauseWhereUniqueInput!]
  update: [ClauseUpdateWithWhereUniqueWithoutDocumentInput!]
  upsert: [ClauseUpsertWithWhereUniqueWithoutDocumentInput!]
  deleteMany: [ClauseScalarWhereInput!]
  updateMany: [ClauseUpdateManyWithWhereNestedInput!]
}

input ClauseUpdateManyWithoutUserInput {
  create: [ClauseCreateWithoutUserInput!]
  delete: [ClauseWhereUniqueInput!]
  connect: [ClauseWhereUniqueInput!]
  set: [ClauseWhereUniqueInput!]
  disconnect: [ClauseWhereUniqueInput!]
  update: [ClauseUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ClauseUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ClauseScalarWhereInput!]
  updateMany: [ClauseUpdateManyWithWhereNestedInput!]
}

input ClauseUpdateManyWithWhereNestedInput {
  where: ClauseScalarWhereInput!
  data: ClauseUpdateManyDataInput!
}

input ClauseUpdateWithoutDocumentDataInput {
  user: UserUpdateOneRequiredWithoutClausesInput
  number: Int
  commentary: String
  keywords: ClauseUpdatekeywordsInput
  sample: String
}

input ClauseUpdateWithoutUserDataInput {
  number: Int
  commentary: String
  keywords: ClauseUpdatekeywordsInput
  sample: String
  document: DocumentUpdateOneRequiredWithoutClausesInput
}

input ClauseUpdateWithWhereUniqueWithoutDocumentInput {
  where: ClauseWhereUniqueInput!
  data: ClauseUpdateWithoutDocumentDataInput!
}

input ClauseUpdateWithWhereUniqueWithoutUserInput {
  where: ClauseWhereUniqueInput!
  data: ClauseUpdateWithoutUserDataInput!
}

input ClauseUpsertWithWhereUniqueWithoutDocumentInput {
  where: ClauseWhereUniqueInput!
  update: ClauseUpdateWithoutDocumentDataInput!
  create: ClauseCreateWithoutDocumentInput!
}

input ClauseUpsertWithWhereUniqueWithoutUserInput {
  where: ClauseWhereUniqueInput!
  update: ClauseUpdateWithoutUserDataInput!
  create: ClauseCreateWithoutUserInput!
}

input ClauseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  commentary: String
  commentary_not: String
  commentary_in: [String!]
  commentary_not_in: [String!]
  commentary_lt: String
  commentary_lte: String
  commentary_gt: String
  commentary_gte: String
  commentary_contains: String
  commentary_not_contains: String
  commentary_starts_with: String
  commentary_not_starts_with: String
  commentary_ends_with: String
  commentary_not_ends_with: String
  sample: String
  sample_not: String
  sample_in: [String!]
  sample_not_in: [String!]
  sample_lt: String
  sample_lte: String
  sample_gt: String
  sample_gte: String
  sample_contains: String
  sample_not_contains: String
  sample_starts_with: String
  sample_not_starts_with: String
  sample_ends_with: String
  sample_not_ends_with: String
  document: DocumentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ClauseWhereInput!]
  OR: [ClauseWhereInput!]
  NOT: [ClauseWhereInput!]
}

input ClauseWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  name: String!
  hrs(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  paidMonths: Int
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  hrs: UserCreateManyWithoutCompanyInput
  paidMonths: Int
  coursePages: CoursePageCreateManyWithoutCompanyInput
}

input CompanyCreateOneWithoutCoursePagesInput {
  create: CompanyCreateWithoutCoursePagesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutHrsInput {
  create: CompanyCreateWithoutHrsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutCoursePagesInput {
  id: ID
  name: String!
  hrs: UserCreateManyWithoutCompanyInput
  paidMonths: Int
}

input CompanyCreateWithoutHrsInput {
  id: ID
  name: String!
  paidMonths: Int
  coursePages: CoursePageCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  paidMonths_ASC
  paidMonths_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  paidMonths: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  name: String
  hrs: UserUpdateManyWithoutCompanyInput
  paidMonths: Int
  coursePages: CoursePageUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  name: String
  paidMonths: Int
}

input CompanyUpdateOneWithoutCoursePagesInput {
  create: CompanyCreateWithoutCoursePagesInput
  update: CompanyUpdateWithoutCoursePagesDataInput
  upsert: CompanyUpsertWithoutCoursePagesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutHrsInput {
  create: CompanyCreateWithoutHrsInput
  update: CompanyUpdateWithoutHrsDataInput
  upsert: CompanyUpsertWithoutHrsInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutCoursePagesDataInput {
  name: String
  hrs: UserUpdateManyWithoutCompanyInput
  paidMonths: Int
}

input CompanyUpdateWithoutHrsDataInput {
  name: String
  paidMonths: Int
  coursePages: CoursePageUpdateManyWithoutCompanyInput
}

input CompanyUpsertWithoutCoursePagesInput {
  update: CompanyUpdateWithoutCoursePagesDataInput!
  create: CompanyCreateWithoutCoursePagesInput!
}

input CompanyUpsertWithoutHrsInput {
  update: CompanyUpdateWithoutHrsDataInput!
  create: CompanyCreateWithoutHrsInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hrs_every: UserWhereInput
  hrs_some: UserWhereInput
  hrs_none: UserWhereInput
  paidMonths: Int
  paidMonths_not: Int
  paidMonths_in: [Int!]
  paidMonths_not_in: [Int!]
  paidMonths_lt: Int
  paidMonths_lte: Int
  paidMonths_gt: Int
  paidMonths_gte: Int
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

type Construction {
  id: ID!
  name: String!
  variants: [String!]!
  answer: [String!]!
  hint: String
  type: String!
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  user: User!
  lesson: Lesson!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionConnection {
  pageInfo: PageInfo!
  edges: [ConstructionEdge]!
  aggregate: AggregateConstruction!
}

input ConstructionCreateanswerInput {
  set: [String!]
}

input ConstructionCreateInput {
  id: ID
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  user: UserCreateOneWithoutConstructionInput!
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

input ConstructionCreateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  connect: [ConstructionWhereUniqueInput!]
}

input ConstructionCreateOneWithoutConstructionResultsInput {
  create: ConstructionCreateWithoutConstructionResultsInput
  connect: ConstructionWhereUniqueInput
}

input ConstructionCreatevariantsInput {
  set: [String!]
}

input ConstructionCreateWithoutConstructionResultsInput {
  id: ID
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  user: UserCreateOneWithoutConstructionInput!
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

input ConstructionCreateWithoutLessonInput {
  id: ID
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  user: UserCreateOneWithoutConstructionInput!
  lessonID: ID!
}

input ConstructionCreateWithoutUserInput {
  id: ID
  name: String!
  variants: ConstructionCreatevariantsInput
  answer: ConstructionCreateanswerInput
  hint: String
  type: String!
  constructionResults: ConstructionResultCreateManyWithoutConstructionInput
  lesson: LessonCreateOneWithoutConstructionsInput!
  lessonID: ID!
}

type ConstructionEdge {
  node: Construction!
  cursor: String!
}

enum ConstructionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  hint_ASC
  hint_DESC
  type_ASC
  type_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConstructionPreviousValues {
  id: ID!
  name: String!
  variants: [String!]!
  answer: [String!]!
  hint: String
  type: String!
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  inputs: [String!]!
  construction: Construction
  constructionID: ID
  lesson: Lesson
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConstructionResultConnection {
  pageInfo: PageInfo!
  edges: [ConstructionResultEdge]!
  aggregate: AggregateConstructionResult!
}

input ConstructionResultCreateInput {
  id: ID
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  inputs: ConstructionResultCreateinputsInput
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultCreateinputsInput {
  set: [String!]
}

input ConstructionResultCreateManyWithoutConstructionInput {
  create: [ConstructionResultCreateWithoutConstructionInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateManyWithoutLessonInput {
  create: [ConstructionResultCreateWithoutLessonInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateManyWithoutStudentInput {
  create: [ConstructionResultCreateWithoutStudentInput!]
  connect: [ConstructionResultWhereUniqueInput!]
}

input ConstructionResultCreateWithoutConstructionInput {
  id: ID
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  inputs: ConstructionResultCreateinputsInput
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutConstructionResultsInput!
  answer: String
  attempts: Int
  inputs: ConstructionResultCreateinputsInput
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultCreateWithoutStudentInput {
  id: ID
  answer: String
  attempts: Int
  inputs: ConstructionResultCreateinputsInput
  construction: ConstructionCreateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonCreateOneWithoutConstructionResultsInput
  lessonID: ID
}

type ConstructionResultEdge {
  node: ConstructionResult!
  cursor: String!
}

enum ConstructionResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  constructionID_ASC
  constructionID_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConstructionResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  inputs: [String!]!
  constructionID: ID
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ConstructionResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  constructionID: ID
  constructionID_not: ID
  constructionID_in: [ID!]
  constructionID_not_in: [ID!]
  constructionID_lt: ID
  constructionID_lte: ID
  constructionID_gt: ID
  constructionID_gte: ID
  constructionID_contains: ID
  constructionID_not_contains: ID
  constructionID_starts_with: ID
  constructionID_not_starts_with: ID
  constructionID_ends_with: ID
  constructionID_not_ends_with: ID
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionResultScalarWhereInput!]
  OR: [ConstructionResultScalarWhereInput!]
  NOT: [ConstructionResultScalarWhereInput!]
}

type ConstructionResultSubscriptionPayload {
  mutation: MutationType!
  node: ConstructionResult
  updatedFields: [String!]
  previousValues: ConstructionResultPreviousValues
}

input ConstructionResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConstructionResultWhereInput
  AND: [ConstructionResultSubscriptionWhereInput!]
  OR: [ConstructionResultSubscriptionWhereInput!]
  NOT: [ConstructionResultSubscriptionWhereInput!]
}

input ConstructionResultUpdateInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateinputsInput {
  set: [String!]
}

input ConstructionResultUpdateManyDataInput {
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateManyWithoutConstructionInput {
  create: [ConstructionResultCreateWithoutConstructionInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutConstructionInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutConstructionInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithoutLessonInput {
  create: [ConstructionResultCreateWithoutLessonInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithoutStudentInput {
  create: [ConstructionResultCreateWithoutStudentInput!]
  delete: [ConstructionResultWhereUniqueInput!]
  connect: [ConstructionResultWhereUniqueInput!]
  set: [ConstructionResultWhereUniqueInput!]
  disconnect: [ConstructionResultWhereUniqueInput!]
  update: [ConstructionResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ConstructionResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ConstructionResultScalarWhereInput!]
  updateMany: [ConstructionResultUpdateManyWithWhereNestedInput!]
}

input ConstructionResultUpdateManyWithWhereNestedInput {
  where: ConstructionResultScalarWhereInput!
  data: ConstructionResultUpdateManyDataInput!
}

input ConstructionResultUpdateWithoutConstructionDataInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutConstructionResultsInput
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lessonID: ID
}

input ConstructionResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  inputs: ConstructionResultUpdateinputsInput
  construction: ConstructionUpdateOneWithoutConstructionResultsInput
  constructionID: ID
  lesson: LessonUpdateOneWithoutConstructionResultsInput
  lessonID: ID
}

input ConstructionResultUpdateWithWhereUniqueWithoutConstructionInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutConstructionDataInput!
}

input ConstructionResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutLessonDataInput!
}

input ConstructionResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ConstructionResultWhereUniqueInput!
  data: ConstructionResultUpdateWithoutStudentDataInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutConstructionInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutConstructionDataInput!
  create: ConstructionResultCreateWithoutConstructionInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutLessonDataInput!
  create: ConstructionResultCreateWithoutLessonInput!
}

input ConstructionResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ConstructionResultWhereUniqueInput!
  update: ConstructionResultUpdateWithoutStudentDataInput!
  create: ConstructionResultCreateWithoutStudentInput!
}

input ConstructionResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  construction: ConstructionWhereInput
  constructionID: ID
  constructionID_not: ID
  constructionID_in: [ID!]
  constructionID_not_in: [ID!]
  constructionID_lt: ID
  constructionID_lte: ID
  constructionID_gt: ID
  constructionID_gte: ID
  constructionID_contains: ID
  constructionID_not_contains: ID
  constructionID_starts_with: ID
  constructionID_not_starts_with: ID
  constructionID_ends_with: ID
  constructionID_not_ends_with: ID
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionResultWhereInput!]
  OR: [ConstructionResultWhereInput!]
  NOT: [ConstructionResultWhereInput!]
}

input ConstructionResultWhereUniqueInput {
  id: ID
}

input ConstructionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionScalarWhereInput!]
  OR: [ConstructionScalarWhereInput!]
  NOT: [ConstructionScalarWhereInput!]
}

type ConstructionSubscriptionPayload {
  mutation: MutationType!
  node: Construction
  updatedFields: [String!]
  previousValues: ConstructionPreviousValues
}

input ConstructionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConstructionWhereInput
  AND: [ConstructionSubscriptionWhereInput!]
  OR: [ConstructionSubscriptionWhereInput!]
  NOT: [ConstructionSubscriptionWhereInput!]
}

input ConstructionUpdateanswerInput {
  set: [String!]
}

input ConstructionUpdateInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  user: UserUpdateOneRequiredWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateManyDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  lessonID: ID
}

input ConstructionUpdateManyMutationInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  lessonID: ID
}

input ConstructionUpdateManyWithoutLessonInput {
  create: [ConstructionCreateWithoutLessonInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  set: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ConstructionScalarWhereInput!]
  updateMany: [ConstructionUpdateManyWithWhereNestedInput!]
}

input ConstructionUpdateManyWithoutUserInput {
  create: [ConstructionCreateWithoutUserInput!]
  delete: [ConstructionWhereUniqueInput!]
  connect: [ConstructionWhereUniqueInput!]
  set: [ConstructionWhereUniqueInput!]
  disconnect: [ConstructionWhereUniqueInput!]
  update: [ConstructionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConstructionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ConstructionScalarWhereInput!]
  updateMany: [ConstructionUpdateManyWithWhereNestedInput!]
}

input ConstructionUpdateManyWithWhereNestedInput {
  where: ConstructionScalarWhereInput!
  data: ConstructionUpdateManyDataInput!
}

input ConstructionUpdateOneWithoutConstructionResultsInput {
  create: ConstructionCreateWithoutConstructionResultsInput
  update: ConstructionUpdateWithoutConstructionResultsDataInput
  upsert: ConstructionUpsertWithoutConstructionResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: ConstructionWhereUniqueInput
}

input ConstructionUpdatevariantsInput {
  set: [String!]
}

input ConstructionUpdateWithoutConstructionResultsDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  user: UserUpdateOneRequiredWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateWithoutLessonDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  user: UserUpdateOneRequiredWithoutConstructionInput
  lessonID: ID
}

input ConstructionUpdateWithoutUserDataInput {
  name: String
  variants: ConstructionUpdatevariantsInput
  answer: ConstructionUpdateanswerInput
  hint: String
  type: String
  constructionResults: ConstructionResultUpdateManyWithoutConstructionInput
  lesson: LessonUpdateOneRequiredWithoutConstructionsInput
  lessonID: ID
}

input ConstructionUpdateWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutLessonDataInput!
}

input ConstructionUpdateWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  data: ConstructionUpdateWithoutUserDataInput!
}

input ConstructionUpsertWithoutConstructionResultsInput {
  update: ConstructionUpdateWithoutConstructionResultsDataInput!
  create: ConstructionCreateWithoutConstructionResultsInput!
}

input ConstructionUpsertWithWhereUniqueWithoutLessonInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutLessonDataInput!
  create: ConstructionCreateWithoutLessonInput!
}

input ConstructionUpsertWithWhereUniqueWithoutUserInput {
  where: ConstructionWhereUniqueInput!
  update: ConstructionUpdateWithoutUserDataInput!
  create: ConstructionCreateWithoutUserInput!
}

input ConstructionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConstructionWhereInput!]
  OR: [ConstructionWhereInput!]
  NOT: [ConstructionWhereInput!]
}

input ConstructionWhereUniqueInput {
  id: ID
}

type CoursePage {
  id: ID!
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: User!
  authors(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  careerTrack(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrack!]
  numInCareerTrack: Int
  published: Boolean
  uni: Uni
  uniID: ID
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  new_students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  company: Company
  promocode: [Json!]!
  visits(where: CourseVisitWhereInput, orderBy: CourseVisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseVisit!]
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoursePageConnection {
  pageInfo: PageInfo!
  edges: [CoursePageEdge]!
  aggregate: AggregateCoursePage!
}

input CoursePageCreateInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateManyInput {
  create: [CoursePageCreateInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutAuthorsInput {
  create: [CoursePageCreateWithoutAuthorsInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutCareerTrackInput {
  create: [CoursePageCreateWithoutCareerTrackInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutCompanyInput {
  create: [CoursePageCreateWithoutCompanyInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutNew_studentsInput {
  create: [CoursePageCreateWithoutNew_studentsInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutPostsInput {
  create: [CoursePageCreateWithoutPostsInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutUniInput {
  create: [CoursePageCreateWithoutUniInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  connect: [CoursePageWhereUniqueInput!]
}

input CoursePageCreateOneWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutOrdersInput {
  create: CoursePageCreateWithoutOrdersInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreateOneWithoutVisitsInput {
  create: CoursePageCreateWithoutVisitsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageCreatepromocodeInput {
  set: [Json!]
}

input CoursePageCreatestudentsInput {
  set: [ID!]
}

input CoursePageCreatetagsInput {
  set: [String!]
}

input CoursePageCreateWithoutApplicationsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutAuthorsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutCareerTrackInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutCompanyInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutLessonsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutNew_studentsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutOrdersInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutPostsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutUniInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutUserInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  visits: CourseVisitCreateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

input CoursePageCreateWithoutVisitsInput {
  id: ID
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserCreateOneWithoutCoursePagesInput!
  authors: UserCreateManyWithoutCo_coursePagesInput
  lessons: LessonCreateManyWithoutCoursePageInput
  applications: ApplicationCreateManyWithoutCoursePageInput
  careerTrack: CareerTrackCreateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniCreateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostCreateManyWithoutCoursePagesInput
  tags: CoursePageCreatetagsInput
  courseType: CourseType
  students: CoursePageCreatestudentsInput
  new_students: UserCreateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderCreateManyWithoutCoursePageInput
  company: CompanyCreateOneWithoutCoursePagesInput
  promocode: CoursePageCreatepromocodeInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageCreateManyInput
}

type CoursePageEdge {
  node: CoursePage!
  cursor: String!
}

enum CoursePageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  banner_ASC
  banner_DESC
  weeks_ASC
  weeks_DESC
  subscription_ASC
  subscription_DESC
  news_ASC
  news_DESC
  numInCareerTrack_ASC
  numInCareerTrack_DESC
  published_ASC
  published_DESC
  uniID_ASC
  uniID_DESC
  courseType_ASC
  courseType_DESC
  price_ASC
  price_DESC
  subscriptionPrice_ASC
  subscriptionPrice_DESC
  discountPrice_ASC
  discountPrice_DESC
  audience_ASC
  audience_DESC
  result_ASC
  result_DESC
  tariffs_ASC
  tariffs_DESC
  methods_ASC
  methods_DESC
  batch_ASC
  batch_DESC
  reviews_ASC
  reviews_DESC
  openLesson_ASC
  openLesson_DESC
  video_ASC
  video_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: [String!]!
  courseType: CourseType
  students: [ID!]!
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  promocode: [Json!]!
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CoursePageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  weeks: Int
  weeks_not: Int
  weeks_in: [Int!]
  weeks_not_in: [Int!]
  weeks_lt: Int
  weeks_lte: Int
  weeks_gt: Int
  weeks_gte: Int
  subscription: Boolean
  subscription_not: Boolean
  news: String
  news_not: String
  news_in: [String!]
  news_not_in: [String!]
  news_lt: String
  news_lte: String
  news_gt: String
  news_gte: String
  news_contains: String
  news_not_contains: String
  news_starts_with: String
  news_not_starts_with: String
  news_ends_with: String
  news_not_ends_with: String
  numInCareerTrack: Int
  numInCareerTrack_not: Int
  numInCareerTrack_in: [Int!]
  numInCareerTrack_not_in: [Int!]
  numInCareerTrack_lt: Int
  numInCareerTrack_lte: Int
  numInCareerTrack_gt: Int
  numInCareerTrack_gte: Int
  published: Boolean
  published_not: Boolean
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  courseType: CourseType
  courseType_not: CourseType
  courseType_in: [CourseType!]
  courseType_not_in: [CourseType!]
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  subscriptionPrice: Int
  subscriptionPrice_not: Int
  subscriptionPrice_in: [Int!]
  subscriptionPrice_not_in: [Int!]
  subscriptionPrice_lt: Int
  subscriptionPrice_lte: Int
  subscriptionPrice_gt: Int
  subscriptionPrice_gte: Int
  discountPrice: Int
  discountPrice_not: Int
  discountPrice_in: [Int!]
  discountPrice_not_in: [Int!]
  discountPrice_lt: Int
  discountPrice_lte: Int
  discountPrice_gt: Int
  discountPrice_gte: Int
  audience: String
  audience_not: String
  audience_in: [String!]
  audience_not_in: [String!]
  audience_lt: String
  audience_lte: String
  audience_gt: String
  audience_gte: String
  audience_contains: String
  audience_not_contains: String
  audience_starts_with: String
  audience_not_starts_with: String
  audience_ends_with: String
  audience_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  tariffs: String
  tariffs_not: String
  tariffs_in: [String!]
  tariffs_not_in: [String!]
  tariffs_lt: String
  tariffs_lte: String
  tariffs_gt: String
  tariffs_gte: String
  tariffs_contains: String
  tariffs_not_contains: String
  tariffs_starts_with: String
  tariffs_not_starts_with: String
  tariffs_ends_with: String
  tariffs_not_ends_with: String
  methods: String
  methods_not: String
  methods_in: [String!]
  methods_not_in: [String!]
  methods_lt: String
  methods_lte: String
  methods_gt: String
  methods_gte: String
  methods_contains: String
  methods_not_contains: String
  methods_starts_with: String
  methods_not_starts_with: String
  methods_ends_with: String
  methods_not_ends_with: String
  batch: String
  batch_not: String
  batch_in: [String!]
  batch_not_in: [String!]
  batch_lt: String
  batch_lte: String
  batch_gt: String
  batch_gte: String
  batch_contains: String
  batch_not_contains: String
  batch_starts_with: String
  batch_not_starts_with: String
  batch_ends_with: String
  batch_not_ends_with: String
  openLesson: ID
  openLesson_not: ID
  openLesson_in: [ID!]
  openLesson_not_in: [ID!]
  openLesson_lt: ID
  openLesson_lte: ID
  openLesson_gt: ID
  openLesson_gte: ID
  openLesson_contains: ID
  openLesson_not_contains: ID
  openLesson_starts_with: ID
  openLesson_not_starts_with: ID
  openLesson_ends_with: ID
  openLesson_not_ends_with: ID
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CoursePageScalarWhereInput!]
  OR: [CoursePageScalarWhereInput!]
  NOT: [CoursePageScalarWhereInput!]
}

type CoursePageSubscriptionPayload {
  mutation: MutationType!
  node: CoursePage
  updatedFields: [String!]
  previousValues: CoursePagePreviousValues
}

input CoursePageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoursePageWhereInput
  AND: [CoursePageSubscriptionWhereInput!]
  OR: [CoursePageSubscriptionWhereInput!]
  NOT: [CoursePageSubscriptionWhereInput!]
}

input CoursePageUpdateDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateManyDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  promocode: CoursePageUpdatepromocodeInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
}

input CoursePageUpdateManyInput {
  create: [CoursePageCreateInput!]
  update: [CoursePageUpdateWithWhereUniqueNestedInput!]
  upsert: [CoursePageUpsertWithWhereUniqueNestedInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyMutationInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  promocode: CoursePageUpdatepromocodeInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
}

input CoursePageUpdateManyWithoutAuthorsInput {
  create: [CoursePageCreateWithoutAuthorsInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutAuthorsInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutAuthorsInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutCareerTrackInput {
  create: [CoursePageCreateWithoutCareerTrackInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutCareerTrackInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutCareerTrackInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutCompanyInput {
  create: [CoursePageCreateWithoutCompanyInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutNew_studentsInput {
  create: [CoursePageCreateWithoutNew_studentsInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutNew_studentsInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutNew_studentsInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutPostsInput {
  create: [CoursePageCreateWithoutPostsInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutPostsInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutUniInput {
  create: [CoursePageCreateWithoutUniInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutUniInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutUniInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithoutUserInput {
  create: [CoursePageCreateWithoutUserInput!]
  delete: [CoursePageWhereUniqueInput!]
  connect: [CoursePageWhereUniqueInput!]
  set: [CoursePageWhereUniqueInput!]
  disconnect: [CoursePageWhereUniqueInput!]
  update: [CoursePageUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CoursePageUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CoursePageScalarWhereInput!]
  updateMany: [CoursePageUpdateManyWithWhereNestedInput!]
}

input CoursePageUpdateManyWithWhereNestedInput {
  where: CoursePageScalarWhereInput!
  data: CoursePageUpdateManyDataInput!
}

input CoursePageUpdateOneRequiredWithoutApplicationsInput {
  create: CoursePageCreateWithoutApplicationsInput
  update: CoursePageUpdateWithoutApplicationsDataInput
  upsert: CoursePageUpsertWithoutApplicationsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutLessonsInput {
  create: CoursePageCreateWithoutLessonsInput
  update: CoursePageUpdateWithoutLessonsDataInput
  upsert: CoursePageUpsertWithoutLessonsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutOrdersInput {
  create: CoursePageCreateWithoutOrdersInput
  update: CoursePageUpdateWithoutOrdersDataInput
  upsert: CoursePageUpsertWithoutOrdersInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdateOneRequiredWithoutVisitsInput {
  create: CoursePageCreateWithoutVisitsInput
  update: CoursePageUpdateWithoutVisitsDataInput
  upsert: CoursePageUpsertWithoutVisitsInput
  connect: CoursePageWhereUniqueInput
}

input CoursePageUpdatepromocodeInput {
  set: [Json!]
}

input CoursePageUpdatestudentsInput {
  set: [ID!]
}

input CoursePageUpdatetagsInput {
  set: [String!]
}

input CoursePageUpdateWithoutApplicationsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutAuthorsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutCareerTrackDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutCompanyDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutLessonsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutNew_studentsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutOrdersDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutPostsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutUniDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutUserDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  visits: CourseVisitUpdateManyWithoutCoursePageInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithoutVisitsDataInput {
  title: String
  description: String
  image: String
  banner: String
  weeks: Int
  subscription: Boolean
  news: String
  user: UserUpdateOneRequiredWithoutCoursePagesInput
  authors: UserUpdateManyWithoutCo_coursePagesInput
  lessons: LessonUpdateManyWithoutCoursePageInput
  applications: ApplicationUpdateManyWithoutCoursePageInput
  careerTrack: CareerTrackUpdateManyWithoutCoursePagesInput
  numInCareerTrack: Int
  published: Boolean
  uni: UniUpdateOneWithoutUniCoursePagesInput
  uniID: ID
  posts: PostUpdateManyWithoutCoursePagesInput
  tags: CoursePageUpdatetagsInput
  courseType: CourseType
  students: CoursePageUpdatestudentsInput
  new_students: UserUpdateManyWithoutNew_subjectsInput
  price: Int
  subscriptionPrice: Int
  discountPrice: Int
  orders: OrderUpdateManyWithoutCoursePageInput
  company: CompanyUpdateOneWithoutCoursePagesInput
  promocode: CoursePageUpdatepromocodeInput
  audience: String
  result: String
  tariffs: String
  methods: String
  batch: String
  reviews: Json
  openLesson: ID
  video: String
  package: CoursePageUpdateManyInput
}

input CoursePageUpdateWithWhereUniqueNestedInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutAuthorsInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutAuthorsDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutCareerTrackInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutCareerTrackDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutCompanyInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutCompanyDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutNew_studentsInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutNew_studentsDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutPostsInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutPostsDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutUniInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutUniDataInput!
}

input CoursePageUpdateWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  data: CoursePageUpdateWithoutUserDataInput!
}

input CoursePageUpsertWithoutApplicationsInput {
  update: CoursePageUpdateWithoutApplicationsDataInput!
  create: CoursePageCreateWithoutApplicationsInput!
}

input CoursePageUpsertWithoutLessonsInput {
  update: CoursePageUpdateWithoutLessonsDataInput!
  create: CoursePageCreateWithoutLessonsInput!
}

input CoursePageUpsertWithoutOrdersInput {
  update: CoursePageUpdateWithoutOrdersDataInput!
  create: CoursePageCreateWithoutOrdersInput!
}

input CoursePageUpsertWithoutVisitsInput {
  update: CoursePageUpdateWithoutVisitsDataInput!
  create: CoursePageCreateWithoutVisitsInput!
}

input CoursePageUpsertWithWhereUniqueNestedInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateDataInput!
  create: CoursePageCreateInput!
}

input CoursePageUpsertWithWhereUniqueWithoutAuthorsInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutAuthorsDataInput!
  create: CoursePageCreateWithoutAuthorsInput!
}

input CoursePageUpsertWithWhereUniqueWithoutCareerTrackInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutCareerTrackDataInput!
  create: CoursePageCreateWithoutCareerTrackInput!
}

input CoursePageUpsertWithWhereUniqueWithoutCompanyInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutCompanyDataInput!
  create: CoursePageCreateWithoutCompanyInput!
}

input CoursePageUpsertWithWhereUniqueWithoutNew_studentsInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutNew_studentsDataInput!
  create: CoursePageCreateWithoutNew_studentsInput!
}

input CoursePageUpsertWithWhereUniqueWithoutPostsInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutPostsDataInput!
  create: CoursePageCreateWithoutPostsInput!
}

input CoursePageUpsertWithWhereUniqueWithoutUniInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutUniDataInput!
  create: CoursePageCreateWithoutUniInput!
}

input CoursePageUpsertWithWhereUniqueWithoutUserInput {
  where: CoursePageWhereUniqueInput!
  update: CoursePageUpdateWithoutUserDataInput!
  create: CoursePageCreateWithoutUserInput!
}

input CoursePageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  weeks: Int
  weeks_not: Int
  weeks_in: [Int!]
  weeks_not_in: [Int!]
  weeks_lt: Int
  weeks_lte: Int
  weeks_gt: Int
  weeks_gte: Int
  subscription: Boolean
  subscription_not: Boolean
  news: String
  news_not: String
  news_in: [String!]
  news_not_in: [String!]
  news_lt: String
  news_lte: String
  news_gt: String
  news_gte: String
  news_contains: String
  news_not_contains: String
  news_starts_with: String
  news_not_starts_with: String
  news_ends_with: String
  news_not_ends_with: String
  user: UserWhereInput
  authors_every: UserWhereInput
  authors_some: UserWhereInput
  authors_none: UserWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  careerTrack_every: CareerTrackWhereInput
  careerTrack_some: CareerTrackWhereInput
  careerTrack_none: CareerTrackWhereInput
  numInCareerTrack: Int
  numInCareerTrack_not: Int
  numInCareerTrack_in: [Int!]
  numInCareerTrack_not_in: [Int!]
  numInCareerTrack_lt: Int
  numInCareerTrack_lte: Int
  numInCareerTrack_gt: Int
  numInCareerTrack_gte: Int
  published: Boolean
  published_not: Boolean
  uni: UniWhereInput
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  courseType: CourseType
  courseType_not: CourseType
  courseType_in: [CourseType!]
  courseType_not_in: [CourseType!]
  new_students_every: UserWhereInput
  new_students_some: UserWhereInput
  new_students_none: UserWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  subscriptionPrice: Int
  subscriptionPrice_not: Int
  subscriptionPrice_in: [Int!]
  subscriptionPrice_not_in: [Int!]
  subscriptionPrice_lt: Int
  subscriptionPrice_lte: Int
  subscriptionPrice_gt: Int
  subscriptionPrice_gte: Int
  discountPrice: Int
  discountPrice_not: Int
  discountPrice_in: [Int!]
  discountPrice_not_in: [Int!]
  discountPrice_lt: Int
  discountPrice_lte: Int
  discountPrice_gt: Int
  discountPrice_gte: Int
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  company: CompanyWhereInput
  visits_every: CourseVisitWhereInput
  visits_some: CourseVisitWhereInput
  visits_none: CourseVisitWhereInput
  audience: String
  audience_not: String
  audience_in: [String!]
  audience_not_in: [String!]
  audience_lt: String
  audience_lte: String
  audience_gt: String
  audience_gte: String
  audience_contains: String
  audience_not_contains: String
  audience_starts_with: String
  audience_not_starts_with: String
  audience_ends_with: String
  audience_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  tariffs: String
  tariffs_not: String
  tariffs_in: [String!]
  tariffs_not_in: [String!]
  tariffs_lt: String
  tariffs_lte: String
  tariffs_gt: String
  tariffs_gte: String
  tariffs_contains: String
  tariffs_not_contains: String
  tariffs_starts_with: String
  tariffs_not_starts_with: String
  tariffs_ends_with: String
  tariffs_not_ends_with: String
  methods: String
  methods_not: String
  methods_in: [String!]
  methods_not_in: [String!]
  methods_lt: String
  methods_lte: String
  methods_gt: String
  methods_gte: String
  methods_contains: String
  methods_not_contains: String
  methods_starts_with: String
  methods_not_starts_with: String
  methods_ends_with: String
  methods_not_ends_with: String
  batch: String
  batch_not: String
  batch_in: [String!]
  batch_not_in: [String!]
  batch_lt: String
  batch_lte: String
  batch_gt: String
  batch_gte: String
  batch_contains: String
  batch_not_contains: String
  batch_starts_with: String
  batch_not_starts_with: String
  batch_ends_with: String
  batch_not_ends_with: String
  openLesson: ID
  openLesson_not: ID
  openLesson_in: [ID!]
  openLesson_not_in: [ID!]
  openLesson_lt: ID
  openLesson_lte: ID
  openLesson_gt: ID
  openLesson_gte: ID
  openLesson_contains: ID
  openLesson_not_contains: ID
  openLesson_starts_with: ID
  openLesson_not_starts_with: ID
  openLesson_ends_with: ID
  openLesson_not_ends_with: ID
  video: String
  video_not: String
  video_in: [String!]
  video_not_in: [String!]
  video_lt: String
  video_lte: String
  video_gt: String
  video_gte: String
  video_contains: String
  video_not_contains: String
  video_starts_with: String
  video_not_starts_with: String
  video_ends_with: String
  video_not_ends_with: String
  package_every: CoursePageWhereInput
  package_some: CoursePageWhereInput
  package_none: CoursePageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CoursePageWhereInput!]
  OR: [CoursePageWhereInput!]
  NOT: [CoursePageWhereInput!]
}

input CoursePageWhereUniqueInput {
  id: ID
}

enum CourseType {
  PUBLIC
  PRIVATE
  FORMONEY
  UNI
  CHALLENGE
}

type CourseVisit {
  id: ID!
  student: User!
  visitsNumber: Int
  coursePage: CoursePage!
  reminders: [DateTime!]!
  finish: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseVisitConnection {
  pageInfo: PageInfo!
  edges: [CourseVisitEdge]!
  aggregate: AggregateCourseVisit!
}

input CourseVisitCreateInput {
  id: ID
  student: UserCreateOneWithoutCourseVisitsInput!
  visitsNumber: Int
  coursePage: CoursePageCreateOneWithoutVisitsInput!
  reminders: CourseVisitCreateremindersInput
  finish: DateTime
}

input CourseVisitCreateManyWithoutCoursePageInput {
  create: [CourseVisitCreateWithoutCoursePageInput!]
  connect: [CourseVisitWhereUniqueInput!]
}

input CourseVisitCreateManyWithoutStudentInput {
  create: [CourseVisitCreateWithoutStudentInput!]
  connect: [CourseVisitWhereUniqueInput!]
}

input CourseVisitCreateremindersInput {
  set: [DateTime!]
}

input CourseVisitCreateWithoutCoursePageInput {
  id: ID
  student: UserCreateOneWithoutCourseVisitsInput!
  visitsNumber: Int
  reminders: CourseVisitCreateremindersInput
  finish: DateTime
}

input CourseVisitCreateWithoutStudentInput {
  id: ID
  visitsNumber: Int
  coursePage: CoursePageCreateOneWithoutVisitsInput!
  reminders: CourseVisitCreateremindersInput
  finish: DateTime
}

type CourseVisitEdge {
  node: CourseVisit!
  cursor: String!
}

enum CourseVisitOrderByInput {
  id_ASC
  id_DESC
  visitsNumber_ASC
  visitsNumber_DESC
  finish_ASC
  finish_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CourseVisitPreviousValues {
  id: ID!
  visitsNumber: Int
  reminders: [DateTime!]!
  finish: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CourseVisitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  finish: DateTime
  finish_not: DateTime
  finish_in: [DateTime!]
  finish_not_in: [DateTime!]
  finish_lt: DateTime
  finish_lte: DateTime
  finish_gt: DateTime
  finish_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseVisitScalarWhereInput!]
  OR: [CourseVisitScalarWhereInput!]
  NOT: [CourseVisitScalarWhereInput!]
}

type CourseVisitSubscriptionPayload {
  mutation: MutationType!
  node: CourseVisit
  updatedFields: [String!]
  previousValues: CourseVisitPreviousValues
}

input CourseVisitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseVisitWhereInput
  AND: [CourseVisitSubscriptionWhereInput!]
  OR: [CourseVisitSubscriptionWhereInput!]
  NOT: [CourseVisitSubscriptionWhereInput!]
}

input CourseVisitUpdateInput {
  student: UserUpdateOneRequiredWithoutCourseVisitsInput
  visitsNumber: Int
  coursePage: CoursePageUpdateOneRequiredWithoutVisitsInput
  reminders: CourseVisitUpdateremindersInput
  finish: DateTime
}

input CourseVisitUpdateManyDataInput {
  visitsNumber: Int
  reminders: CourseVisitUpdateremindersInput
  finish: DateTime
}

input CourseVisitUpdateManyMutationInput {
  visitsNumber: Int
  reminders: CourseVisitUpdateremindersInput
  finish: DateTime
}

input CourseVisitUpdateManyWithoutCoursePageInput {
  create: [CourseVisitCreateWithoutCoursePageInput!]
  delete: [CourseVisitWhereUniqueInput!]
  connect: [CourseVisitWhereUniqueInput!]
  set: [CourseVisitWhereUniqueInput!]
  disconnect: [CourseVisitWhereUniqueInput!]
  update: [CourseVisitUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [CourseVisitUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [CourseVisitScalarWhereInput!]
  updateMany: [CourseVisitUpdateManyWithWhereNestedInput!]
}

input CourseVisitUpdateManyWithoutStudentInput {
  create: [CourseVisitCreateWithoutStudentInput!]
  delete: [CourseVisitWhereUniqueInput!]
  connect: [CourseVisitWhereUniqueInput!]
  set: [CourseVisitWhereUniqueInput!]
  disconnect: [CourseVisitWhereUniqueInput!]
  update: [CourseVisitUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [CourseVisitUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [CourseVisitScalarWhereInput!]
  updateMany: [CourseVisitUpdateManyWithWhereNestedInput!]
}

input CourseVisitUpdateManyWithWhereNestedInput {
  where: CourseVisitScalarWhereInput!
  data: CourseVisitUpdateManyDataInput!
}

input CourseVisitUpdateremindersInput {
  set: [DateTime!]
}

input CourseVisitUpdateWithoutCoursePageDataInput {
  student: UserUpdateOneRequiredWithoutCourseVisitsInput
  visitsNumber: Int
  reminders: CourseVisitUpdateremindersInput
  finish: DateTime
}

input CourseVisitUpdateWithoutStudentDataInput {
  visitsNumber: Int
  coursePage: CoursePageUpdateOneRequiredWithoutVisitsInput
  reminders: CourseVisitUpdateremindersInput
  finish: DateTime
}

input CourseVisitUpdateWithWhereUniqueWithoutCoursePageInput {
  where: CourseVisitWhereUniqueInput!
  data: CourseVisitUpdateWithoutCoursePageDataInput!
}

input CourseVisitUpdateWithWhereUniqueWithoutStudentInput {
  where: CourseVisitWhereUniqueInput!
  data: CourseVisitUpdateWithoutStudentDataInput!
}

input CourseVisitUpsertWithWhereUniqueWithoutCoursePageInput {
  where: CourseVisitWhereUniqueInput!
  update: CourseVisitUpdateWithoutCoursePageDataInput!
  create: CourseVisitCreateWithoutCoursePageInput!
}

input CourseVisitUpsertWithWhereUniqueWithoutStudentInput {
  where: CourseVisitWhereUniqueInput!
  update: CourseVisitUpdateWithoutStudentDataInput!
  create: CourseVisitCreateWithoutStudentInput!
}

input CourseVisitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  coursePage: CoursePageWhereInput
  finish: DateTime
  finish_not: DateTime
  finish_in: [DateTime!]
  finish_not_in: [DateTime!]
  finish_lt: DateTime
  finish_lte: DateTime
  finish_gt: DateTime
  finish_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseVisitWhereInput!]
  OR: [CourseVisitWhereInput!]
  NOT: [CourseVisitWhereInput!]
}

input CourseVisitWhereUniqueInput {
  id: ID
}

scalar DateTime

type Document {
  id: ID!
  title: String!
  user: User!
  lesson: Lesson!
  documentResults(where: DocumentResultWhereInput, orderBy: DocumentResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentResult!]
  clauses(where: ClauseWhereInput, orderBy: ClauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clause!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DocumentConnection {
  pageInfo: PageInfo!
  edges: [DocumentEdge]!
  aggregate: AggregateDocument!
}

input DocumentCreateInput {
  id: ID
  title: String!
  user: UserCreateOneWithoutDocumentsInput!
  lesson: LessonCreateOneWithoutDocumentsInput!
  documentResults: DocumentResultCreateManyWithoutDocumentInput
  clauses: ClauseCreateManyWithoutDocumentInput
}

input DocumentCreateManyWithoutLessonInput {
  create: [DocumentCreateWithoutLessonInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateManyWithoutUserInput {
  create: [DocumentCreateWithoutUserInput!]
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateOneWithoutClausesInput {
  create: DocumentCreateWithoutClausesInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOneWithoutDocumentResultsInput {
  create: DocumentCreateWithoutDocumentResultsInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutClausesInput {
  id: ID
  title: String!
  user: UserCreateOneWithoutDocumentsInput!
  lesson: LessonCreateOneWithoutDocumentsInput!
  documentResults: DocumentResultCreateManyWithoutDocumentInput
}

input DocumentCreateWithoutDocumentResultsInput {
  id: ID
  title: String!
  user: UserCreateOneWithoutDocumentsInput!
  lesson: LessonCreateOneWithoutDocumentsInput!
  clauses: ClauseCreateManyWithoutDocumentInput
}

input DocumentCreateWithoutLessonInput {
  id: ID
  title: String!
  user: UserCreateOneWithoutDocumentsInput!
  documentResults: DocumentResultCreateManyWithoutDocumentInput
  clauses: ClauseCreateManyWithoutDocumentInput
}

input DocumentCreateWithoutUserInput {
  id: ID
  title: String!
  lesson: LessonCreateOneWithoutDocumentsInput!
  documentResults: DocumentResultCreateManyWithoutDocumentInput
  clauses: ClauseCreateManyWithoutDocumentInput
}

type DocumentEdge {
  node: Document!
  cursor: String!
}

enum DocumentOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DocumentPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DocumentResult {
  id: ID!
  user: User
  answers: [String!]!
  drafts: [String!]!
  lesson: Lesson
  document: Document
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DocumentResultConnection {
  pageInfo: PageInfo!
  edges: [DocumentResultEdge]!
  aggregate: AggregateDocumentResult!
}

input DocumentResultCreateanswersInput {
  set: [String!]
}

input DocumentResultCreatedraftsInput {
  set: [String!]
}

input DocumentResultCreateInput {
  id: ID
  user: UserCreateOneWithoutDocumentResultsInput
  answers: DocumentResultCreateanswersInput
  drafts: DocumentResultCreatedraftsInput
  lesson: LessonCreateOneWithoutDocumentResultsInput
  document: DocumentCreateOneWithoutDocumentResultsInput
}

input DocumentResultCreateManyWithoutDocumentInput {
  create: [DocumentResultCreateWithoutDocumentInput!]
  connect: [DocumentResultWhereUniqueInput!]
}

input DocumentResultCreateManyWithoutLessonInput {
  create: [DocumentResultCreateWithoutLessonInput!]
  connect: [DocumentResultWhereUniqueInput!]
}

input DocumentResultCreateManyWithoutUserInput {
  create: [DocumentResultCreateWithoutUserInput!]
  connect: [DocumentResultWhereUniqueInput!]
}

input DocumentResultCreateWithoutDocumentInput {
  id: ID
  user: UserCreateOneWithoutDocumentResultsInput
  answers: DocumentResultCreateanswersInput
  drafts: DocumentResultCreatedraftsInput
  lesson: LessonCreateOneWithoutDocumentResultsInput
}

input DocumentResultCreateWithoutLessonInput {
  id: ID
  user: UserCreateOneWithoutDocumentResultsInput
  answers: DocumentResultCreateanswersInput
  drafts: DocumentResultCreatedraftsInput
  document: DocumentCreateOneWithoutDocumentResultsInput
}

input DocumentResultCreateWithoutUserInput {
  id: ID
  answers: DocumentResultCreateanswersInput
  drafts: DocumentResultCreatedraftsInput
  lesson: LessonCreateOneWithoutDocumentResultsInput
  document: DocumentCreateOneWithoutDocumentResultsInput
}

type DocumentResultEdge {
  node: DocumentResult!
  cursor: String!
}

enum DocumentResultOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DocumentResultPreviousValues {
  id: ID!
  answers: [String!]!
  drafts: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DocumentResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentResultScalarWhereInput!]
  OR: [DocumentResultScalarWhereInput!]
  NOT: [DocumentResultScalarWhereInput!]
}

type DocumentResultSubscriptionPayload {
  mutation: MutationType!
  node: DocumentResult
  updatedFields: [String!]
  previousValues: DocumentResultPreviousValues
}

input DocumentResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentResultWhereInput
  AND: [DocumentResultSubscriptionWhereInput!]
  OR: [DocumentResultSubscriptionWhereInput!]
  NOT: [DocumentResultSubscriptionWhereInput!]
}

input DocumentResultUpdateanswersInput {
  set: [String!]
}

input DocumentResultUpdatedraftsInput {
  set: [String!]
}

input DocumentResultUpdateInput {
  user: UserUpdateOneWithoutDocumentResultsInput
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
  lesson: LessonUpdateOneWithoutDocumentResultsInput
  document: DocumentUpdateOneWithoutDocumentResultsInput
}

input DocumentResultUpdateManyDataInput {
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
}

input DocumentResultUpdateManyMutationInput {
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
}

input DocumentResultUpdateManyWithoutDocumentInput {
  create: [DocumentResultCreateWithoutDocumentInput!]
  delete: [DocumentResultWhereUniqueInput!]
  connect: [DocumentResultWhereUniqueInput!]
  set: [DocumentResultWhereUniqueInput!]
  disconnect: [DocumentResultWhereUniqueInput!]
  update: [DocumentResultUpdateWithWhereUniqueWithoutDocumentInput!]
  upsert: [DocumentResultUpsertWithWhereUniqueWithoutDocumentInput!]
  deleteMany: [DocumentResultScalarWhereInput!]
  updateMany: [DocumentResultUpdateManyWithWhereNestedInput!]
}

input DocumentResultUpdateManyWithoutLessonInput {
  create: [DocumentResultCreateWithoutLessonInput!]
  delete: [DocumentResultWhereUniqueInput!]
  connect: [DocumentResultWhereUniqueInput!]
  set: [DocumentResultWhereUniqueInput!]
  disconnect: [DocumentResultWhereUniqueInput!]
  update: [DocumentResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [DocumentResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [DocumentResultScalarWhereInput!]
  updateMany: [DocumentResultUpdateManyWithWhereNestedInput!]
}

input DocumentResultUpdateManyWithoutUserInput {
  create: [DocumentResultCreateWithoutUserInput!]
  delete: [DocumentResultWhereUniqueInput!]
  connect: [DocumentResultWhereUniqueInput!]
  set: [DocumentResultWhereUniqueInput!]
  disconnect: [DocumentResultWhereUniqueInput!]
  update: [DocumentResultUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DocumentResultUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DocumentResultScalarWhereInput!]
  updateMany: [DocumentResultUpdateManyWithWhereNestedInput!]
}

input DocumentResultUpdateManyWithWhereNestedInput {
  where: DocumentResultScalarWhereInput!
  data: DocumentResultUpdateManyDataInput!
}

input DocumentResultUpdateWithoutDocumentDataInput {
  user: UserUpdateOneWithoutDocumentResultsInput
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
  lesson: LessonUpdateOneWithoutDocumentResultsInput
}

input DocumentResultUpdateWithoutLessonDataInput {
  user: UserUpdateOneWithoutDocumentResultsInput
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
  document: DocumentUpdateOneWithoutDocumentResultsInput
}

input DocumentResultUpdateWithoutUserDataInput {
  answers: DocumentResultUpdateanswersInput
  drafts: DocumentResultUpdatedraftsInput
  lesson: LessonUpdateOneWithoutDocumentResultsInput
  document: DocumentUpdateOneWithoutDocumentResultsInput
}

input DocumentResultUpdateWithWhereUniqueWithoutDocumentInput {
  where: DocumentResultWhereUniqueInput!
  data: DocumentResultUpdateWithoutDocumentDataInput!
}

input DocumentResultUpdateWithWhereUniqueWithoutLessonInput {
  where: DocumentResultWhereUniqueInput!
  data: DocumentResultUpdateWithoutLessonDataInput!
}

input DocumentResultUpdateWithWhereUniqueWithoutUserInput {
  where: DocumentResultWhereUniqueInput!
  data: DocumentResultUpdateWithoutUserDataInput!
}

input DocumentResultUpsertWithWhereUniqueWithoutDocumentInput {
  where: DocumentResultWhereUniqueInput!
  update: DocumentResultUpdateWithoutDocumentDataInput!
  create: DocumentResultCreateWithoutDocumentInput!
}

input DocumentResultUpsertWithWhereUniqueWithoutLessonInput {
  where: DocumentResultWhereUniqueInput!
  update: DocumentResultUpdateWithoutLessonDataInput!
  create: DocumentResultCreateWithoutLessonInput!
}

input DocumentResultUpsertWithWhereUniqueWithoutUserInput {
  where: DocumentResultWhereUniqueInput!
  update: DocumentResultUpdateWithoutUserDataInput!
  create: DocumentResultCreateWithoutUserInput!
}

input DocumentResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  lesson: LessonWhereInput
  document: DocumentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentResultWhereInput!]
  OR: [DocumentResultWhereInput!]
  NOT: [DocumentResultWhereInput!]
}

input DocumentResultWhereUniqueInput {
  id: ID
}

input DocumentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentScalarWhereInput!]
  OR: [DocumentScalarWhereInput!]
  NOT: [DocumentScalarWhereInput!]
}

type DocumentSubscriptionPayload {
  mutation: MutationType!
  node: Document
  updatedFields: [String!]
  previousValues: DocumentPreviousValues
}

input DocumentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DocumentWhereInput
  AND: [DocumentSubscriptionWhereInput!]
  OR: [DocumentSubscriptionWhereInput!]
  NOT: [DocumentSubscriptionWhereInput!]
}

input DocumentUpdateInput {
  title: String
  user: UserUpdateOneRequiredWithoutDocumentsInput
  lesson: LessonUpdateOneRequiredWithoutDocumentsInput
  documentResults: DocumentResultUpdateManyWithoutDocumentInput
  clauses: ClauseUpdateManyWithoutDocumentInput
}

input DocumentUpdateManyDataInput {
  title: String
}

input DocumentUpdateManyMutationInput {
  title: String
}

input DocumentUpdateManyWithoutLessonInput {
  create: [DocumentCreateWithoutLessonInput!]
  delete: [DocumentWhereUniqueInput!]
  connect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [DocumentScalarWhereInput!]
  updateMany: [DocumentUpdateManyWithWhereNestedInput!]
}

input DocumentUpdateManyWithoutUserInput {
  create: [DocumentCreateWithoutUserInput!]
  delete: [DocumentWhereUniqueInput!]
  connect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DocumentScalarWhereInput!]
  updateMany: [DocumentUpdateManyWithWhereNestedInput!]
}

input DocumentUpdateManyWithWhereNestedInput {
  where: DocumentScalarWhereInput!
  data: DocumentUpdateManyDataInput!
}

input DocumentUpdateOneRequiredWithoutClausesInput {
  create: DocumentCreateWithoutClausesInput
  update: DocumentUpdateWithoutClausesDataInput
  upsert: DocumentUpsertWithoutClausesInput
  connect: DocumentWhereUniqueInput
}

input DocumentUpdateOneWithoutDocumentResultsInput {
  create: DocumentCreateWithoutDocumentResultsInput
  update: DocumentUpdateWithoutDocumentResultsDataInput
  upsert: DocumentUpsertWithoutDocumentResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: DocumentWhereUniqueInput
}

input DocumentUpdateWithoutClausesDataInput {
  title: String
  user: UserUpdateOneRequiredWithoutDocumentsInput
  lesson: LessonUpdateOneRequiredWithoutDocumentsInput
  documentResults: DocumentResultUpdateManyWithoutDocumentInput
}

input DocumentUpdateWithoutDocumentResultsDataInput {
  title: String
  user: UserUpdateOneRequiredWithoutDocumentsInput
  lesson: LessonUpdateOneRequiredWithoutDocumentsInput
  clauses: ClauseUpdateManyWithoutDocumentInput
}

input DocumentUpdateWithoutLessonDataInput {
  title: String
  user: UserUpdateOneRequiredWithoutDocumentsInput
  documentResults: DocumentResultUpdateManyWithoutDocumentInput
  clauses: ClauseUpdateManyWithoutDocumentInput
}

input DocumentUpdateWithoutUserDataInput {
  title: String
  lesson: LessonUpdateOneRequiredWithoutDocumentsInput
  documentResults: DocumentResultUpdateManyWithoutDocumentInput
  clauses: ClauseUpdateManyWithoutDocumentInput
}

input DocumentUpdateWithWhereUniqueWithoutLessonInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutLessonDataInput!
}

input DocumentUpdateWithWhereUniqueWithoutUserInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutUserDataInput!
}

input DocumentUpsertWithoutClausesInput {
  update: DocumentUpdateWithoutClausesDataInput!
  create: DocumentCreateWithoutClausesInput!
}

input DocumentUpsertWithoutDocumentResultsInput {
  update: DocumentUpdateWithoutDocumentResultsDataInput!
  create: DocumentCreateWithoutDocumentResultsInput!
}

input DocumentUpsertWithWhereUniqueWithoutLessonInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutLessonDataInput!
  create: DocumentCreateWithoutLessonInput!
}

input DocumentUpsertWithWhereUniqueWithoutUserInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutUserDataInput!
  create: DocumentCreateWithoutUserInput!
}

input DocumentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  documentResults_every: DocumentResultWhereInput
  documentResults_some: DocumentResultWhereInput
  documentResults_none: DocumentResultWhereInput
  clauses_every: ClauseWhereInput
  clauses_some: ClauseWhereInput
  clauses_none: ClauseWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
}

input DocumentWhereUniqueInput {
  id: ID
}

type Feedback {
  id: ID!
  text: String!
  lesson: Lesson
  teacher: User!
  student: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FeedbackConnection {
  pageInfo: PageInfo!
  edges: [FeedbackEdge]!
  aggregate: AggregateFeedback!
}

input FeedbackCreateInput {
  id: ID
  text: String!
  lesson: LessonCreateOneWithoutLessonFeedbackInput
  teacher: UserCreateOneWithoutTeacherFeedbackInput!
  student: UserCreateOneWithoutStudentFeedbackInput!
}

input FeedbackCreateManyWithoutLessonInput {
  create: [FeedbackCreateWithoutLessonInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateManyWithoutStudentInput {
  create: [FeedbackCreateWithoutStudentInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateManyWithoutTeacherInput {
  create: [FeedbackCreateWithoutTeacherInput!]
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateWithoutLessonInput {
  id: ID
  text: String!
  teacher: UserCreateOneWithoutTeacherFeedbackInput!
  student: UserCreateOneWithoutStudentFeedbackInput!
}

input FeedbackCreateWithoutStudentInput {
  id: ID
  text: String!
  lesson: LessonCreateOneWithoutLessonFeedbackInput
  teacher: UserCreateOneWithoutTeacherFeedbackInput!
}

input FeedbackCreateWithoutTeacherInput {
  id: ID
  text: String!
  lesson: LessonCreateOneWithoutLessonFeedbackInput
  student: UserCreateOneWithoutStudentFeedbackInput!
}

type FeedbackEdge {
  node: Feedback!
  cursor: String!
}

enum FeedbackOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeedbackPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FeedbackScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FeedbackScalarWhereInput!]
  OR: [FeedbackScalarWhereInput!]
  NOT: [FeedbackScalarWhereInput!]
}

type FeedbackSubscriptionPayload {
  mutation: MutationType!
  node: Feedback
  updatedFields: [String!]
  previousValues: FeedbackPreviousValues
}

input FeedbackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeedbackWhereInput
  AND: [FeedbackSubscriptionWhereInput!]
  OR: [FeedbackSubscriptionWhereInput!]
  NOT: [FeedbackSubscriptionWhereInput!]
}

input FeedbackUpdateInput {
  text: String
  lesson: LessonUpdateOneWithoutLessonFeedbackInput
  teacher: UserUpdateOneRequiredWithoutTeacherFeedbackInput
  student: UserUpdateOneRequiredWithoutStudentFeedbackInput
}

input FeedbackUpdateManyDataInput {
  text: String
}

input FeedbackUpdateManyMutationInput {
  text: String
}

input FeedbackUpdateManyWithoutLessonInput {
  create: [FeedbackCreateWithoutLessonInput!]
  delete: [FeedbackWhereUniqueInput!]
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [FeedbackScalarWhereInput!]
  updateMany: [FeedbackUpdateManyWithWhereNestedInput!]
}

input FeedbackUpdateManyWithoutStudentInput {
  create: [FeedbackCreateWithoutStudentInput!]
  delete: [FeedbackWhereUniqueInput!]
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [FeedbackScalarWhereInput!]
  updateMany: [FeedbackUpdateManyWithWhereNestedInput!]
}

input FeedbackUpdateManyWithoutTeacherInput {
  create: [FeedbackCreateWithoutTeacherInput!]
  delete: [FeedbackWhereUniqueInput!]
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutTeacherInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutTeacherInput!]
  deleteMany: [FeedbackScalarWhereInput!]
  updateMany: [FeedbackUpdateManyWithWhereNestedInput!]
}

input FeedbackUpdateManyWithWhereNestedInput {
  where: FeedbackScalarWhereInput!
  data: FeedbackUpdateManyDataInput!
}

input FeedbackUpdateWithoutLessonDataInput {
  text: String
  teacher: UserUpdateOneRequiredWithoutTeacherFeedbackInput
  student: UserUpdateOneRequiredWithoutStudentFeedbackInput
}

input FeedbackUpdateWithoutStudentDataInput {
  text: String
  lesson: LessonUpdateOneWithoutLessonFeedbackInput
  teacher: UserUpdateOneRequiredWithoutTeacherFeedbackInput
}

input FeedbackUpdateWithoutTeacherDataInput {
  text: String
  lesson: LessonUpdateOneWithoutLessonFeedbackInput
  student: UserUpdateOneRequiredWithoutStudentFeedbackInput
}

input FeedbackUpdateWithWhereUniqueWithoutLessonInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutLessonDataInput!
}

input FeedbackUpdateWithWhereUniqueWithoutStudentInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutStudentDataInput!
}

input FeedbackUpdateWithWhereUniqueWithoutTeacherInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutTeacherDataInput!
}

input FeedbackUpsertWithWhereUniqueWithoutLessonInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutLessonDataInput!
  create: FeedbackCreateWithoutLessonInput!
}

input FeedbackUpsertWithWhereUniqueWithoutStudentInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutStudentDataInput!
  create: FeedbackCreateWithoutStudentInput!
}

input FeedbackUpsertWithWhereUniqueWithoutTeacherInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutTeacherDataInput!
  create: FeedbackCreateWithoutTeacherInput!
}

input FeedbackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  lesson: LessonWhereInput
  teacher: UserWhereInput
  student: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
}

input FeedbackWhereUniqueInput {
  id: ID
}

type Forum {
  id: ID!
  text: String
  lesson: Lesson
  user: User
  rating(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ForumConnection {
  pageInfo: PageInfo!
  edges: [ForumEdge]!
  aggregate: AggregateForum!
}

input ForumCreateInput {
  id: ID
  text: String
  lesson: LessonCreateOneWithoutForumInput
  user: UserCreateOneWithoutForumsInput
  rating: RatingCreateManyWithoutForumInput
  statements: StatementCreateManyWithoutForumInput
}

input ForumCreateManyWithoutUserInput {
  create: [ForumCreateWithoutUserInput!]
  connect: [ForumWhereUniqueInput!]
}

input ForumCreateOneWithoutLessonInput {
  create: ForumCreateWithoutLessonInput
  connect: ForumWhereUniqueInput
}

input ForumCreateOneWithoutRatingInput {
  create: ForumCreateWithoutRatingInput
  connect: ForumWhereUniqueInput
}

input ForumCreateOneWithoutStatementsInput {
  create: ForumCreateWithoutStatementsInput
  connect: ForumWhereUniqueInput
}

input ForumCreateWithoutLessonInput {
  id: ID
  text: String
  user: UserCreateOneWithoutForumsInput
  rating: RatingCreateManyWithoutForumInput
  statements: StatementCreateManyWithoutForumInput
}

input ForumCreateWithoutRatingInput {
  id: ID
  text: String
  lesson: LessonCreateOneWithoutForumInput
  user: UserCreateOneWithoutForumsInput
  statements: StatementCreateManyWithoutForumInput
}

input ForumCreateWithoutStatementsInput {
  id: ID
  text: String
  lesson: LessonCreateOneWithoutForumInput
  user: UserCreateOneWithoutForumsInput
  rating: RatingCreateManyWithoutForumInput
}

input ForumCreateWithoutUserInput {
  id: ID
  text: String
  lesson: LessonCreateOneWithoutForumInput
  rating: RatingCreateManyWithoutForumInput
  statements: StatementCreateManyWithoutForumInput
}

type ForumEdge {
  node: Forum!
  cursor: String!
}

enum ForumOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ForumPreviousValues {
  id: ID!
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ForumScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumScalarWhereInput!]
  OR: [ForumScalarWhereInput!]
  NOT: [ForumScalarWhereInput!]
}

type ForumSubscriptionPayload {
  mutation: MutationType!
  node: Forum
  updatedFields: [String!]
  previousValues: ForumPreviousValues
}

input ForumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ForumWhereInput
  AND: [ForumSubscriptionWhereInput!]
  OR: [ForumSubscriptionWhereInput!]
  NOT: [ForumSubscriptionWhereInput!]
}

input ForumUpdateInput {
  text: String
  lesson: LessonUpdateOneWithoutForumInput
  user: UserUpdateOneWithoutForumsInput
  rating: RatingUpdateManyWithoutForumInput
  statements: StatementUpdateManyWithoutForumInput
}

input ForumUpdateManyDataInput {
  text: String
}

input ForumUpdateManyMutationInput {
  text: String
}

input ForumUpdateManyWithoutUserInput {
  create: [ForumCreateWithoutUserInput!]
  delete: [ForumWhereUniqueInput!]
  connect: [ForumWhereUniqueInput!]
  set: [ForumWhereUniqueInput!]
  disconnect: [ForumWhereUniqueInput!]
  update: [ForumUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ForumUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ForumScalarWhereInput!]
  updateMany: [ForumUpdateManyWithWhereNestedInput!]
}

input ForumUpdateManyWithWhereNestedInput {
  where: ForumScalarWhereInput!
  data: ForumUpdateManyDataInput!
}

input ForumUpdateOneWithoutLessonInput {
  create: ForumCreateWithoutLessonInput
  update: ForumUpdateWithoutLessonDataInput
  upsert: ForumUpsertWithoutLessonInput
  delete: Boolean
  disconnect: Boolean
  connect: ForumWhereUniqueInput
}

input ForumUpdateOneWithoutRatingInput {
  create: ForumCreateWithoutRatingInput
  update: ForumUpdateWithoutRatingDataInput
  upsert: ForumUpsertWithoutRatingInput
  delete: Boolean
  disconnect: Boolean
  connect: ForumWhereUniqueInput
}

input ForumUpdateOneWithoutStatementsInput {
  create: ForumCreateWithoutStatementsInput
  update: ForumUpdateWithoutStatementsDataInput
  upsert: ForumUpsertWithoutStatementsInput
  delete: Boolean
  disconnect: Boolean
  connect: ForumWhereUniqueInput
}

input ForumUpdateWithoutLessonDataInput {
  text: String
  user: UserUpdateOneWithoutForumsInput
  rating: RatingUpdateManyWithoutForumInput
  statements: StatementUpdateManyWithoutForumInput
}

input ForumUpdateWithoutRatingDataInput {
  text: String
  lesson: LessonUpdateOneWithoutForumInput
  user: UserUpdateOneWithoutForumsInput
  statements: StatementUpdateManyWithoutForumInput
}

input ForumUpdateWithoutStatementsDataInput {
  text: String
  lesson: LessonUpdateOneWithoutForumInput
  user: UserUpdateOneWithoutForumsInput
  rating: RatingUpdateManyWithoutForumInput
}

input ForumUpdateWithoutUserDataInput {
  text: String
  lesson: LessonUpdateOneWithoutForumInput
  rating: RatingUpdateManyWithoutForumInput
  statements: StatementUpdateManyWithoutForumInput
}

input ForumUpdateWithWhereUniqueWithoutUserInput {
  where: ForumWhereUniqueInput!
  data: ForumUpdateWithoutUserDataInput!
}

input ForumUpsertWithoutLessonInput {
  update: ForumUpdateWithoutLessonDataInput!
  create: ForumCreateWithoutLessonInput!
}

input ForumUpsertWithoutRatingInput {
  update: ForumUpdateWithoutRatingDataInput!
  create: ForumCreateWithoutRatingInput!
}

input ForumUpsertWithoutStatementsInput {
  update: ForumUpdateWithoutStatementsDataInput!
  create: ForumCreateWithoutStatementsInput!
}

input ForumUpsertWithWhereUniqueWithoutUserInput {
  where: ForumWhereUniqueInput!
  update: ForumUpdateWithoutUserDataInput!
  create: ForumCreateWithoutUserInput!
}

input ForumWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  lesson: LessonWhereInput
  user: UserWhereInput
  rating_every: RatingWhereInput
  rating_some: RatingWhereInput
  rating_none: RatingWhereInput
  statements_every: StatementWhereInput
  statements_some: StatementWhereInput
  statements_none: StatementWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ForumWhereInput!]
  OR: [ForumWhereInput!]
  NOT: [ForumWhereInput!]
}

input ForumWhereUniqueInput {
  id: ID
}

scalar Json

type LegalPortfolio {
  id: ID!
  user: User!
  cv: String
  resume: String
  open: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LegalPortfolioConnection {
  pageInfo: PageInfo!
  edges: [LegalPortfolioEdge]!
  aggregate: AggregateLegalPortfolio!
}

input LegalPortfolioCreateInput {
  id: ID
  user: UserCreateOneWithoutLegalPortfolioInput!
  cv: String
  resume: String
  open: Boolean
}

input LegalPortfolioCreateOneWithoutUserInput {
  create: LegalPortfolioCreateWithoutUserInput
  connect: LegalPortfolioWhereUniqueInput
}

input LegalPortfolioCreateWithoutUserInput {
  id: ID
  cv: String
  resume: String
  open: Boolean
}

type LegalPortfolioEdge {
  node: LegalPortfolio!
  cursor: String!
}

enum LegalPortfolioOrderByInput {
  id_ASC
  id_DESC
  cv_ASC
  cv_DESC
  resume_ASC
  resume_DESC
  open_ASC
  open_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LegalPortfolioPreviousValues {
  id: ID!
  cv: String
  resume: String
  open: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LegalPortfolioSubscriptionPayload {
  mutation: MutationType!
  node: LegalPortfolio
  updatedFields: [String!]
  previousValues: LegalPortfolioPreviousValues
}

input LegalPortfolioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LegalPortfolioWhereInput
  AND: [LegalPortfolioSubscriptionWhereInput!]
  OR: [LegalPortfolioSubscriptionWhereInput!]
  NOT: [LegalPortfolioSubscriptionWhereInput!]
}

input LegalPortfolioUpdateInput {
  user: UserUpdateOneRequiredWithoutLegalPortfolioInput
  cv: String
  resume: String
  open: Boolean
}

input LegalPortfolioUpdateManyMutationInput {
  cv: String
  resume: String
  open: Boolean
}

input LegalPortfolioUpdateOneWithoutUserInput {
  create: LegalPortfolioCreateWithoutUserInput
  update: LegalPortfolioUpdateWithoutUserDataInput
  upsert: LegalPortfolioUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: LegalPortfolioWhereUniqueInput
}

input LegalPortfolioUpdateWithoutUserDataInput {
  cv: String
  resume: String
  open: Boolean
}

input LegalPortfolioUpsertWithoutUserInput {
  update: LegalPortfolioUpdateWithoutUserDataInput!
  create: LegalPortfolioCreateWithoutUserInput!
}

input LegalPortfolioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  cv: String
  cv_not: String
  cv_in: [String!]
  cv_not_in: [String!]
  cv_lt: String
  cv_lte: String
  cv_gt: String
  cv_gte: String
  cv_contains: String
  cv_not_contains: String
  cv_starts_with: String
  cv_not_starts_with: String
  cv_ends_with: String
  cv_not_ends_with: String
  resume: String
  resume_not: String
  resume_in: [String!]
  resume_not_in: [String!]
  resume_lt: String
  resume_lte: String
  resume_gt: String
  resume_gte: String
  resume_contains: String
  resume_not_contains: String
  resume_starts_with: String
  resume_not_starts_with: String
  resume_ends_with: String
  resume_not_ends_with: String
  open: Boolean
  open_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LegalPortfolioWhereInput!]
  OR: [LegalPortfolioWhereInput!]
  NOT: [LegalPortfolioWhereInput!]
}

input LegalPortfolioWhereUniqueInput {
  id: ID
}

type Lesson {
  id: ID!
  name: String!
  number: Int
  text: String!
  user: User!
  type: Type
  map: [Json!]!
  structure: Json
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  shots(where: ShotWhereInput, orderBy: ShotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shot!]
  shotResults(where: ShotResultWhereInput, orderBy: ShotResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShotResult!]
  coursePage: CoursePage!
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest!]
  quizes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  texteditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult!]
  challengeResults(where: ChallengeResultWhereInput, orderBy: ChallengeResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeResult!]
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult!]
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult!]
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult!]
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  lessonFeedback(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  forum: Forum
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
  documentResults(where: DocumentResultWhereInput, orderBy: DocumentResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentResult!]
  change: String
  challenge_num: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreatemapInput {
  set: [Json!]
}

input LessonCreateOneWithoutChallengeResultsInput {
  create: LessonCreateWithoutChallengeResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutConstructionResultsInput {
  create: LessonCreateWithoutConstructionResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutDocumentResultsInput {
  create: LessonCreateWithoutDocumentResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutDocumentsInput {
  create: LessonCreateWithoutDocumentsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutForumInput {
  create: LessonCreateWithoutForumInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutLessonFeedbackInput {
  create: LessonCreateWithoutLessonFeedbackInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutLessonResultsInput {
  create: LessonCreateWithoutLessonResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutNewTestsInput {
  create: LessonCreateWithoutNewTestsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutNotesInput {
  create: LessonCreateWithoutNotesInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutProblemResultsInput {
  create: LessonCreateWithoutProblemResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutQuizesInput {
  create: LessonCreateWithoutQuizesInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutQuizResultsInput {
  create: LessonCreateWithoutQuizResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutShotResultsInput {
  create: LessonCreateWithoutShotResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutShotsInput {
  create: LessonCreateWithoutShotsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTestResultsInput {
  create: LessonCreateWithoutTestResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTextEditorResultsInput {
  create: LessonCreateWithoutTextEditorResultsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutChallengeResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutConstructionResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutConstructionsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutCoursePageInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutDocumentResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutDocumentsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutForumInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutLessonFeedbackInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutLessonResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutNewTestsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutNotesInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutProblemResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutProblemsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutQuizesInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutQuizResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutShotResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutShotsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutTestResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutTextEditorResultsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutTexteditorsInput {
  id: ID
  name: String!
  number: Int
  text: String!
  user: UserCreateOneWithoutLessonsInput!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonCreateWithoutUserInput {
  id: ID
  name: String!
  number: Int
  text: String!
  type: Type
  map: LessonCreatemapInput
  structure: Json
  notes: NoteCreateManyWithoutLessonInput
  shots: ShotCreateManyWithoutLessonInput
  shotResults: ShotResultCreateManyWithoutLessonInput
  coursePage: CoursePageCreateOneWithoutLessonsInput!
  newTests: NewTestCreateManyWithoutLessonInput
  quizes: QuizCreateManyWithoutLessonInput
  problems: ProblemCreateManyWithoutLessonInput
  constructions: ConstructionCreateManyWithoutLessonInput
  texteditors: TextEditorCreateManyWithoutLessonInput
  lessonResults: LessonResultCreateManyWithoutLessonInput
  challengeResults: ChallengeResultCreateManyWithoutLessonInput
  testResults: TestResultCreateManyWithoutLessonInput
  quizResults: QuizResultCreateManyWithoutLessonInput
  textEditorResults: TextEditorResultCreateManyWithoutLessonInput
  problemResults: ProblemResultCreateManyWithoutLessonInput
  constructionResults: ConstructionResultCreateManyWithoutLessonInput
  lessonFeedback: FeedbackCreateManyWithoutLessonInput
  forum: ForumCreateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  documents: DocumentCreateManyWithoutLessonInput
  documentResults: DocumentResultCreateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

type LessonEdge {
  node: Lesson!
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  number_ASC
  number_DESC
  text_ASC
  text_DESC
  type_ASC
  type_DESC
  structure_ASC
  structure_DESC
  open_ASC
  open_DESC
  coursePageID_ASC
  coursePageID_DESC
  published_ASC
  published_DESC
  description_ASC
  description_DESC
  change_ASC
  change_DESC
  challenge_num_ASC
  challenge_num_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LessonPreviousValues {
  id: ID!
  name: String!
  number: Int
  text: String!
  type: Type
  map: [Json!]!
  structure: Json
  open: Boolean
  coursePageID: ID!
  published: Boolean
  description: String
  change: String
  challenge_num: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonResult {
  id: ID!
  student: User!
  visitsNumber: Int
  lesson: Lesson!
  progress: Int
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LessonResultConnection {
  pageInfo: PageInfo!
  edges: [LessonResultEdge]!
  aggregate: AggregateLessonResult!
}

input LessonResultCreateInput {
  id: ID
  student: UserCreateOneWithoutLessonResultsInput!
  visitsNumber: Int
  lesson: LessonCreateOneWithoutLessonResultsInput!
  progress: Int
  lessonID: ID
}

input LessonResultCreateManyWithoutLessonInput {
  create: [LessonResultCreateWithoutLessonInput!]
  connect: [LessonResultWhereUniqueInput!]
}

input LessonResultCreateManyWithoutStudentInput {
  create: [LessonResultCreateWithoutStudentInput!]
  connect: [LessonResultWhereUniqueInput!]
}

input LessonResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutLessonResultsInput!
  visitsNumber: Int
  progress: Int
  lessonID: ID
}

input LessonResultCreateWithoutStudentInput {
  id: ID
  visitsNumber: Int
  lesson: LessonCreateOneWithoutLessonResultsInput!
  progress: Int
  lessonID: ID
}

type LessonResultEdge {
  node: LessonResult!
  cursor: String!
}

enum LessonResultOrderByInput {
  id_ASC
  id_DESC
  visitsNumber_ASC
  visitsNumber_DESC
  progress_ASC
  progress_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LessonResultPreviousValues {
  id: ID!
  visitsNumber: Int
  progress: Int
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LessonResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  progress: Int
  progress_not: Int
  progress_in: [Int!]
  progress_not_in: [Int!]
  progress_lt: Int
  progress_lte: Int
  progress_gt: Int
  progress_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonResultScalarWhereInput!]
  OR: [LessonResultScalarWhereInput!]
  NOT: [LessonResultScalarWhereInput!]
}

type LessonResultSubscriptionPayload {
  mutation: MutationType!
  node: LessonResult
  updatedFields: [String!]
  previousValues: LessonResultPreviousValues
}

input LessonResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonResultWhereInput
  AND: [LessonResultSubscriptionWhereInput!]
  OR: [LessonResultSubscriptionWhereInput!]
  NOT: [LessonResultSubscriptionWhereInput!]
}

input LessonResultUpdateInput {
  student: UserUpdateOneRequiredWithoutLessonResultsInput
  visitsNumber: Int
  lesson: LessonUpdateOneRequiredWithoutLessonResultsInput
  progress: Int
  lessonID: ID
}

input LessonResultUpdateManyDataInput {
  visitsNumber: Int
  progress: Int
  lessonID: ID
}

input LessonResultUpdateManyMutationInput {
  visitsNumber: Int
  progress: Int
  lessonID: ID
}

input LessonResultUpdateManyWithoutLessonInput {
  create: [LessonResultCreateWithoutLessonInput!]
  delete: [LessonResultWhereUniqueInput!]
  connect: [LessonResultWhereUniqueInput!]
  set: [LessonResultWhereUniqueInput!]
  disconnect: [LessonResultWhereUniqueInput!]
  update: [LessonResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [LessonResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [LessonResultScalarWhereInput!]
  updateMany: [LessonResultUpdateManyWithWhereNestedInput!]
}

input LessonResultUpdateManyWithoutStudentInput {
  create: [LessonResultCreateWithoutStudentInput!]
  delete: [LessonResultWhereUniqueInput!]
  connect: [LessonResultWhereUniqueInput!]
  set: [LessonResultWhereUniqueInput!]
  disconnect: [LessonResultWhereUniqueInput!]
  update: [LessonResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [LessonResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [LessonResultScalarWhereInput!]
  updateMany: [LessonResultUpdateManyWithWhereNestedInput!]
}

input LessonResultUpdateManyWithWhereNestedInput {
  where: LessonResultScalarWhereInput!
  data: LessonResultUpdateManyDataInput!
}

input LessonResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutLessonResultsInput
  visitsNumber: Int
  progress: Int
  lessonID: ID
}

input LessonResultUpdateWithoutStudentDataInput {
  visitsNumber: Int
  lesson: LessonUpdateOneRequiredWithoutLessonResultsInput
  progress: Int
  lessonID: ID
}

input LessonResultUpdateWithWhereUniqueWithoutLessonInput {
  where: LessonResultWhereUniqueInput!
  data: LessonResultUpdateWithoutLessonDataInput!
}

input LessonResultUpdateWithWhereUniqueWithoutStudentInput {
  where: LessonResultWhereUniqueInput!
  data: LessonResultUpdateWithoutStudentDataInput!
}

input LessonResultUpsertWithWhereUniqueWithoutLessonInput {
  where: LessonResultWhereUniqueInput!
  update: LessonResultUpdateWithoutLessonDataInput!
  create: LessonResultCreateWithoutLessonInput!
}

input LessonResultUpsertWithWhereUniqueWithoutStudentInput {
  where: LessonResultWhereUniqueInput!
  update: LessonResultUpdateWithoutStudentDataInput!
  create: LessonResultCreateWithoutStudentInput!
}

input LessonResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  visitsNumber: Int
  visitsNumber_not: Int
  visitsNumber_in: [Int!]
  visitsNumber_not_in: [Int!]
  visitsNumber_lt: Int
  visitsNumber_lte: Int
  visitsNumber_gt: Int
  visitsNumber_gte: Int
  lesson: LessonWhereInput
  progress: Int
  progress_not: Int
  progress_in: [Int!]
  progress_not_in: [Int!]
  progress_lt: Int
  progress_lte: Int
  progress_gt: Int
  progress_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonResultWhereInput!]
  OR: [LessonResultWhereInput!]
  NOT: [LessonResultWhereInput!]
}

input LessonResultWhereUniqueInput {
  id: ID
}

input LessonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  type: Type
  type_not: Type
  type_in: [Type!]
  type_not_in: [Type!]
  open: Boolean
  open_not: Boolean
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  change: String
  change_not: String
  change_in: [String!]
  change_not_in: [String!]
  change_lt: String
  change_lte: String
  change_gt: String
  change_gte: String
  change_contains: String
  change_not_contains: String
  change_starts_with: String
  change_not_starts_with: String
  change_ends_with: String
  change_not_ends_with: String
  challenge_num: Int
  challenge_num_not: Int
  challenge_num_in: [Int!]
  challenge_num_not_in: [Int!]
  challenge_num_lt: Int
  challenge_num_lte: Int
  challenge_num_gt: Int
  challenge_num_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  NOT: [LessonScalarWhereInput!]
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
  AND: [LessonSubscriptionWhereInput!]
  OR: [LessonSubscriptionWhereInput!]
  NOT: [LessonSubscriptionWhereInput!]
}

input LessonUpdateInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateManyDataInput {
  name: String
  number: Int
  text: String
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  change: String
  challenge_num: Int
}

input LessonUpdateManyMutationInput {
  name: String
  number: Int
  text: String
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  change: String
  challenge_num: Int
}

input LessonUpdateManyWithoutCoursePageInput {
  create: [LessonCreateWithoutCoursePageInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [LessonScalarWhereInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
}

input LessonUpdateManyWithoutUserInput {
  create: [LessonCreateWithoutUserInput!]
  delete: [LessonWhereUniqueInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LessonScalarWhereInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput!
  data: LessonUpdateManyDataInput!
}

input LessonUpdatemapInput {
  set: [Json!]
}

input LessonUpdateOneRequiredWithoutChallengeResultsInput {
  create: LessonCreateWithoutChallengeResultsInput
  update: LessonUpdateWithoutChallengeResultsDataInput
  upsert: LessonUpsertWithoutChallengeResultsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutConstructionsInput {
  create: LessonCreateWithoutConstructionsInput
  update: LessonUpdateWithoutConstructionsDataInput
  upsert: LessonUpsertWithoutConstructionsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutDocumentsInput {
  create: LessonCreateWithoutDocumentsInput
  update: LessonUpdateWithoutDocumentsDataInput
  upsert: LessonUpsertWithoutDocumentsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutLessonResultsInput {
  create: LessonCreateWithoutLessonResultsInput
  update: LessonUpdateWithoutLessonResultsDataInput
  upsert: LessonUpsertWithoutLessonResultsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutProblemsInput {
  create: LessonCreateWithoutProblemsInput
  update: LessonUpdateWithoutProblemsDataInput
  upsert: LessonUpsertWithoutProblemsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneRequiredWithoutTexteditorsInput {
  create: LessonCreateWithoutTexteditorsInput
  update: LessonUpdateWithoutTexteditorsDataInput
  upsert: LessonUpsertWithoutTexteditorsInput
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutConstructionResultsInput {
  create: LessonCreateWithoutConstructionResultsInput
  update: LessonUpdateWithoutConstructionResultsDataInput
  upsert: LessonUpsertWithoutConstructionResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutDocumentResultsInput {
  create: LessonCreateWithoutDocumentResultsInput
  update: LessonUpdateWithoutDocumentResultsDataInput
  upsert: LessonUpsertWithoutDocumentResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutForumInput {
  create: LessonCreateWithoutForumInput
  update: LessonUpdateWithoutForumDataInput
  upsert: LessonUpsertWithoutForumInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutLessonFeedbackInput {
  create: LessonCreateWithoutLessonFeedbackInput
  update: LessonUpdateWithoutLessonFeedbackDataInput
  upsert: LessonUpsertWithoutLessonFeedbackInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutNewTestsInput {
  create: LessonCreateWithoutNewTestsInput
  update: LessonUpdateWithoutNewTestsDataInput
  upsert: LessonUpsertWithoutNewTestsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutNotesInput {
  create: LessonCreateWithoutNotesInput
  update: LessonUpdateWithoutNotesDataInput
  upsert: LessonUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutProblemResultsInput {
  create: LessonCreateWithoutProblemResultsInput
  update: LessonUpdateWithoutProblemResultsDataInput
  upsert: LessonUpsertWithoutProblemResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutQuizesInput {
  create: LessonCreateWithoutQuizesInput
  update: LessonUpdateWithoutQuizesDataInput
  upsert: LessonUpsertWithoutQuizesInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutQuizResultsInput {
  create: LessonCreateWithoutQuizResultsInput
  update: LessonUpdateWithoutQuizResultsDataInput
  upsert: LessonUpsertWithoutQuizResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutShotResultsInput {
  create: LessonCreateWithoutShotResultsInput
  update: LessonUpdateWithoutShotResultsDataInput
  upsert: LessonUpsertWithoutShotResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutShotsInput {
  create: LessonCreateWithoutShotsInput
  update: LessonUpdateWithoutShotsDataInput
  upsert: LessonUpsertWithoutShotsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutTestResultsInput {
  create: LessonCreateWithoutTestResultsInput
  update: LessonUpdateWithoutTestResultsDataInput
  upsert: LessonUpsertWithoutTestResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateOneWithoutTextEditorResultsInput {
  create: LessonCreateWithoutTextEditorResultsInput
  update: LessonUpdateWithoutTextEditorResultsDataInput
  upsert: LessonUpsertWithoutTextEditorResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: LessonWhereUniqueInput
}

input LessonUpdateWithoutChallengeResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutConstructionResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutConstructionsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutCoursePageDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutDocumentResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutDocumentsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutForumDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutLessonFeedbackDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutLessonResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutNewTestsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutNotesDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutProblemResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutProblemsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutQuizesDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutQuizResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutShotResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutShotsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutTestResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutTextEditorResultsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutTexteditorsDataInput {
  name: String
  number: Int
  text: String
  user: UserUpdateOneRequiredWithoutLessonsInput
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithoutUserDataInput {
  name: String
  number: Int
  text: String
  type: Type
  map: LessonUpdatemapInput
  structure: Json
  notes: NoteUpdateManyWithoutLessonInput
  shots: ShotUpdateManyWithoutLessonInput
  shotResults: ShotResultUpdateManyWithoutLessonInput
  coursePage: CoursePageUpdateOneRequiredWithoutLessonsInput
  newTests: NewTestUpdateManyWithoutLessonInput
  quizes: QuizUpdateManyWithoutLessonInput
  problems: ProblemUpdateManyWithoutLessonInput
  constructions: ConstructionUpdateManyWithoutLessonInput
  texteditors: TextEditorUpdateManyWithoutLessonInput
  lessonResults: LessonResultUpdateManyWithoutLessonInput
  challengeResults: ChallengeResultUpdateManyWithoutLessonInput
  testResults: TestResultUpdateManyWithoutLessonInput
  quizResults: QuizResultUpdateManyWithoutLessonInput
  textEditorResults: TextEditorResultUpdateManyWithoutLessonInput
  problemResults: ProblemResultUpdateManyWithoutLessonInput
  constructionResults: ConstructionResultUpdateManyWithoutLessonInput
  lessonFeedback: FeedbackUpdateManyWithoutLessonInput
  forum: ForumUpdateOneWithoutLessonInput
  open: Boolean
  coursePageID: ID
  published: Boolean
  description: String
  documents: DocumentUpdateManyWithoutLessonInput
  documentResults: DocumentResultUpdateManyWithoutLessonInput
  change: String
  challenge_num: Int
}

input LessonUpdateWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutCoursePageDataInput!
}

input LessonUpdateWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutUserDataInput!
}

input LessonUpsertWithoutChallengeResultsInput {
  update: LessonUpdateWithoutChallengeResultsDataInput!
  create: LessonCreateWithoutChallengeResultsInput!
}

input LessonUpsertWithoutConstructionResultsInput {
  update: LessonUpdateWithoutConstructionResultsDataInput!
  create: LessonCreateWithoutConstructionResultsInput!
}

input LessonUpsertWithoutConstructionsInput {
  update: LessonUpdateWithoutConstructionsDataInput!
  create: LessonCreateWithoutConstructionsInput!
}

input LessonUpsertWithoutDocumentResultsInput {
  update: LessonUpdateWithoutDocumentResultsDataInput!
  create: LessonCreateWithoutDocumentResultsInput!
}

input LessonUpsertWithoutDocumentsInput {
  update: LessonUpdateWithoutDocumentsDataInput!
  create: LessonCreateWithoutDocumentsInput!
}

input LessonUpsertWithoutForumInput {
  update: LessonUpdateWithoutForumDataInput!
  create: LessonCreateWithoutForumInput!
}

input LessonUpsertWithoutLessonFeedbackInput {
  update: LessonUpdateWithoutLessonFeedbackDataInput!
  create: LessonCreateWithoutLessonFeedbackInput!
}

input LessonUpsertWithoutLessonResultsInput {
  update: LessonUpdateWithoutLessonResultsDataInput!
  create: LessonCreateWithoutLessonResultsInput!
}

input LessonUpsertWithoutNewTestsInput {
  update: LessonUpdateWithoutNewTestsDataInput!
  create: LessonCreateWithoutNewTestsInput!
}

input LessonUpsertWithoutNotesInput {
  update: LessonUpdateWithoutNotesDataInput!
  create: LessonCreateWithoutNotesInput!
}

input LessonUpsertWithoutProblemResultsInput {
  update: LessonUpdateWithoutProblemResultsDataInput!
  create: LessonCreateWithoutProblemResultsInput!
}

input LessonUpsertWithoutProblemsInput {
  update: LessonUpdateWithoutProblemsDataInput!
  create: LessonCreateWithoutProblemsInput!
}

input LessonUpsertWithoutQuizesInput {
  update: LessonUpdateWithoutQuizesDataInput!
  create: LessonCreateWithoutQuizesInput!
}

input LessonUpsertWithoutQuizResultsInput {
  update: LessonUpdateWithoutQuizResultsDataInput!
  create: LessonCreateWithoutQuizResultsInput!
}

input LessonUpsertWithoutShotResultsInput {
  update: LessonUpdateWithoutShotResultsDataInput!
  create: LessonCreateWithoutShotResultsInput!
}

input LessonUpsertWithoutShotsInput {
  update: LessonUpdateWithoutShotsDataInput!
  create: LessonCreateWithoutShotsInput!
}

input LessonUpsertWithoutTestResultsInput {
  update: LessonUpdateWithoutTestResultsDataInput!
  create: LessonCreateWithoutTestResultsInput!
}

input LessonUpsertWithoutTextEditorResultsInput {
  update: LessonUpdateWithoutTextEditorResultsDataInput!
  create: LessonCreateWithoutTextEditorResultsInput!
}

input LessonUpsertWithoutTexteditorsInput {
  update: LessonUpdateWithoutTexteditorsDataInput!
  create: LessonCreateWithoutTexteditorsInput!
}

input LessonUpsertWithWhereUniqueWithoutCoursePageInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutCoursePageDataInput!
  create: LessonCreateWithoutCoursePageInput!
}

input LessonUpsertWithWhereUniqueWithoutUserInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutUserDataInput!
  create: LessonCreateWithoutUserInput!
}

input LessonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  type: Type
  type_not: Type
  type_in: [Type!]
  type_not_in: [Type!]
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  shots_every: ShotWhereInput
  shots_some: ShotWhereInput
  shots_none: ShotWhereInput
  shotResults_every: ShotResultWhereInput
  shotResults_some: ShotResultWhereInput
  shotResults_none: ShotResultWhereInput
  coursePage: CoursePageWhereInput
  newTests_every: NewTestWhereInput
  newTests_some: NewTestWhereInput
  newTests_none: NewTestWhereInput
  quizes_every: QuizWhereInput
  quizes_some: QuizWhereInput
  quizes_none: QuizWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  constructions_every: ConstructionWhereInput
  constructions_some: ConstructionWhereInput
  constructions_none: ConstructionWhereInput
  texteditors_every: TextEditorWhereInput
  texteditors_some: TextEditorWhereInput
  texteditors_none: TextEditorWhereInput
  lessonResults_every: LessonResultWhereInput
  lessonResults_some: LessonResultWhereInput
  lessonResults_none: LessonResultWhereInput
  challengeResults_every: ChallengeResultWhereInput
  challengeResults_some: ChallengeResultWhereInput
  challengeResults_none: ChallengeResultWhereInput
  testResults_every: TestResultWhereInput
  testResults_some: TestResultWhereInput
  testResults_none: TestResultWhereInput
  quizResults_every: QuizResultWhereInput
  quizResults_some: QuizResultWhereInput
  quizResults_none: QuizResultWhereInput
  textEditorResults_every: TextEditorResultWhereInput
  textEditorResults_some: TextEditorResultWhereInput
  textEditorResults_none: TextEditorResultWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  lessonFeedback_every: FeedbackWhereInput
  lessonFeedback_some: FeedbackWhereInput
  lessonFeedback_none: FeedbackWhereInput
  forum: ForumWhereInput
  open: Boolean
  open_not: Boolean
  coursePageID: ID
  coursePageID_not: ID
  coursePageID_in: [ID!]
  coursePageID_not_in: [ID!]
  coursePageID_lt: ID
  coursePageID_lte: ID
  coursePageID_gt: ID
  coursePageID_gte: ID
  coursePageID_contains: ID
  coursePageID_not_contains: ID
  coursePageID_starts_with: ID
  coursePageID_not_starts_with: ID
  coursePageID_ends_with: ID
  coursePageID_not_ends_with: ID
  published: Boolean
  published_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
  documentResults_every: DocumentResultWhereInput
  documentResults_some: DocumentResultWhereInput
  documentResults_none: DocumentResultWhereInput
  change: String
  change_not: String
  change_in: [String!]
  change_not_in: [String!]
  change_lt: String
  change_lte: String
  change_gt: String
  change_gte: String
  change_contains: String
  change_not_contains: String
  change_starts_with: String
  change_not_starts_with: String
  change_ends_with: String
  change_not_ends_with: String
  challenge_num: Int
  challenge_num_not: Int
  challenge_num_in: [Int!]
  challenge_num_not_in: [Int!]
  challenge_num_lt: Int
  challenge_num_lte: Int
  challenge_num_gt: Int
  challenge_num_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
}

input LessonWhereUniqueInput {
  id: ID
}

enum Level {
  STANDARD
  ADVANCED
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createCareerTrack(data: CareerTrackCreateInput!): CareerTrack!
  updateCareerTrack(data: CareerTrackUpdateInput!, where: CareerTrackWhereUniqueInput!): CareerTrack
  updateManyCareerTracks(data: CareerTrackUpdateManyMutationInput!, where: CareerTrackWhereInput): BatchPayload!
  upsertCareerTrack(where: CareerTrackWhereUniqueInput!, create: CareerTrackCreateInput!, update: CareerTrackUpdateInput!): CareerTrack!
  deleteCareerTrack(where: CareerTrackWhereUniqueInput!): CareerTrack
  deleteManyCareerTracks(where: CareerTrackWhereInput): BatchPayload!
  createCareerTrackUnit(data: CareerTrackUnitCreateInput!): CareerTrackUnit!
  updateCareerTrackUnit(data: CareerTrackUnitUpdateInput!, where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  updateManyCareerTrackUnits(data: CareerTrackUnitUpdateManyMutationInput!, where: CareerTrackUnitWhereInput): BatchPayload!
  upsertCareerTrackUnit(where: CareerTrackUnitWhereUniqueInput!, create: CareerTrackUnitCreateInput!, update: CareerTrackUnitUpdateInput!): CareerTrackUnit!
  deleteCareerTrackUnit(where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  deleteManyCareerTrackUnits(where: CareerTrackUnitWhereInput): BatchPayload!
  createChallengeResult(data: ChallengeResultCreateInput!): ChallengeResult!
  updateChallengeResult(data: ChallengeResultUpdateInput!, where: ChallengeResultWhereUniqueInput!): ChallengeResult
  updateManyChallengeResults(data: ChallengeResultUpdateManyMutationInput!, where: ChallengeResultWhereInput): BatchPayload!
  upsertChallengeResult(where: ChallengeResultWhereUniqueInput!, create: ChallengeResultCreateInput!, update: ChallengeResultUpdateInput!): ChallengeResult!
  deleteChallengeResult(where: ChallengeResultWhereUniqueInput!): ChallengeResult
  deleteManyChallengeResults(where: ChallengeResultWhereInput): BatchPayload!
  createClause(data: ClauseCreateInput!): Clause!
  updateClause(data: ClauseUpdateInput!, where: ClauseWhereUniqueInput!): Clause
  updateManyClauses(data: ClauseUpdateManyMutationInput!, where: ClauseWhereInput): BatchPayload!
  upsertClause(where: ClauseWhereUniqueInput!, create: ClauseCreateInput!, update: ClauseUpdateInput!): Clause!
  deleteClause(where: ClauseWhereUniqueInput!): Clause
  deleteManyClauses(where: ClauseWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createConstruction(data: ConstructionCreateInput!): Construction!
  updateConstruction(data: ConstructionUpdateInput!, where: ConstructionWhereUniqueInput!): Construction
  updateManyConstructions(data: ConstructionUpdateManyMutationInput!, where: ConstructionWhereInput): BatchPayload!
  upsertConstruction(where: ConstructionWhereUniqueInput!, create: ConstructionCreateInput!, update: ConstructionUpdateInput!): Construction!
  deleteConstruction(where: ConstructionWhereUniqueInput!): Construction
  deleteManyConstructions(where: ConstructionWhereInput): BatchPayload!
  createConstructionResult(data: ConstructionResultCreateInput!): ConstructionResult!
  updateConstructionResult(data: ConstructionResultUpdateInput!, where: ConstructionResultWhereUniqueInput!): ConstructionResult
  updateManyConstructionResults(data: ConstructionResultUpdateManyMutationInput!, where: ConstructionResultWhereInput): BatchPayload!
  upsertConstructionResult(where: ConstructionResultWhereUniqueInput!, create: ConstructionResultCreateInput!, update: ConstructionResultUpdateInput!): ConstructionResult!
  deleteConstructionResult(where: ConstructionResultWhereUniqueInput!): ConstructionResult
  deleteManyConstructionResults(where: ConstructionResultWhereInput): BatchPayload!
  createCoursePage(data: CoursePageCreateInput!): CoursePage!
  updateCoursePage(data: CoursePageUpdateInput!, where: CoursePageWhereUniqueInput!): CoursePage
  updateManyCoursePages(data: CoursePageUpdateManyMutationInput!, where: CoursePageWhereInput): BatchPayload!
  upsertCoursePage(where: CoursePageWhereUniqueInput!, create: CoursePageCreateInput!, update: CoursePageUpdateInput!): CoursePage!
  deleteCoursePage(where: CoursePageWhereUniqueInput!): CoursePage
  deleteManyCoursePages(where: CoursePageWhereInput): BatchPayload!
  createCourseVisit(data: CourseVisitCreateInput!): CourseVisit!
  updateCourseVisit(data: CourseVisitUpdateInput!, where: CourseVisitWhereUniqueInput!): CourseVisit
  updateManyCourseVisits(data: CourseVisitUpdateManyMutationInput!, where: CourseVisitWhereInput): BatchPayload!
  upsertCourseVisit(where: CourseVisitWhereUniqueInput!, create: CourseVisitCreateInput!, update: CourseVisitUpdateInput!): CourseVisit!
  deleteCourseVisit(where: CourseVisitWhereUniqueInput!): CourseVisit
  deleteManyCourseVisits(where: CourseVisitWhereInput): BatchPayload!
  createDocument(data: DocumentCreateInput!): Document!
  updateDocument(data: DocumentUpdateInput!, where: DocumentWhereUniqueInput!): Document
  updateManyDocuments(data: DocumentUpdateManyMutationInput!, where: DocumentWhereInput): BatchPayload!
  upsertDocument(where: DocumentWhereUniqueInput!, create: DocumentCreateInput!, update: DocumentUpdateInput!): Document!
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteManyDocuments(where: DocumentWhereInput): BatchPayload!
  createDocumentResult(data: DocumentResultCreateInput!): DocumentResult!
  updateDocumentResult(data: DocumentResultUpdateInput!, where: DocumentResultWhereUniqueInput!): DocumentResult
  updateManyDocumentResults(data: DocumentResultUpdateManyMutationInput!, where: DocumentResultWhereInput): BatchPayload!
  upsertDocumentResult(where: DocumentResultWhereUniqueInput!, create: DocumentResultCreateInput!, update: DocumentResultUpdateInput!): DocumentResult!
  deleteDocumentResult(where: DocumentResultWhereUniqueInput!): DocumentResult
  deleteManyDocumentResults(where: DocumentResultWhereInput): BatchPayload!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  updateFeedback(data: FeedbackUpdateInput!, where: FeedbackWhereUniqueInput!): Feedback
  updateManyFeedbacks(data: FeedbackUpdateManyMutationInput!, where: FeedbackWhereInput): BatchPayload!
  upsertFeedback(where: FeedbackWhereUniqueInput!, create: FeedbackCreateInput!, update: FeedbackUpdateInput!): Feedback!
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  deleteManyFeedbacks(where: FeedbackWhereInput): BatchPayload!
  createForum(data: ForumCreateInput!): Forum!
  updateForum(data: ForumUpdateInput!, where: ForumWhereUniqueInput!): Forum
  updateManyForums(data: ForumUpdateManyMutationInput!, where: ForumWhereInput): BatchPayload!
  upsertForum(where: ForumWhereUniqueInput!, create: ForumCreateInput!, update: ForumUpdateInput!): Forum!
  deleteForum(where: ForumWhereUniqueInput!): Forum
  deleteManyForums(where: ForumWhereInput): BatchPayload!
  createLegalPortfolio(data: LegalPortfolioCreateInput!): LegalPortfolio!
  updateLegalPortfolio(data: LegalPortfolioUpdateInput!, where: LegalPortfolioWhereUniqueInput!): LegalPortfolio
  updateManyLegalPortfolios(data: LegalPortfolioUpdateManyMutationInput!, where: LegalPortfolioWhereInput): BatchPayload!
  upsertLegalPortfolio(where: LegalPortfolioWhereUniqueInput!, create: LegalPortfolioCreateInput!, update: LegalPortfolioUpdateInput!): LegalPortfolio!
  deleteLegalPortfolio(where: LegalPortfolioWhereUniqueInput!): LegalPortfolio
  deleteManyLegalPortfolios(where: LegalPortfolioWhereInput): BatchPayload!
  createLesson(data: LessonCreateInput!): Lesson!
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateManyLessons(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): BatchPayload!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  createLessonResult(data: LessonResultCreateInput!): LessonResult!
  updateLessonResult(data: LessonResultUpdateInput!, where: LessonResultWhereUniqueInput!): LessonResult
  updateManyLessonResults(data: LessonResultUpdateManyMutationInput!, where: LessonResultWhereInput): BatchPayload!
  upsertLessonResult(where: LessonResultWhereUniqueInput!, create: LessonResultCreateInput!, update: LessonResultUpdateInput!): LessonResult!
  deleteLessonResult(where: LessonResultWhereUniqueInput!): LessonResult
  deleteManyLessonResults(where: LessonResultWhereInput): BatchPayload!
  createNewTest(data: NewTestCreateInput!): NewTest!
  updateNewTest(data: NewTestUpdateInput!, where: NewTestWhereUniqueInput!): NewTest
  updateManyNewTests(data: NewTestUpdateManyMutationInput!, where: NewTestWhereInput): BatchPayload!
  upsertNewTest(where: NewTestWhereUniqueInput!, create: NewTestCreateInput!, update: NewTestUpdateInput!): NewTest!
  deleteNewTest(where: NewTestWhereUniqueInput!): NewTest
  deleteManyNewTests(where: NewTestWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createProblem(data: ProblemCreateInput!): Problem!
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateManyProblems(data: ProblemUpdateManyMutationInput!, where: ProblemWhereInput): BatchPayload!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  createProblemResult(data: ProblemResultCreateInput!): ProblemResult!
  updateProblemResult(data: ProblemResultUpdateInput!, where: ProblemResultWhereUniqueInput!): ProblemResult
  updateManyProblemResults(data: ProblemResultUpdateManyMutationInput!, where: ProblemResultWhereInput): BatchPayload!
  upsertProblemResult(where: ProblemResultWhereUniqueInput!, create: ProblemResultCreateInput!, update: ProblemResultUpdateInput!): ProblemResult!
  deleteProblemResult(where: ProblemResultWhereUniqueInput!): ProblemResult
  deleteManyProblemResults(where: ProblemResultWhereInput): BatchPayload!
  createQuiz(data: QuizCreateInput!): Quiz!
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateManyQuizzes(data: QuizUpdateManyMutationInput!, where: QuizWhereInput): BatchPayload!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  createQuizResult(data: QuizResultCreateInput!): QuizResult!
  updateQuizResult(data: QuizResultUpdateInput!, where: QuizResultWhereUniqueInput!): QuizResult
  updateManyQuizResults(data: QuizResultUpdateManyMutationInput!, where: QuizResultWhereInput): BatchPayload!
  upsertQuizResult(where: QuizResultWhereUniqueInput!, create: QuizResultCreateInput!, update: QuizResultUpdateInput!): QuizResult!
  deleteQuizResult(where: QuizResultWhereUniqueInput!): QuizResult
  deleteManyQuizResults(where: QuizResultWhereInput): BatchPayload!
  createRating(data: RatingCreateInput!): Rating!
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateManyRatings(data: RatingUpdateManyMutationInput!, where: RatingWhereInput): BatchPayload!
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteManyRatings(where: RatingWhereInput): BatchPayload!
  createShot(data: ShotCreateInput!): Shot!
  updateShot(data: ShotUpdateInput!, where: ShotWhereUniqueInput!): Shot
  updateManyShots(data: ShotUpdateManyMutationInput!, where: ShotWhereInput): BatchPayload!
  upsertShot(where: ShotWhereUniqueInput!, create: ShotCreateInput!, update: ShotUpdateInput!): Shot!
  deleteShot(where: ShotWhereUniqueInput!): Shot
  deleteManyShots(where: ShotWhereInput): BatchPayload!
  createShotResult(data: ShotResultCreateInput!): ShotResult!
  updateShotResult(data: ShotResultUpdateInput!, where: ShotResultWhereUniqueInput!): ShotResult
  updateManyShotResults(data: ShotResultUpdateManyMutationInput!, where: ShotResultWhereInput): BatchPayload!
  upsertShotResult(where: ShotResultWhereUniqueInput!, create: ShotResultCreateInput!, update: ShotResultUpdateInput!): ShotResult!
  deleteShotResult(where: ShotResultWhereUniqueInput!): ShotResult
  deleteManyShotResults(where: ShotResultWhereInput): BatchPayload!
  createStatement(data: StatementCreateInput!): Statement!
  updateStatement(data: StatementUpdateInput!, where: StatementWhereUniqueInput!): Statement
  updateManyStatements(data: StatementUpdateManyMutationInput!, where: StatementWhereInput): BatchPayload!
  upsertStatement(where: StatementWhereUniqueInput!, create: StatementCreateInput!, update: StatementUpdateInput!): Statement!
  deleteStatement(where: StatementWhereUniqueInput!): Statement
  deleteManyStatements(where: StatementWhereInput): BatchPayload!
  createTestResult(data: TestResultCreateInput!): TestResult!
  updateTestResult(data: TestResultUpdateInput!, where: TestResultWhereUniqueInput!): TestResult
  updateManyTestResults(data: TestResultUpdateManyMutationInput!, where: TestResultWhereInput): BatchPayload!
  upsertTestResult(where: TestResultWhereUniqueInput!, create: TestResultCreateInput!, update: TestResultUpdateInput!): TestResult!
  deleteTestResult(where: TestResultWhereUniqueInput!): TestResult
  deleteManyTestResults(where: TestResultWhereInput): BatchPayload!
  createTextEditor(data: TextEditorCreateInput!): TextEditor!
  updateTextEditor(data: TextEditorUpdateInput!, where: TextEditorWhereUniqueInput!): TextEditor
  updateManyTextEditors(data: TextEditorUpdateManyMutationInput!, where: TextEditorWhereInput): BatchPayload!
  upsertTextEditor(where: TextEditorWhereUniqueInput!, create: TextEditorCreateInput!, update: TextEditorUpdateInput!): TextEditor!
  deleteTextEditor(where: TextEditorWhereUniqueInput!): TextEditor
  deleteManyTextEditors(where: TextEditorWhereInput): BatchPayload!
  createTextEditorResult(data: TextEditorResultCreateInput!): TextEditorResult!
  updateTextEditorResult(data: TextEditorResultUpdateInput!, where: TextEditorResultWhereUniqueInput!): TextEditorResult
  updateManyTextEditorResults(data: TextEditorResultUpdateManyMutationInput!, where: TextEditorResultWhereInput): BatchPayload!
  upsertTextEditorResult(where: TextEditorResultWhereUniqueInput!, create: TextEditorResultCreateInput!, update: TextEditorResultUpdateInput!): TextEditorResult!
  deleteTextEditorResult(where: TextEditorResultWhereUniqueInput!): TextEditorResult
  deleteManyTextEditorResults(where: TextEditorResultWhereInput): BatchPayload!
  createUni(data: UniCreateInput!): Uni!
  updateUni(data: UniUpdateInput!, where: UniWhereUniqueInput!): Uni
  updateManyUnis(data: UniUpdateManyMutationInput!, where: UniWhereInput): BatchPayload!
  upsertUni(where: UniWhereUniqueInput!, create: UniCreateInput!, update: UniUpdateInput!): Uni!
  deleteUni(where: UniWhereUniqueInput!): Uni
  deleteManyUnis(where: UniWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserLevel(data: UserLevelCreateInput!): UserLevel!
  updateUserLevel(data: UserLevelUpdateInput!, where: UserLevelWhereUniqueInput!): UserLevel
  updateManyUserLevels(data: UserLevelUpdateManyMutationInput!, where: UserLevelWhereInput): BatchPayload!
  upsertUserLevel(where: UserLevelWhereUniqueInput!, create: UserLevelCreateInput!, update: UserLevelUpdateInput!): UserLevel!
  deleteUserLevel(where: UserLevelWhereUniqueInput!): UserLevel
  deleteManyUserLevels(where: UserLevelWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NewTest {
  id: ID!
  question: [String!]!
  answers: [String!]!
  correct: [Boolean!]!
  type: TaskType
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult!]
  user: User!
  lesson: Lesson
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NewTestConnection {
  pageInfo: PageInfo!
  edges: [NewTestEdge]!
  aggregate: AggregateNewTest!
}

input NewTestCreateanswersInput {
  set: [String!]
}

input NewTestCreatecorrectInput {
  set: [Boolean!]
}

input NewTestCreateInput {
  id: ID
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  type: TaskType
  testResults: TestResultCreateManyWithoutTestInput
  user: UserCreateOneWithoutNewTestsInput!
  lesson: LessonCreateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestCreateManyWithoutLessonInput {
  create: [NewTestCreateWithoutLessonInput!]
  connect: [NewTestWhereUniqueInput!]
}

input NewTestCreateManyWithoutUserInput {
  create: [NewTestCreateWithoutUserInput!]
  connect: [NewTestWhereUniqueInput!]
}

input NewTestCreateOneWithoutTestResultsInput {
  create: NewTestCreateWithoutTestResultsInput
  connect: NewTestWhereUniqueInput
}

input NewTestCreatequestionInput {
  set: [String!]
}

input NewTestCreateWithoutLessonInput {
  id: ID
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  type: TaskType
  testResults: TestResultCreateManyWithoutTestInput
  user: UserCreateOneWithoutNewTestsInput!
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestCreateWithoutTestResultsInput {
  id: ID
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  type: TaskType
  user: UserCreateOneWithoutNewTestsInput!
  lesson: LessonCreateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestCreateWithoutUserInput {
  id: ID
  question: NewTestCreatequestionInput
  answers: NewTestCreateanswersInput
  correct: NewTestCreatecorrectInput
  type: TaskType
  testResults: TestResultCreateManyWithoutTestInput
  lesson: LessonCreateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

type NewTestEdge {
  node: NewTest!
  cursor: String!
}

enum NewTestOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  lessonID_ASC
  lessonID_DESC
  next_ASC
  next_DESC
  ifRight_ASC
  ifRight_DESC
  ifWrong_ASC
  ifWrong_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NewTestPreviousValues {
  id: ID!
  question: [String!]!
  answers: [String!]!
  correct: [Boolean!]!
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NewTestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: TaskType
  type_not: TaskType
  type_in: [TaskType!]
  type_not_in: [TaskType!]
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  ifRight: String
  ifRight_not: String
  ifRight_in: [String!]
  ifRight_not_in: [String!]
  ifRight_lt: String
  ifRight_lte: String
  ifRight_gt: String
  ifRight_gte: String
  ifRight_contains: String
  ifRight_not_contains: String
  ifRight_starts_with: String
  ifRight_not_starts_with: String
  ifRight_ends_with: String
  ifRight_not_ends_with: String
  ifWrong: String
  ifWrong_not: String
  ifWrong_in: [String!]
  ifWrong_not_in: [String!]
  ifWrong_lt: String
  ifWrong_lte: String
  ifWrong_gt: String
  ifWrong_gte: String
  ifWrong_contains: String
  ifWrong_not_contains: String
  ifWrong_starts_with: String
  ifWrong_not_starts_with: String
  ifWrong_ends_with: String
  ifWrong_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NewTestScalarWhereInput!]
  OR: [NewTestScalarWhereInput!]
  NOT: [NewTestScalarWhereInput!]
}

type NewTestSubscriptionPayload {
  mutation: MutationType!
  node: NewTest
  updatedFields: [String!]
  previousValues: NewTestPreviousValues
}

input NewTestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewTestWhereInput
  AND: [NewTestSubscriptionWhereInput!]
  OR: [NewTestSubscriptionWhereInput!]
  NOT: [NewTestSubscriptionWhereInput!]
}

input NewTestUpdateanswersInput {
  set: [String!]
}

input NewTestUpdatecorrectInput {
  set: [Boolean!]
}

input NewTestUpdateInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  testResults: TestResultUpdateManyWithoutTestInput
  user: UserUpdateOneRequiredWithoutNewTestsInput
  lesson: LessonUpdateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateManyDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateManyMutationInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateManyWithoutLessonInput {
  create: [NewTestCreateWithoutLessonInput!]
  delete: [NewTestWhereUniqueInput!]
  connect: [NewTestWhereUniqueInput!]
  set: [NewTestWhereUniqueInput!]
  disconnect: [NewTestWhereUniqueInput!]
  update: [NewTestUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [NewTestUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [NewTestScalarWhereInput!]
  updateMany: [NewTestUpdateManyWithWhereNestedInput!]
}

input NewTestUpdateManyWithoutUserInput {
  create: [NewTestCreateWithoutUserInput!]
  delete: [NewTestWhereUniqueInput!]
  connect: [NewTestWhereUniqueInput!]
  set: [NewTestWhereUniqueInput!]
  disconnect: [NewTestWhereUniqueInput!]
  update: [NewTestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NewTestUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NewTestScalarWhereInput!]
  updateMany: [NewTestUpdateManyWithWhereNestedInput!]
}

input NewTestUpdateManyWithWhereNestedInput {
  where: NewTestScalarWhereInput!
  data: NewTestUpdateManyDataInput!
}

input NewTestUpdateOneWithoutTestResultsInput {
  create: NewTestCreateWithoutTestResultsInput
  update: NewTestUpdateWithoutTestResultsDataInput
  upsert: NewTestUpsertWithoutTestResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: NewTestWhereUniqueInput
}

input NewTestUpdatequestionInput {
  set: [String!]
}

input NewTestUpdateWithoutLessonDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  testResults: TestResultUpdateManyWithoutTestInput
  user: UserUpdateOneRequiredWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateWithoutTestResultsDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  user: UserUpdateOneRequiredWithoutNewTestsInput
  lesson: LessonUpdateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateWithoutUserDataInput {
  question: NewTestUpdatequestionInput
  answers: NewTestUpdateanswersInput
  correct: NewTestUpdatecorrectInput
  type: TaskType
  testResults: TestResultUpdateManyWithoutTestInput
  lesson: LessonUpdateOneWithoutNewTestsInput
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
}

input NewTestUpdateWithWhereUniqueWithoutLessonInput {
  where: NewTestWhereUniqueInput!
  data: NewTestUpdateWithoutLessonDataInput!
}

input NewTestUpdateWithWhereUniqueWithoutUserInput {
  where: NewTestWhereUniqueInput!
  data: NewTestUpdateWithoutUserDataInput!
}

input NewTestUpsertWithoutTestResultsInput {
  update: NewTestUpdateWithoutTestResultsDataInput!
  create: NewTestCreateWithoutTestResultsInput!
}

input NewTestUpsertWithWhereUniqueWithoutLessonInput {
  where: NewTestWhereUniqueInput!
  update: NewTestUpdateWithoutLessonDataInput!
  create: NewTestCreateWithoutLessonInput!
}

input NewTestUpsertWithWhereUniqueWithoutUserInput {
  where: NewTestWhereUniqueInput!
  update: NewTestUpdateWithoutUserDataInput!
  create: NewTestCreateWithoutUserInput!
}

input NewTestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: TaskType
  type_not: TaskType
  type_in: [TaskType!]
  type_not_in: [TaskType!]
  testResults_every: TestResultWhereInput
  testResults_some: TestResultWhereInput
  testResults_none: TestResultWhereInput
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  ifRight: String
  ifRight_not: String
  ifRight_in: [String!]
  ifRight_not_in: [String!]
  ifRight_lt: String
  ifRight_lte: String
  ifRight_gt: String
  ifRight_gte: String
  ifRight_contains: String
  ifRight_not_contains: String
  ifRight_starts_with: String
  ifRight_not_starts_with: String
  ifRight_ends_with: String
  ifRight_not_ends_with: String
  ifWrong: String
  ifWrong_not: String
  ifWrong_in: [String!]
  ifWrong_not_in: [String!]
  ifWrong_lt: String
  ifWrong_lte: String
  ifWrong_gt: String
  ifWrong_gte: String
  ifWrong_contains: String
  ifWrong_not_contains: String
  ifWrong_starts_with: String
  ifWrong_not_starts_with: String
  ifWrong_ends_with: String
  ifWrong_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NewTestWhereInput!]
  OR: [NewTestWhereInput!]
  NOT: [NewTestWhereInput!]
}

input NewTestWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  text: String!
  user: User
  next: Json
  lessonID: ID
  lesson: Lesson
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutNotesInput
  next: Json
  lessonID: ID
  lesson: LessonCreateOneWithoutNotesInput
}

input NoteCreateManyWithoutLessonInput {
  create: [NoteCreateWithoutLessonInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutLessonInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutNotesInput
  next: Json
  lessonID: ID
}

input NoteCreateWithoutUserInput {
  id: ID
  text: String!
  next: Json
  lessonID: ID
  lesson: LessonCreateOneWithoutNotesInput
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  next_ASC
  next_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotePreviousValues {
  id: ID!
  text: String!
  next: Json
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
  OR: [NoteSubscriptionWhereInput!]
  NOT: [NoteSubscriptionWhereInput!]
}

input NoteUpdateInput {
  text: String
  user: UserUpdateOneWithoutNotesInput
  next: Json
  lessonID: ID
  lesson: LessonUpdateOneWithoutNotesInput
}

input NoteUpdateManyDataInput {
  text: String
  next: Json
  lessonID: ID
}

input NoteUpdateManyMutationInput {
  text: String
  next: Json
  lessonID: ID
}

input NoteUpdateManyWithoutLessonInput {
  create: [NoteCreateWithoutLessonInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutLessonDataInput {
  text: String
  user: UserUpdateOneWithoutNotesInput
  next: Json
  lessonID: ID
}

input NoteUpdateWithoutUserDataInput {
  text: String
  next: Json
  lessonID: ID
  lesson: LessonUpdateOneWithoutNotesInput
}

input NoteUpdateWithWhereUniqueWithoutLessonInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutLessonDataInput!
}

input NoteUpdateWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutUserDataInput!
}

input NoteUpsertWithWhereUniqueWithoutLessonInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutLessonDataInput!
  create: NoteCreateWithoutLessonInput!
}

input NoteUpsertWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutUserDataInput!
  create: NoteCreateWithoutUserInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  lesson: LessonWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type Order {
  id: ID!
  user: User!
  paymentID: String
  coursePage: CoursePage!
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  user: UserCreateOneWithoutOrdersInput!
  paymentID: String
  coursePage: CoursePageCreateOneWithoutOrdersInput!
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderCreateManyWithoutCoursePageInput {
  create: [OrderCreateWithoutCoursePageInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutCoursePageInput {
  id: ID
  user: UserCreateOneWithoutOrdersInput!
  paymentID: String
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderCreateWithoutUserInput {
  id: ID
  paymentID: String
  coursePage: CoursePageCreateOneWithoutOrdersInput!
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  paymentID_ASC
  paymentID_DESC
  price_ASC
  price_DESC
  promocode_ASC
  promocode_DESC
  isPaid_ASC
  isPaid_DESC
  level_ASC
  level_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  paymentID: String
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  paymentID: String
  paymentID_not: String
  paymentID_in: [String!]
  paymentID_not_in: [String!]
  paymentID_lt: String
  paymentID_lte: String
  paymentID_gt: String
  paymentID_gte: String
  paymentID_contains: String
  paymentID_not_contains: String
  paymentID_starts_with: String
  paymentID_not_starts_with: String
  paymentID_ends_with: String
  paymentID_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  promocode: String
  promocode_not: String
  promocode_in: [String!]
  promocode_not_in: [String!]
  promocode_lt: String
  promocode_lte: String
  promocode_gt: String
  promocode_gte: String
  promocode_contains: String
  promocode_not_contains: String
  promocode_starts_with: String
  promocode_not_starts_with: String
  promocode_ends_with: String
  promocode_not_ends_with: String
  isPaid: Boolean
  isPaid_not: Boolean
  level: Level
  level_not: Level
  level_in: [Level!]
  level_not_in: [Level!]
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  user: UserUpdateOneRequiredWithoutOrdersInput
  paymentID: String
  coursePage: CoursePageUpdateOneRequiredWithoutOrdersInput
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderUpdateManyDataInput {
  paymentID: String
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderUpdateManyMutationInput {
  paymentID: String
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderUpdateManyWithoutCoursePageInput {
  create: [OrderCreateWithoutCoursePageInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCoursePageInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCoursePageInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithoutUserInput {
  create: [OrderCreateWithoutUserInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutCoursePageDataInput {
  user: UserUpdateOneRequiredWithoutOrdersInput
  paymentID: String
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderUpdateWithoutUserDataInput {
  paymentID: String
  coursePage: CoursePageUpdateOneRequiredWithoutOrdersInput
  price: Int
  promocode: String
  isPaid: Boolean
  level: Level
  comment: String
}

input OrderUpdateWithWhereUniqueWithoutCoursePageInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutCoursePageDataInput!
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutUserDataInput!
}

input OrderUpsertWithWhereUniqueWithoutCoursePageInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutCoursePageDataInput!
  create: OrderCreateWithoutCoursePageInput!
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutUserDataInput!
  create: OrderCreateWithoutUserInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  paymentID: String
  paymentID_not: String
  paymentID_in: [String!]
  paymentID_not_in: [String!]
  paymentID_lt: String
  paymentID_lte: String
  paymentID_gt: String
  paymentID_gte: String
  paymentID_contains: String
  paymentID_not_contains: String
  paymentID_starts_with: String
  paymentID_not_starts_with: String
  paymentID_ends_with: String
  paymentID_not_ends_with: String
  coursePage: CoursePageWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  promocode: String
  promocode_not: String
  promocode_in: [String!]
  promocode_not_in: [String!]
  promocode_lt: String
  promocode_lte: String
  promocode_gt: String
  promocode_gte: String
  promocode_contains: String
  promocode_not_contains: String
  promocode_starts_with: String
  promocode_not_starts_with: String
  promocode_ends_with: String
  promocode_not_ends_with: String
  isPaid: Boolean
  isPaid_not: Boolean
  level: Level
  level_not: Level
  level_in: [Level!]
  level_not_in: [Level!]
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
}

type Post {
  id: ID!
  user: User!
  tags: [String!]!
  title: String
  text: String
  likes: Int
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  user: UserCreateOneWithoutPostsInput!
  tags: PostCreatetagsInput
  title: String
  text: String
  likes: Int
  coursePages: CoursePageCreateManyWithoutPostsInput
}

input PostCreateManyWithoutCoursePagesInput {
  create: [PostCreateWithoutCoursePagesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreatetagsInput {
  set: [String!]
}

input PostCreateWithoutCoursePagesInput {
  id: ID
  user: UserCreateOneWithoutPostsInput!
  tags: PostCreatetagsInput
  title: String
  text: String
  likes: Int
}

input PostCreateWithoutUserInput {
  id: ID
  tags: PostCreatetagsInput
  title: String
  text: String
  likes: Int
  coursePages: CoursePageCreateManyWithoutPostsInput
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  likes_ASC
  likes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  tags: [String!]!
  title: String
  text: String
  likes: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  tags: PostUpdatetagsInput
  title: String
  text: String
  likes: Int
  coursePages: CoursePageUpdateManyWithoutPostsInput
}

input PostUpdateManyDataInput {
  tags: PostUpdatetagsInput
  title: String
  text: String
  likes: Int
}

input PostUpdateManyMutationInput {
  tags: PostUpdatetagsInput
  title: String
  text: String
  likes: Int
}

input PostUpdateManyWithoutCoursePagesInput {
  create: [PostCreateWithoutCoursePagesInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCoursePagesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCoursePagesInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdatetagsInput {
  set: [String!]
}

input PostUpdateWithoutCoursePagesDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  tags: PostUpdatetagsInput
  title: String
  text: String
  likes: Int
}

input PostUpdateWithoutUserDataInput {
  tags: PostUpdatetagsInput
  title: String
  text: String
  likes: Int
  coursePages: CoursePageUpdateManyWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutCoursePagesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCoursePagesDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithWhereUniqueWithoutCoursePagesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCoursePagesDataInput!
  create: PostCreateWithoutCoursePagesInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Problem {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!]!
  solutionList: [String!]!
  user: User!
  lesson: Lesson!
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  lessonID: ID!
  nodeType: String
  nodeID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemConnection {
  pageInfo: PageInfo!
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreatehintsListInput {
  set: [String!]
}

input ProblemCreateInput {
  id: ID
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  lesson: LessonCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
  nodeType: String
  nodeID: ID
}

input ProblemCreateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateOneWithoutProblemResultsInput {
  create: ProblemCreateWithoutProblemResultsInput
  connect: ProblemWhereUniqueInput
}

input ProblemCreatesolutionListInput {
  set: [String!]
}

input ProblemCreateWithoutLessonInput {
  id: ID
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
  nodeType: String
  nodeID: ID
}

input ProblemCreateWithoutProblemResultsInput {
  id: ID
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  user: UserCreateOneWithoutProblemsInput!
  lesson: LessonCreateOneWithoutProblemsInput!
  lessonID: ID!
  nodeType: String
  nodeID: ID
}

input ProblemCreateWithoutUserInput {
  id: ID
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: ProblemCreatehintsListInput
  solutionList: ProblemCreatesolutionListInput
  lesson: LessonCreateOneWithoutProblemsInput!
  problemResults: ProblemResultCreateManyWithoutProblemInput
  lessonID: ID!
  nodeType: String
  nodeID: ID
}

type ProblemEdge {
  node: Problem!
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  hints_ASC
  hints_DESC
  solution_ASC
  solution_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  nodeType_ASC
  nodeType_DESC
  nodeID_ASC
  nodeID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProblemPreviousValues {
  id: ID!
  text: String!
  hints: String
  solution: String
  answer: String
  hintsList: [String!]!
  solutionList: [String!]!
  lessonID: ID!
  nodeType: String
  nodeID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemResult {
  id: ID!
  student: User!
  answer: String
  revealed: [String!]!
  lesson: Lesson
  lessonID: ID
  problem: Problem
  problemID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProblemResultConnection {
  pageInfo: PageInfo!
  edges: [ProblemResultEdge]!
  aggregate: AggregateProblemResult!
}

input ProblemResultCreateInput {
  id: ID
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultCreateManyWithoutLessonInput {
  create: [ProblemResultCreateWithoutLessonInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreateManyWithoutProblemInput {
  create: [ProblemResultCreateWithoutProblemInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreateManyWithoutStudentInput {
  create: [ProblemResultCreateWithoutStudentInput!]
  connect: [ProblemResultWhereUniqueInput!]
}

input ProblemResultCreaterevealedInput {
  set: [String!]
}

input ProblemResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultCreateWithoutProblemInput {
  id: ID
  student: UserCreateOneWithoutProblemResultsInput!
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problemID: ID
}

input ProblemResultCreateWithoutStudentInput {
  id: ID
  answer: String
  revealed: ProblemResultCreaterevealedInput
  lesson: LessonCreateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemCreateOneWithoutProblemResultsInput
  problemID: ID
}

type ProblemResultEdge {
  node: ProblemResult!
  cursor: String!
}

enum ProblemResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  problemID_ASC
  problemID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProblemResultPreviousValues {
  id: ID!
  answer: String
  revealed: [String!]!
  lessonID: ID
  problemID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProblemResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  problemID: ID
  problemID_not: ID
  problemID_in: [ID!]
  problemID_not_in: [ID!]
  problemID_lt: ID
  problemID_lte: ID
  problemID_gt: ID
  problemID_gte: ID
  problemID_contains: ID
  problemID_not_contains: ID
  problemID_starts_with: ID
  problemID_not_starts_with: ID
  problemID_ends_with: ID
  problemID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemResultScalarWhereInput!]
  OR: [ProblemResultScalarWhereInput!]
  NOT: [ProblemResultScalarWhereInput!]
}

type ProblemResultSubscriptionPayload {
  mutation: MutationType!
  node: ProblemResult
  updatedFields: [String!]
  previousValues: ProblemResultPreviousValues
}

input ProblemResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemResultWhereInput
  AND: [ProblemResultSubscriptionWhereInput!]
  OR: [ProblemResultSubscriptionWhereInput!]
  NOT: [ProblemResultSubscriptionWhereInput!]
}

input ProblemResultUpdateInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateManyDataInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateManyMutationInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateManyWithoutLessonInput {
  create: [ProblemResultCreateWithoutLessonInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithoutProblemInput {
  create: [ProblemResultCreateWithoutProblemInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutProblemInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutProblemInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithoutStudentInput {
  create: [ProblemResultCreateWithoutStudentInput!]
  delete: [ProblemResultWhereUniqueInput!]
  connect: [ProblemResultWhereUniqueInput!]
  set: [ProblemResultWhereUniqueInput!]
  disconnect: [ProblemResultWhereUniqueInput!]
  update: [ProblemResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ProblemResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ProblemResultScalarWhereInput!]
  updateMany: [ProblemResultUpdateManyWithWhereNestedInput!]
}

input ProblemResultUpdateManyWithWhereNestedInput {
  where: ProblemResultScalarWhereInput!
  data: ProblemResultUpdateManyDataInput!
}

input ProblemResultUpdaterevealedInput {
  set: [String!]
}

input ProblemResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateWithoutProblemDataInput {
  student: UserUpdateOneRequiredWithoutProblemResultsInput
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problemID: ID
}

input ProblemResultUpdateWithoutStudentDataInput {
  answer: String
  revealed: ProblemResultUpdaterevealedInput
  lesson: LessonUpdateOneWithoutProblemResultsInput
  lessonID: ID
  problem: ProblemUpdateOneWithoutProblemResultsInput
  problemID: ID
}

input ProblemResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutLessonDataInput!
}

input ProblemResultUpdateWithWhereUniqueWithoutProblemInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutProblemDataInput!
}

input ProblemResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ProblemResultWhereUniqueInput!
  data: ProblemResultUpdateWithoutStudentDataInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutLessonDataInput!
  create: ProblemResultCreateWithoutLessonInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutProblemInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutProblemDataInput!
  create: ProblemResultCreateWithoutProblemInput!
}

input ProblemResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ProblemResultWhereUniqueInput!
  update: ProblemResultUpdateWithoutStudentDataInput!
  create: ProblemResultCreateWithoutStudentInput!
}

input ProblemResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  problem: ProblemWhereInput
  problemID: ID
  problemID_not: ID
  problemID_in: [ID!]
  problemID_not_in: [ID!]
  problemID_lt: ID
  problemID_lte: ID
  problemID_gt: ID
  problemID_gte: ID
  problemID_contains: ID
  problemID_not_contains: ID
  problemID_starts_with: ID
  problemID_not_starts_with: ID
  problemID_ends_with: ID
  problemID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemResultWhereInput!]
  OR: [ProblemResultWhereInput!]
  NOT: [ProblemResultWhereInput!]
}

input ProblemResultWhereUniqueInput {
  id: ID
}

input ProblemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  hints: String
  hints_not: String
  hints_in: [String!]
  hints_not_in: [String!]
  hints_lt: String
  hints_lte: String
  hints_gt: String
  hints_gte: String
  hints_contains: String
  hints_not_contains: String
  hints_starts_with: String
  hints_not_starts_with: String
  hints_ends_with: String
  hints_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  nodeType: String
  nodeType_not: String
  nodeType_in: [String!]
  nodeType_not_in: [String!]
  nodeType_lt: String
  nodeType_lte: String
  nodeType_gt: String
  nodeType_gte: String
  nodeType_contains: String
  nodeType_not_contains: String
  nodeType_starts_with: String
  nodeType_not_starts_with: String
  nodeType_ends_with: String
  nodeType_not_ends_with: String
  nodeID: ID
  nodeID_not: ID
  nodeID_in: [ID!]
  nodeID_not_in: [ID!]
  nodeID_lt: ID
  nodeID_lte: ID
  nodeID_gt: ID
  nodeID_gte: ID
  nodeID_contains: ID
  nodeID_not_contains: ID
  nodeID_starts_with: ID
  nodeID_not_starts_with: ID
  nodeID_ends_with: ID
  nodeID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemScalarWhereInput!]
  OR: [ProblemScalarWhereInput!]
  NOT: [ProblemScalarWhereInput!]
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
  AND: [ProblemSubscriptionWhereInput!]
  OR: [ProblemSubscriptionWhereInput!]
  NOT: [ProblemSubscriptionWhereInput!]
}

input ProblemUpdatehintsListInput {
  set: [String!]
}

input ProblemUpdateInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateManyDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateManyMutationInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateManyWithoutLessonInput {
  create: [ProblemCreateWithoutLessonInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  set: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ProblemScalarWhereInput!]
  updateMany: [ProblemUpdateManyWithWhereNestedInput!]
}

input ProblemUpdateManyWithoutUserInput {
  create: [ProblemCreateWithoutUserInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  set: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProblemScalarWhereInput!]
  updateMany: [ProblemUpdateManyWithWhereNestedInput!]
}

input ProblemUpdateManyWithWhereNestedInput {
  where: ProblemScalarWhereInput!
  data: ProblemUpdateManyDataInput!
}

input ProblemUpdateOneWithoutProblemResultsInput {
  create: ProblemCreateWithoutProblemResultsInput
  update: ProblemUpdateWithoutProblemResultsDataInput
  upsert: ProblemUpsertWithoutProblemResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProblemWhereUniqueInput
}

input ProblemUpdatesolutionListInput {
  set: [String!]
}

input ProblemUpdateWithoutLessonDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateWithoutProblemResultsDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  user: UserUpdateOneRequiredWithoutProblemsInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateWithoutUserDataInput {
  text: String
  hints: String
  solution: String
  answer: String
  hintsList: ProblemUpdatehintsListInput
  solutionList: ProblemUpdatesolutionListInput
  lesson: LessonUpdateOneRequiredWithoutProblemsInput
  problemResults: ProblemResultUpdateManyWithoutProblemInput
  lessonID: ID
  nodeType: String
  nodeID: ID
}

input ProblemUpdateWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutLessonDataInput!
}

input ProblemUpdateWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutUserDataInput!
}

input ProblemUpsertWithoutProblemResultsInput {
  update: ProblemUpdateWithoutProblemResultsDataInput!
  create: ProblemCreateWithoutProblemResultsInput!
}

input ProblemUpsertWithWhereUniqueWithoutLessonInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutLessonDataInput!
  create: ProblemCreateWithoutLessonInput!
}

input ProblemUpsertWithWhereUniqueWithoutUserInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutUserDataInput!
  create: ProblemCreateWithoutUserInput!
}

input ProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  hints: String
  hints_not: String
  hints_in: [String!]
  hints_not_in: [String!]
  hints_lt: String
  hints_lte: String
  hints_gt: String
  hints_gte: String
  hints_contains: String
  hints_not_contains: String
  hints_starts_with: String
  hints_not_starts_with: String
  hints_ends_with: String
  hints_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  user: UserWhereInput
  lesson: LessonWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  nodeType: String
  nodeType_not: String
  nodeType_in: [String!]
  nodeType_not_in: [String!]
  nodeType_lt: String
  nodeType_lte: String
  nodeType_gt: String
  nodeType_gte: String
  nodeType_contains: String
  nodeType_not_contains: String
  nodeType_starts_with: String
  nodeType_not_starts_with: String
  nodeType_ends_with: String
  nodeType_not_ends_with: String
  nodeID: ID
  nodeID_not: ID
  nodeID_in: [ID!]
  nodeID_not_in: [ID!]
  nodeID_lt: ID
  nodeID_lte: ID
  nodeID_gt: ID
  nodeID_gte: ID
  nodeID_contains: ID
  nodeID_not_contains: ID
  nodeID_starts_with: ID
  nodeID_not_starts_with: ID
  nodeID_ends_with: ID
  nodeID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  careerTrack(where: CareerTrackWhereUniqueInput!): CareerTrack
  careerTracks(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrack]!
  careerTracksConnection(where: CareerTrackWhereInput, orderBy: CareerTrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareerTrackConnection!
  careerTrackUnit(where: CareerTrackUnitWhereUniqueInput!): CareerTrackUnit
  careerTrackUnits(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareerTrackUnit]!
  careerTrackUnitsConnection(where: CareerTrackUnitWhereInput, orderBy: CareerTrackUnitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareerTrackUnitConnection!
  challengeResult(where: ChallengeResultWhereUniqueInput!): ChallengeResult
  challengeResults(where: ChallengeResultWhereInput, orderBy: ChallengeResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeResult]!
  challengeResultsConnection(where: ChallengeResultWhereInput, orderBy: ChallengeResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeResultConnection!
  clause(where: ClauseWhereUniqueInput!): Clause
  clauses(where: ClauseWhereInput, orderBy: ClauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clause]!
  clausesConnection(where: ClauseWhereInput, orderBy: ClauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClauseConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  construction(where: ConstructionWhereUniqueInput!): Construction
  constructions(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction]!
  constructionsConnection(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConstructionConnection!
  constructionResult(where: ConstructionResultWhereUniqueInput!): ConstructionResult
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult]!
  constructionResultsConnection(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConstructionResultConnection!
  coursePage(where: CoursePageWhereUniqueInput!): CoursePage
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage]!
  coursePagesConnection(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoursePageConnection!
  courseVisit(where: CourseVisitWhereUniqueInput!): CourseVisit
  courseVisits(where: CourseVisitWhereInput, orderBy: CourseVisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseVisit]!
  courseVisitsConnection(where: CourseVisitWhereInput, orderBy: CourseVisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseVisitConnection!
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document]!
  documentsConnection(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentConnection!
  documentResult(where: DocumentResultWhereUniqueInput!): DocumentResult
  documentResults(where: DocumentResultWhereInput, orderBy: DocumentResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentResult]!
  documentResultsConnection(where: DocumentResultWhereInput, orderBy: DocumentResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentResultConnection!
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  feedbacks(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback]!
  feedbacksConnection(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeedbackConnection!
  forum(where: ForumWhereUniqueInput!): Forum
  forums(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Forum]!
  forumsConnection(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ForumConnection!
  legalPortfolio(where: LegalPortfolioWhereUniqueInput!): LegalPortfolio
  legalPortfolios(where: LegalPortfolioWhereInput, orderBy: LegalPortfolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LegalPortfolio]!
  legalPortfoliosConnection(where: LegalPortfolioWhereInput, orderBy: LegalPortfolioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LegalPortfolioConnection!
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  lessonResult(where: LessonResultWhereUniqueInput!): LessonResult
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult]!
  lessonResultsConnection(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonResultConnection!
  newTest(where: NewTestWhereUniqueInput!): NewTest
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest]!
  newTestsConnection(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewTestConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  problem(where: ProblemWhereUniqueInput!): Problem
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  problemResult(where: ProblemResultWhereUniqueInput!): ProblemResult
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult]!
  problemResultsConnection(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemResultConnection!
  quiz(where: QuizWhereUniqueInput!): Quiz
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  quizResult(where: QuizResultWhereUniqueInput!): QuizResult
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult]!
  quizResultsConnection(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizResultConnection!
  rating(where: RatingWhereUniqueInput!): Rating
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  shot(where: ShotWhereUniqueInput!): Shot
  shots(where: ShotWhereInput, orderBy: ShotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shot]!
  shotsConnection(where: ShotWhereInput, orderBy: ShotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShotConnection!
  shotResult(where: ShotResultWhereUniqueInput!): ShotResult
  shotResults(where: ShotResultWhereInput, orderBy: ShotResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShotResult]!
  shotResultsConnection(where: ShotResultWhereInput, orderBy: ShotResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShotResultConnection!
  statement(where: StatementWhereUniqueInput!): Statement
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement]!
  statementsConnection(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatementConnection!
  testResult(where: TestResultWhereUniqueInput!): TestResult
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult]!
  testResultsConnection(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestResultConnection!
  textEditor(where: TextEditorWhereUniqueInput!): TextEditor
  textEditors(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor]!
  textEditorsConnection(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextEditorConnection!
  textEditorResult(where: TextEditorResultWhereUniqueInput!): TextEditorResult
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult]!
  textEditorResultsConnection(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextEditorResultConnection!
  uni(where: UniWhereUniqueInput!): Uni
  unis(where: UniWhereInput, orderBy: UniOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Uni]!
  unisConnection(where: UniWhereInput, orderBy: UniOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UniConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userLevel(where: UserLevelWhereUniqueInput!): UserLevel
  userLevels(where: UserLevelWhereInput, orderBy: UserLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserLevel]!
  userLevelsConnection(where: UserLevelWhereInput, orderBy: UserLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserLevelConnection!
  node(id: ID!): Node
}

type Quiz {
  id: ID!
  question: String!
  answer: String!
  user: User!
  type: TaskType
  lessonID: ID
  lesson: Lesson
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult!]
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizConnection {
  pageInfo: PageInfo!
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  id: ID
  question: String!
  answer: String!
  user: UserCreateOneWithoutQuizesInput!
  type: TaskType
  lessonID: ID
  lesson: LessonCreateOneWithoutQuizesInput
  quizResults: QuizResultCreateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizCreateManyWithoutLessonInput {
  create: [QuizCreateWithoutLessonInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateOneWithoutQuizResultsInput {
  create: QuizCreateWithoutQuizResultsInput
  connect: QuizWhereUniqueInput
}

input QuizCreateWithoutLessonInput {
  id: ID
  question: String!
  answer: String!
  user: UserCreateOneWithoutQuizesInput!
  type: TaskType
  lessonID: ID
  quizResults: QuizResultCreateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizCreateWithoutQuizResultsInput {
  id: ID
  question: String!
  answer: String!
  user: UserCreateOneWithoutQuizesInput!
  type: TaskType
  lessonID: ID
  lesson: LessonCreateOneWithoutQuizesInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizCreateWithoutUserInput {
  id: ID
  question: String!
  answer: String!
  type: TaskType
  lessonID: ID
  lesson: LessonCreateOneWithoutQuizesInput
  quizResults: QuizResultCreateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

type QuizEdge {
  node: Quiz!
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
  type_ASC
  type_DESC
  lessonID_ASC
  lessonID_DESC
  next_ASC
  next_DESC
  ifRight_ASC
  ifRight_DESC
  ifWrong_ASC
  ifWrong_DESC
  check_ASC
  check_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizPreviousValues {
  id: ID!
  question: String!
  answer: String!
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  correct: Boolean
  quiz: Quiz
  lesson: Lesson
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizResultConnection {
  pageInfo: PageInfo!
  edges: [QuizResultEdge]!
  aggregate: AggregateQuizResult!
}

input QuizResultCreateInput {
  id: ID
  student: UserCreateOneWithoutQuizResultsInput!
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizCreateOneWithoutQuizResultsInput
  lesson: LessonCreateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultCreateManyWithoutLessonInput {
  create: [QuizResultCreateWithoutLessonInput!]
  connect: [QuizResultWhereUniqueInput!]
}

input QuizResultCreateManyWithoutQuizInput {
  create: [QuizResultCreateWithoutQuizInput!]
  connect: [QuizResultWhereUniqueInput!]
}

input QuizResultCreateManyWithoutStudentInput {
  create: [QuizResultCreateWithoutStudentInput!]
  connect: [QuizResultWhereUniqueInput!]
}

input QuizResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutQuizResultsInput!
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizCreateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultCreateWithoutQuizInput {
  id: ID
  student: UserCreateOneWithoutQuizResultsInput!
  answer: String
  attempts: Int
  correct: Boolean
  lesson: LessonCreateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultCreateWithoutStudentInput {
  id: ID
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizCreateOneWithoutQuizResultsInput
  lesson: LessonCreateOneWithoutQuizResultsInput
  lessonID: ID
}

type QuizResultEdge {
  node: QuizResult!
  cursor: String!
}

enum QuizResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  correct_ASC
  correct_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  correct: Boolean
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input QuizResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  correct: Boolean
  correct_not: Boolean
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizResultScalarWhereInput!]
  OR: [QuizResultScalarWhereInput!]
  NOT: [QuizResultScalarWhereInput!]
}

type QuizResultSubscriptionPayload {
  mutation: MutationType!
  node: QuizResult
  updatedFields: [String!]
  previousValues: QuizResultPreviousValues
}

input QuizResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuizResultWhereInput
  AND: [QuizResultSubscriptionWhereInput!]
  OR: [QuizResultSubscriptionWhereInput!]
  NOT: [QuizResultSubscriptionWhereInput!]
}

input QuizResultUpdateInput {
  student: UserUpdateOneRequiredWithoutQuizResultsInput
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizUpdateOneWithoutQuizResultsInput
  lesson: LessonUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateManyDataInput {
  answer: String
  attempts: Int
  correct: Boolean
  lessonID: ID
}

input QuizResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  correct: Boolean
  lessonID: ID
}

input QuizResultUpdateManyWithoutLessonInput {
  create: [QuizResultCreateWithoutLessonInput!]
  delete: [QuizResultWhereUniqueInput!]
  connect: [QuizResultWhereUniqueInput!]
  set: [QuizResultWhereUniqueInput!]
  disconnect: [QuizResultWhereUniqueInput!]
  update: [QuizResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [QuizResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [QuizResultScalarWhereInput!]
  updateMany: [QuizResultUpdateManyWithWhereNestedInput!]
}

input QuizResultUpdateManyWithoutQuizInput {
  create: [QuizResultCreateWithoutQuizInput!]
  delete: [QuizResultWhereUniqueInput!]
  connect: [QuizResultWhereUniqueInput!]
  set: [QuizResultWhereUniqueInput!]
  disconnect: [QuizResultWhereUniqueInput!]
  update: [QuizResultUpdateWithWhereUniqueWithoutQuizInput!]
  upsert: [QuizResultUpsertWithWhereUniqueWithoutQuizInput!]
  deleteMany: [QuizResultScalarWhereInput!]
  updateMany: [QuizResultUpdateManyWithWhereNestedInput!]
}

input QuizResultUpdateManyWithoutStudentInput {
  create: [QuizResultCreateWithoutStudentInput!]
  delete: [QuizResultWhereUniqueInput!]
  connect: [QuizResultWhereUniqueInput!]
  set: [QuizResultWhereUniqueInput!]
  disconnect: [QuizResultWhereUniqueInput!]
  update: [QuizResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [QuizResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [QuizResultScalarWhereInput!]
  updateMany: [QuizResultUpdateManyWithWhereNestedInput!]
}

input QuizResultUpdateManyWithWhereNestedInput {
  where: QuizResultScalarWhereInput!
  data: QuizResultUpdateManyDataInput!
}

input QuizResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutQuizResultsInput
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateWithoutQuizDataInput {
  student: UserUpdateOneRequiredWithoutQuizResultsInput
  answer: String
  attempts: Int
  correct: Boolean
  lesson: LessonUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  correct: Boolean
  quiz: QuizUpdateOneWithoutQuizResultsInput
  lesson: LessonUpdateOneWithoutQuizResultsInput
  lessonID: ID
}

input QuizResultUpdateWithWhereUniqueWithoutLessonInput {
  where: QuizResultWhereUniqueInput!
  data: QuizResultUpdateWithoutLessonDataInput!
}

input QuizResultUpdateWithWhereUniqueWithoutQuizInput {
  where: QuizResultWhereUniqueInput!
  data: QuizResultUpdateWithoutQuizDataInput!
}

input QuizResultUpdateWithWhereUniqueWithoutStudentInput {
  where: QuizResultWhereUniqueInput!
  data: QuizResultUpdateWithoutStudentDataInput!
}

input QuizResultUpsertWithWhereUniqueWithoutLessonInput {
  where: QuizResultWhereUniqueInput!
  update: QuizResultUpdateWithoutLessonDataInput!
  create: QuizResultCreateWithoutLessonInput!
}

input QuizResultUpsertWithWhereUniqueWithoutQuizInput {
  where: QuizResultWhereUniqueInput!
  update: QuizResultUpdateWithoutQuizDataInput!
  create: QuizResultCreateWithoutQuizInput!
}

input QuizResultUpsertWithWhereUniqueWithoutStudentInput {
  where: QuizResultWhereUniqueInput!
  update: QuizResultUpdateWithoutStudentDataInput!
  create: QuizResultCreateWithoutStudentInput!
}

input QuizResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  correct: Boolean
  correct_not: Boolean
  quiz: QuizWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizResultWhereInput!]
  OR: [QuizResultWhereInput!]
  NOT: [QuizResultWhereInput!]
}

input QuizResultWhereUniqueInput {
  id: ID
}

input QuizScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  type: TaskType
  type_not: TaskType
  type_in: [TaskType!]
  type_not_in: [TaskType!]
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  ifRight: String
  ifRight_not: String
  ifRight_in: [String!]
  ifRight_not_in: [String!]
  ifRight_lt: String
  ifRight_lte: String
  ifRight_gt: String
  ifRight_gte: String
  ifRight_contains: String
  ifRight_not_contains: String
  ifRight_starts_with: String
  ifRight_not_starts_with: String
  ifRight_ends_with: String
  ifRight_not_ends_with: String
  ifWrong: String
  ifWrong_not: String
  ifWrong_in: [String!]
  ifWrong_not_in: [String!]
  ifWrong_lt: String
  ifWrong_lte: String
  ifWrong_gt: String
  ifWrong_gte: String
  ifWrong_contains: String
  ifWrong_not_contains: String
  ifWrong_starts_with: String
  ifWrong_not_starts_with: String
  ifWrong_ends_with: String
  ifWrong_not_ends_with: String
  check: CheckType
  check_not: CheckType
  check_in: [CheckType!]
  check_not_in: [CheckType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizScalarWhereInput!]
  OR: [QuizScalarWhereInput!]
  NOT: [QuizScalarWhereInput!]
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
  AND: [QuizSubscriptionWhereInput!]
  OR: [QuizSubscriptionWhereInput!]
  NOT: [QuizSubscriptionWhereInput!]
}

input QuizUpdateInput {
  question: String
  answer: String
  user: UserUpdateOneRequiredWithoutQuizesInput
  type: TaskType
  lessonID: ID
  lesson: LessonUpdateOneWithoutQuizesInput
  quizResults: QuizResultUpdateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateManyDataInput {
  question: String
  answer: String
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateManyMutationInput {
  question: String
  answer: String
  type: TaskType
  lessonID: ID
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateManyWithoutLessonInput {
  create: [QuizCreateWithoutLessonInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithoutUserInput {
  create: [QuizCreateWithoutUserInput!]
  delete: [QuizWhereUniqueInput!]
  connect: [QuizWhereUniqueInput!]
  set: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuizUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QuizScalarWhereInput!]
  updateMany: [QuizUpdateManyWithWhereNestedInput!]
}

input QuizUpdateManyWithWhereNestedInput {
  where: QuizScalarWhereInput!
  data: QuizUpdateManyDataInput!
}

input QuizUpdateOneWithoutQuizResultsInput {
  create: QuizCreateWithoutQuizResultsInput
  update: QuizUpdateWithoutQuizResultsDataInput
  upsert: QuizUpsertWithoutQuizResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: QuizWhereUniqueInput
}

input QuizUpdateWithoutLessonDataInput {
  question: String
  answer: String
  user: UserUpdateOneRequiredWithoutQuizesInput
  type: TaskType
  lessonID: ID
  quizResults: QuizResultUpdateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateWithoutQuizResultsDataInput {
  question: String
  answer: String
  user: UserUpdateOneRequiredWithoutQuizesInput
  type: TaskType
  lessonID: ID
  lesson: LessonUpdateOneWithoutQuizesInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateWithoutUserDataInput {
  question: String
  answer: String
  type: TaskType
  lessonID: ID
  lesson: LessonUpdateOneWithoutQuizesInput
  quizResults: QuizResultUpdateManyWithoutQuizInput
  next: Json
  ifRight: String
  ifWrong: String
  check: CheckType
}

input QuizUpdateWithWhereUniqueWithoutLessonInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutLessonDataInput!
}

input QuizUpdateWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateWithoutUserDataInput!
}

input QuizUpsertWithoutQuizResultsInput {
  update: QuizUpdateWithoutQuizResultsDataInput!
  create: QuizCreateWithoutQuizResultsInput!
}

input QuizUpsertWithWhereUniqueWithoutLessonInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutLessonDataInput!
  create: QuizCreateWithoutLessonInput!
}

input QuizUpsertWithWhereUniqueWithoutUserInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateWithoutUserDataInput!
  create: QuizCreateWithoutUserInput!
}

input QuizWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  user: UserWhereInput
  type: TaskType
  type_not: TaskType
  type_in: [TaskType!]
  type_not_in: [TaskType!]
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  lesson: LessonWhereInput
  quizResults_every: QuizResultWhereInput
  quizResults_some: QuizResultWhereInput
  quizResults_none: QuizResultWhereInput
  ifRight: String
  ifRight_not: String
  ifRight_in: [String!]
  ifRight_not_in: [String!]
  ifRight_lt: String
  ifRight_lte: String
  ifRight_gt: String
  ifRight_gte: String
  ifRight_contains: String
  ifRight_not_contains: String
  ifRight_starts_with: String
  ifRight_not_starts_with: String
  ifRight_ends_with: String
  ifRight_not_ends_with: String
  ifWrong: String
  ifWrong_not: String
  ifWrong_in: [String!]
  ifWrong_not_in: [String!]
  ifWrong_lt: String
  ifWrong_lte: String
  ifWrong_gt: String
  ifWrong_gte: String
  ifWrong_contains: String
  ifWrong_not_contains: String
  ifWrong_starts_with: String
  ifWrong_not_starts_with: String
  ifWrong_ends_with: String
  ifWrong_not_ends_with: String
  check: CheckType
  check_not: CheckType
  check_in: [CheckType!]
  check_not_in: [CheckType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuizWhereInput!]
  OR: [QuizWhereInput!]
  NOT: [QuizWhereInput!]
}

input QuizWhereUniqueInput {
  id: ID
}

type Rating {
  id: ID!
  rating: Int
  forum: Forum
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RatingConnection {
  pageInfo: PageInfo!
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  id: ID
  rating: Int
  forum: ForumCreateOneWithoutRatingInput
  user: UserCreateOneWithoutRatingsInput
}

input RatingCreateManyWithoutForumInput {
  create: [RatingCreateWithoutForumInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateManyWithoutUserInput {
  create: [RatingCreateWithoutUserInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateWithoutForumInput {
  id: ID
  rating: Int
  user: UserCreateOneWithoutRatingsInput
}

input RatingCreateWithoutUserInput {
  id: ID
  rating: Int
  forum: ForumCreateOneWithoutRatingInput
}

type RatingEdge {
  node: Rating!
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RatingPreviousValues {
  id: ID!
  rating: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RatingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  NOT: [RatingScalarWhereInput!]
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
  AND: [RatingSubscriptionWhereInput!]
  OR: [RatingSubscriptionWhereInput!]
  NOT: [RatingSubscriptionWhereInput!]
}

input RatingUpdateInput {
  rating: Int
  forum: ForumUpdateOneWithoutRatingInput
  user: UserUpdateOneWithoutRatingsInput
}

input RatingUpdateManyDataInput {
  rating: Int
}

input RatingUpdateManyMutationInput {
  rating: Int
}

input RatingUpdateManyWithoutForumInput {
  create: [RatingCreateWithoutForumInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutForumInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutForumInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithoutUserInput {
  create: [RatingCreateWithoutUserInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput!
  data: RatingUpdateManyDataInput!
}

input RatingUpdateWithoutForumDataInput {
  rating: Int
  user: UserUpdateOneWithoutRatingsInput
}

input RatingUpdateWithoutUserDataInput {
  rating: Int
  forum: ForumUpdateOneWithoutRatingInput
}

input RatingUpdateWithWhereUniqueWithoutForumInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutForumDataInput!
}

input RatingUpdateWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutUserDataInput!
}

input RatingUpsertWithWhereUniqueWithoutForumInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutForumDataInput!
  create: RatingCreateWithoutForumInput!
}

input RatingUpsertWithWhereUniqueWithoutUserInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutUserDataInput!
  create: RatingCreateWithoutUserInput!
}

input RatingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  forum: ForumWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
}

input RatingWhereUniqueInput {
  id: ID
}

type Shot {
  id: ID!
  user: User!
  title: String!
  parts: [String!]!
  comments: [String!]!
  shotResults(where: ShotResultWhereInput, orderBy: ShotResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShotResult!]
  lessonID: ID
  lesson: Lesson
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShotConnection {
  pageInfo: PageInfo!
  edges: [ShotEdge]!
  aggregate: AggregateShot!
}

input ShotCreatecommentsInput {
  set: [String!]
}

input ShotCreateInput {
  id: ID
  user: UserCreateOneWithoutShotsInput!
  title: String!
  parts: ShotCreatepartsInput
  comments: ShotCreatecommentsInput
  shotResults: ShotResultCreateManyWithoutShotInput
  lessonID: ID
  lesson: LessonCreateOneWithoutShotsInput
}

input ShotCreateManyWithoutLessonInput {
  create: [ShotCreateWithoutLessonInput!]
  connect: [ShotWhereUniqueInput!]
}

input ShotCreateManyWithoutUserInput {
  create: [ShotCreateWithoutUserInput!]
  connect: [ShotWhereUniqueInput!]
}

input ShotCreateOneWithoutShotResultsInput {
  create: ShotCreateWithoutShotResultsInput
  connect: ShotWhereUniqueInput
}

input ShotCreatepartsInput {
  set: [String!]
}

input ShotCreateWithoutLessonInput {
  id: ID
  user: UserCreateOneWithoutShotsInput!
  title: String!
  parts: ShotCreatepartsInput
  comments: ShotCreatecommentsInput
  shotResults: ShotResultCreateManyWithoutShotInput
  lessonID: ID
}

input ShotCreateWithoutShotResultsInput {
  id: ID
  user: UserCreateOneWithoutShotsInput!
  title: String!
  parts: ShotCreatepartsInput
  comments: ShotCreatecommentsInput
  lessonID: ID
  lesson: LessonCreateOneWithoutShotsInput
}

input ShotCreateWithoutUserInput {
  id: ID
  title: String!
  parts: ShotCreatepartsInput
  comments: ShotCreatecommentsInput
  shotResults: ShotResultCreateManyWithoutShotInput
  lessonID: ID
  lesson: LessonCreateOneWithoutShotsInput
}

type ShotEdge {
  node: Shot!
  cursor: String!
}

enum ShotOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShotPreviousValues {
  id: ID!
  title: String!
  parts: [String!]!
  comments: [String!]!
  lessonID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShotResult {
  id: ID!
  student: User!
  answer: String!
  lessonID: ID
  lesson: Lesson
  shot: Shot
  shotID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShotResultConnection {
  pageInfo: PageInfo!
  edges: [ShotResultEdge]!
  aggregate: AggregateShotResult!
}

input ShotResultCreateInput {
  id: ID
  student: UserCreateOneWithoutShotResultsInput!
  answer: String!
  lessonID: ID
  lesson: LessonCreateOneWithoutShotResultsInput
  shot: ShotCreateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultCreateManyWithoutLessonInput {
  create: [ShotResultCreateWithoutLessonInput!]
  connect: [ShotResultWhereUniqueInput!]
}

input ShotResultCreateManyWithoutShotInput {
  create: [ShotResultCreateWithoutShotInput!]
  connect: [ShotResultWhereUniqueInput!]
}

input ShotResultCreateManyWithoutStudentInput {
  create: [ShotResultCreateWithoutStudentInput!]
  connect: [ShotResultWhereUniqueInput!]
}

input ShotResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutShotResultsInput!
  answer: String!
  lessonID: ID
  shot: ShotCreateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultCreateWithoutShotInput {
  id: ID
  student: UserCreateOneWithoutShotResultsInput!
  answer: String!
  lessonID: ID
  lesson: LessonCreateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultCreateWithoutStudentInput {
  id: ID
  answer: String!
  lessonID: ID
  lesson: LessonCreateOneWithoutShotResultsInput
  shot: ShotCreateOneWithoutShotResultsInput
  shotID: ID
}

type ShotResultEdge {
  node: ShotResult!
  cursor: String!
}

enum ShotResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  lessonID_ASC
  lessonID_DESC
  shotID_ASC
  shotID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShotResultPreviousValues {
  id: ID!
  answer: String!
  lessonID: ID
  shotID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShotResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  shotID: ID
  shotID_not: ID
  shotID_in: [ID!]
  shotID_not_in: [ID!]
  shotID_lt: ID
  shotID_lte: ID
  shotID_gt: ID
  shotID_gte: ID
  shotID_contains: ID
  shotID_not_contains: ID
  shotID_starts_with: ID
  shotID_not_starts_with: ID
  shotID_ends_with: ID
  shotID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShotResultScalarWhereInput!]
  OR: [ShotResultScalarWhereInput!]
  NOT: [ShotResultScalarWhereInput!]
}

type ShotResultSubscriptionPayload {
  mutation: MutationType!
  node: ShotResult
  updatedFields: [String!]
  previousValues: ShotResultPreviousValues
}

input ShotResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShotResultWhereInput
  AND: [ShotResultSubscriptionWhereInput!]
  OR: [ShotResultSubscriptionWhereInput!]
  NOT: [ShotResultSubscriptionWhereInput!]
}

input ShotResultUpdateInput {
  student: UserUpdateOneRequiredWithoutShotResultsInput
  answer: String
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotResultsInput
  shot: ShotUpdateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultUpdateManyDataInput {
  answer: String
  lessonID: ID
  shotID: ID
}

input ShotResultUpdateManyMutationInput {
  answer: String
  lessonID: ID
  shotID: ID
}

input ShotResultUpdateManyWithoutLessonInput {
  create: [ShotResultCreateWithoutLessonInput!]
  delete: [ShotResultWhereUniqueInput!]
  connect: [ShotResultWhereUniqueInput!]
  set: [ShotResultWhereUniqueInput!]
  disconnect: [ShotResultWhereUniqueInput!]
  update: [ShotResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ShotResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ShotResultScalarWhereInput!]
  updateMany: [ShotResultUpdateManyWithWhereNestedInput!]
}

input ShotResultUpdateManyWithoutShotInput {
  create: [ShotResultCreateWithoutShotInput!]
  delete: [ShotResultWhereUniqueInput!]
  connect: [ShotResultWhereUniqueInput!]
  set: [ShotResultWhereUniqueInput!]
  disconnect: [ShotResultWhereUniqueInput!]
  update: [ShotResultUpdateWithWhereUniqueWithoutShotInput!]
  upsert: [ShotResultUpsertWithWhereUniqueWithoutShotInput!]
  deleteMany: [ShotResultScalarWhereInput!]
  updateMany: [ShotResultUpdateManyWithWhereNestedInput!]
}

input ShotResultUpdateManyWithoutStudentInput {
  create: [ShotResultCreateWithoutStudentInput!]
  delete: [ShotResultWhereUniqueInput!]
  connect: [ShotResultWhereUniqueInput!]
  set: [ShotResultWhereUniqueInput!]
  disconnect: [ShotResultWhereUniqueInput!]
  update: [ShotResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ShotResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ShotResultScalarWhereInput!]
  updateMany: [ShotResultUpdateManyWithWhereNestedInput!]
}

input ShotResultUpdateManyWithWhereNestedInput {
  where: ShotResultScalarWhereInput!
  data: ShotResultUpdateManyDataInput!
}

input ShotResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutShotResultsInput
  answer: String
  lessonID: ID
  shot: ShotUpdateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultUpdateWithoutShotDataInput {
  student: UserUpdateOneRequiredWithoutShotResultsInput
  answer: String
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultUpdateWithoutStudentDataInput {
  answer: String
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotResultsInput
  shot: ShotUpdateOneWithoutShotResultsInput
  shotID: ID
}

input ShotResultUpdateWithWhereUniqueWithoutLessonInput {
  where: ShotResultWhereUniqueInput!
  data: ShotResultUpdateWithoutLessonDataInput!
}

input ShotResultUpdateWithWhereUniqueWithoutShotInput {
  where: ShotResultWhereUniqueInput!
  data: ShotResultUpdateWithoutShotDataInput!
}

input ShotResultUpdateWithWhereUniqueWithoutStudentInput {
  where: ShotResultWhereUniqueInput!
  data: ShotResultUpdateWithoutStudentDataInput!
}

input ShotResultUpsertWithWhereUniqueWithoutLessonInput {
  where: ShotResultWhereUniqueInput!
  update: ShotResultUpdateWithoutLessonDataInput!
  create: ShotResultCreateWithoutLessonInput!
}

input ShotResultUpsertWithWhereUniqueWithoutShotInput {
  where: ShotResultWhereUniqueInput!
  update: ShotResultUpdateWithoutShotDataInput!
  create: ShotResultCreateWithoutShotInput!
}

input ShotResultUpsertWithWhereUniqueWithoutStudentInput {
  where: ShotResultWhereUniqueInput!
  update: ShotResultUpdateWithoutStudentDataInput!
  create: ShotResultCreateWithoutStudentInput!
}

input ShotResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  lesson: LessonWhereInput
  shot: ShotWhereInput
  shotID: ID
  shotID_not: ID
  shotID_in: [ID!]
  shotID_not_in: [ID!]
  shotID_lt: ID
  shotID_lte: ID
  shotID_gt: ID
  shotID_gte: ID
  shotID_contains: ID
  shotID_not_contains: ID
  shotID_starts_with: ID
  shotID_not_starts_with: ID
  shotID_ends_with: ID
  shotID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShotResultWhereInput!]
  OR: [ShotResultWhereInput!]
  NOT: [ShotResultWhereInput!]
}

input ShotResultWhereUniqueInput {
  id: ID
}

input ShotScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShotScalarWhereInput!]
  OR: [ShotScalarWhereInput!]
  NOT: [ShotScalarWhereInput!]
}

type ShotSubscriptionPayload {
  mutation: MutationType!
  node: Shot
  updatedFields: [String!]
  previousValues: ShotPreviousValues
}

input ShotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShotWhereInput
  AND: [ShotSubscriptionWhereInput!]
  OR: [ShotSubscriptionWhereInput!]
  NOT: [ShotSubscriptionWhereInput!]
}

input ShotUpdatecommentsInput {
  set: [String!]
}

input ShotUpdateInput {
  user: UserUpdateOneRequiredWithoutShotsInput
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  shotResults: ShotResultUpdateManyWithoutShotInput
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotsInput
}

input ShotUpdateManyDataInput {
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  lessonID: ID
}

input ShotUpdateManyMutationInput {
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  lessonID: ID
}

input ShotUpdateManyWithoutLessonInput {
  create: [ShotCreateWithoutLessonInput!]
  delete: [ShotWhereUniqueInput!]
  connect: [ShotWhereUniqueInput!]
  set: [ShotWhereUniqueInput!]
  disconnect: [ShotWhereUniqueInput!]
  update: [ShotUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [ShotUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [ShotScalarWhereInput!]
  updateMany: [ShotUpdateManyWithWhereNestedInput!]
}

input ShotUpdateManyWithoutUserInput {
  create: [ShotCreateWithoutUserInput!]
  delete: [ShotWhereUniqueInput!]
  connect: [ShotWhereUniqueInput!]
  set: [ShotWhereUniqueInput!]
  disconnect: [ShotWhereUniqueInput!]
  update: [ShotUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ShotUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ShotScalarWhereInput!]
  updateMany: [ShotUpdateManyWithWhereNestedInput!]
}

input ShotUpdateManyWithWhereNestedInput {
  where: ShotScalarWhereInput!
  data: ShotUpdateManyDataInput!
}

input ShotUpdateOneWithoutShotResultsInput {
  create: ShotCreateWithoutShotResultsInput
  update: ShotUpdateWithoutShotResultsDataInput
  upsert: ShotUpsertWithoutShotResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: ShotWhereUniqueInput
}

input ShotUpdatepartsInput {
  set: [String!]
}

input ShotUpdateWithoutLessonDataInput {
  user: UserUpdateOneRequiredWithoutShotsInput
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  shotResults: ShotResultUpdateManyWithoutShotInput
  lessonID: ID
}

input ShotUpdateWithoutShotResultsDataInput {
  user: UserUpdateOneRequiredWithoutShotsInput
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotsInput
}

input ShotUpdateWithoutUserDataInput {
  title: String
  parts: ShotUpdatepartsInput
  comments: ShotUpdatecommentsInput
  shotResults: ShotResultUpdateManyWithoutShotInput
  lessonID: ID
  lesson: LessonUpdateOneWithoutShotsInput
}

input ShotUpdateWithWhereUniqueWithoutLessonInput {
  where: ShotWhereUniqueInput!
  data: ShotUpdateWithoutLessonDataInput!
}

input ShotUpdateWithWhereUniqueWithoutUserInput {
  where: ShotWhereUniqueInput!
  data: ShotUpdateWithoutUserDataInput!
}

input ShotUpsertWithoutShotResultsInput {
  update: ShotUpdateWithoutShotResultsDataInput!
  create: ShotCreateWithoutShotResultsInput!
}

input ShotUpsertWithWhereUniqueWithoutLessonInput {
  where: ShotWhereUniqueInput!
  update: ShotUpdateWithoutLessonDataInput!
  create: ShotCreateWithoutLessonInput!
}

input ShotUpsertWithWhereUniqueWithoutUserInput {
  where: ShotWhereUniqueInput!
  update: ShotUpdateWithoutUserDataInput!
  create: ShotCreateWithoutUserInput!
}

input ShotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  shotResults_every: ShotResultWhereInput
  shotResults_some: ShotResultWhereInput
  shotResults_none: ShotResultWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  lesson: LessonWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShotWhereInput!]
  OR: [ShotWhereInput!]
  NOT: [ShotWhereInput!]
}

input ShotWhereUniqueInput {
  id: ID
}

type Statement {
  id: ID!
  text: String
  forum: Forum
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StatementConnection {
  pageInfo: PageInfo!
  edges: [StatementEdge]!
  aggregate: AggregateStatement!
}

input StatementCreateInput {
  id: ID
  text: String
  forum: ForumCreateOneWithoutStatementsInput
  user: UserCreateOneWithoutStatementsInput
}

input StatementCreateManyWithoutForumInput {
  create: [StatementCreateWithoutForumInput!]
  connect: [StatementWhereUniqueInput!]
}

input StatementCreateManyWithoutUserInput {
  create: [StatementCreateWithoutUserInput!]
  connect: [StatementWhereUniqueInput!]
}

input StatementCreateWithoutForumInput {
  id: ID
  text: String
  user: UserCreateOneWithoutStatementsInput
}

input StatementCreateWithoutUserInput {
  id: ID
  text: String
  forum: ForumCreateOneWithoutStatementsInput
}

type StatementEdge {
  node: Statement!
  cursor: String!
}

enum StatementOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StatementPreviousValues {
  id: ID!
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StatementScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StatementScalarWhereInput!]
  OR: [StatementScalarWhereInput!]
  NOT: [StatementScalarWhereInput!]
}

type StatementSubscriptionPayload {
  mutation: MutationType!
  node: Statement
  updatedFields: [String!]
  previousValues: StatementPreviousValues
}

input StatementSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StatementWhereInput
  AND: [StatementSubscriptionWhereInput!]
  OR: [StatementSubscriptionWhereInput!]
  NOT: [StatementSubscriptionWhereInput!]
}

input StatementUpdateInput {
  text: String
  forum: ForumUpdateOneWithoutStatementsInput
  user: UserUpdateOneWithoutStatementsInput
}

input StatementUpdateManyDataInput {
  text: String
}

input StatementUpdateManyMutationInput {
  text: String
}

input StatementUpdateManyWithoutForumInput {
  create: [StatementCreateWithoutForumInput!]
  delete: [StatementWhereUniqueInput!]
  connect: [StatementWhereUniqueInput!]
  set: [StatementWhereUniqueInput!]
  disconnect: [StatementWhereUniqueInput!]
  update: [StatementUpdateWithWhereUniqueWithoutForumInput!]
  upsert: [StatementUpsertWithWhereUniqueWithoutForumInput!]
  deleteMany: [StatementScalarWhereInput!]
  updateMany: [StatementUpdateManyWithWhereNestedInput!]
}

input StatementUpdateManyWithoutUserInput {
  create: [StatementCreateWithoutUserInput!]
  delete: [StatementWhereUniqueInput!]
  connect: [StatementWhereUniqueInput!]
  set: [StatementWhereUniqueInput!]
  disconnect: [StatementWhereUniqueInput!]
  update: [StatementUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [StatementUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [StatementScalarWhereInput!]
  updateMany: [StatementUpdateManyWithWhereNestedInput!]
}

input StatementUpdateManyWithWhereNestedInput {
  where: StatementScalarWhereInput!
  data: StatementUpdateManyDataInput!
}

input StatementUpdateWithoutForumDataInput {
  text: String
  user: UserUpdateOneWithoutStatementsInput
}

input StatementUpdateWithoutUserDataInput {
  text: String
  forum: ForumUpdateOneWithoutStatementsInput
}

input StatementUpdateWithWhereUniqueWithoutForumInput {
  where: StatementWhereUniqueInput!
  data: StatementUpdateWithoutForumDataInput!
}

input StatementUpdateWithWhereUniqueWithoutUserInput {
  where: StatementWhereUniqueInput!
  data: StatementUpdateWithoutUserDataInput!
}

input StatementUpsertWithWhereUniqueWithoutForumInput {
  where: StatementWhereUniqueInput!
  update: StatementUpdateWithoutForumDataInput!
  create: StatementCreateWithoutForumInput!
}

input StatementUpsertWithWhereUniqueWithoutUserInput {
  where: StatementWhereUniqueInput!
  update: StatementUpdateWithoutUserDataInput!
  create: StatementCreateWithoutUserInput!
}

input StatementWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  forum: ForumWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [StatementWhereInput!]
  OR: [StatementWhereInput!]
  NOT: [StatementWhereInput!]
}

input StatementWhereUniqueInput {
  id: ID
}

enum Status {
  STUDENT
  LAWYER
  AUTHOR
  SAVVY_AUTHOR
  HR
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  careerTrack(where: CareerTrackSubscriptionWhereInput): CareerTrackSubscriptionPayload
  careerTrackUnit(where: CareerTrackUnitSubscriptionWhereInput): CareerTrackUnitSubscriptionPayload
  challengeResult(where: ChallengeResultSubscriptionWhereInput): ChallengeResultSubscriptionPayload
  clause(where: ClauseSubscriptionWhereInput): ClauseSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  construction(where: ConstructionSubscriptionWhereInput): ConstructionSubscriptionPayload
  constructionResult(where: ConstructionResultSubscriptionWhereInput): ConstructionResultSubscriptionPayload
  coursePage(where: CoursePageSubscriptionWhereInput): CoursePageSubscriptionPayload
  courseVisit(where: CourseVisitSubscriptionWhereInput): CourseVisitSubscriptionPayload
  document(where: DocumentSubscriptionWhereInput): DocumentSubscriptionPayload
  documentResult(where: DocumentResultSubscriptionWhereInput): DocumentResultSubscriptionPayload
  feedback(where: FeedbackSubscriptionWhereInput): FeedbackSubscriptionPayload
  forum(where: ForumSubscriptionWhereInput): ForumSubscriptionPayload
  legalPortfolio(where: LegalPortfolioSubscriptionWhereInput): LegalPortfolioSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  lessonResult(where: LessonResultSubscriptionWhereInput): LessonResultSubscriptionPayload
  newTest(where: NewTestSubscriptionWhereInput): NewTestSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  problemResult(where: ProblemResultSubscriptionWhereInput): ProblemResultSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  quizResult(where: QuizResultSubscriptionWhereInput): QuizResultSubscriptionPayload
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
  shot(where: ShotSubscriptionWhereInput): ShotSubscriptionPayload
  shotResult(where: ShotResultSubscriptionWhereInput): ShotResultSubscriptionPayload
  statement(where: StatementSubscriptionWhereInput): StatementSubscriptionPayload
  testResult(where: TestResultSubscriptionWhereInput): TestResultSubscriptionPayload
  textEditor(where: TextEditorSubscriptionWhereInput): TextEditorSubscriptionPayload
  textEditorResult(where: TextEditorResultSubscriptionWhereInput): TextEditorResultSubscriptionPayload
  uni(where: UniSubscriptionWhereInput): UniSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userLevel(where: UserLevelSubscriptionWhereInput): UserLevelSubscriptionPayload
}

enum TaskType {
  TEST
  FORM
}

type TestResult {
  id: ID!
  student: User!
  answer: String
  attempts: Int
  lesson: Lesson
  lessonID: ID
  test: NewTest
  testID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TestResultConnection {
  pageInfo: PageInfo!
  edges: [TestResultEdge]!
  aggregate: AggregateTestResult!
}

input TestResultCreateInput {
  id: ID
  student: UserCreateOneWithoutTestResultsInput!
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutTestResultsInput
  lessonID: ID
  test: NewTestCreateOneWithoutTestResultsInput
  testID: ID
}

input TestResultCreateManyWithoutLessonInput {
  create: [TestResultCreateWithoutLessonInput!]
  connect: [TestResultWhereUniqueInput!]
}

input TestResultCreateManyWithoutStudentInput {
  create: [TestResultCreateWithoutStudentInput!]
  connect: [TestResultWhereUniqueInput!]
}

input TestResultCreateManyWithoutTestInput {
  create: [TestResultCreateWithoutTestInput!]
  connect: [TestResultWhereUniqueInput!]
}

input TestResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutTestResultsInput!
  answer: String
  attempts: Int
  lessonID: ID
  test: NewTestCreateOneWithoutTestResultsInput
  testID: ID
}

input TestResultCreateWithoutStudentInput {
  id: ID
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutTestResultsInput
  lessonID: ID
  test: NewTestCreateOneWithoutTestResultsInput
  testID: ID
}

input TestResultCreateWithoutTestInput {
  id: ID
  student: UserCreateOneWithoutTestResultsInput!
  answer: String
  attempts: Int
  lesson: LessonCreateOneWithoutTestResultsInput
  lessonID: ID
  testID: ID
}

type TestResultEdge {
  node: TestResult!
  cursor: String!
}

enum TestResultOrderByInput {
  id_ASC
  id_DESC
  answer_ASC
  answer_DESC
  attempts_ASC
  attempts_DESC
  lessonID_ASC
  lessonID_DESC
  testID_ASC
  testID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TestResultPreviousValues {
  id: ID!
  answer: String
  attempts: Int
  lessonID: ID
  testID: ID
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TestResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  testID: ID
  testID_not: ID
  testID_in: [ID!]
  testID_not_in: [ID!]
  testID_lt: ID
  testID_lte: ID
  testID_gt: ID
  testID_gte: ID
  testID_contains: ID
  testID_not_contains: ID
  testID_starts_with: ID
  testID_not_starts_with: ID
  testID_ends_with: ID
  testID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TestResultScalarWhereInput!]
  OR: [TestResultScalarWhereInput!]
  NOT: [TestResultScalarWhereInput!]
}

type TestResultSubscriptionPayload {
  mutation: MutationType!
  node: TestResult
  updatedFields: [String!]
  previousValues: TestResultPreviousValues
}

input TestResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestResultWhereInput
  AND: [TestResultSubscriptionWhereInput!]
  OR: [TestResultSubscriptionWhereInput!]
  NOT: [TestResultSubscriptionWhereInput!]
}

input TestResultUpdateInput {
  student: UserUpdateOneRequiredWithoutTestResultsInput
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutTestResultsInput
  lessonID: ID
  test: NewTestUpdateOneWithoutTestResultsInput
  testID: ID
}

input TestResultUpdateManyDataInput {
  answer: String
  attempts: Int
  lessonID: ID
  testID: ID
}

input TestResultUpdateManyMutationInput {
  answer: String
  attempts: Int
  lessonID: ID
  testID: ID
}

input TestResultUpdateManyWithoutLessonInput {
  create: [TestResultCreateWithoutLessonInput!]
  delete: [TestResultWhereUniqueInput!]
  connect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  disconnect: [TestResultWhereUniqueInput!]
  update: [TestResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TestResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TestResultScalarWhereInput!]
  updateMany: [TestResultUpdateManyWithWhereNestedInput!]
}

input TestResultUpdateManyWithoutStudentInput {
  create: [TestResultCreateWithoutStudentInput!]
  delete: [TestResultWhereUniqueInput!]
  connect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  disconnect: [TestResultWhereUniqueInput!]
  update: [TestResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [TestResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [TestResultScalarWhereInput!]
  updateMany: [TestResultUpdateManyWithWhereNestedInput!]
}

input TestResultUpdateManyWithoutTestInput {
  create: [TestResultCreateWithoutTestInput!]
  delete: [TestResultWhereUniqueInput!]
  connect: [TestResultWhereUniqueInput!]
  set: [TestResultWhereUniqueInput!]
  disconnect: [TestResultWhereUniqueInput!]
  update: [TestResultUpdateWithWhereUniqueWithoutTestInput!]
  upsert: [TestResultUpsertWithWhereUniqueWithoutTestInput!]
  deleteMany: [TestResultScalarWhereInput!]
  updateMany: [TestResultUpdateManyWithWhereNestedInput!]
}

input TestResultUpdateManyWithWhereNestedInput {
  where: TestResultScalarWhereInput!
  data: TestResultUpdateManyDataInput!
}

input TestResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutTestResultsInput
  answer: String
  attempts: Int
  lessonID: ID
  test: NewTestUpdateOneWithoutTestResultsInput
  testID: ID
}

input TestResultUpdateWithoutStudentDataInput {
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutTestResultsInput
  lessonID: ID
  test: NewTestUpdateOneWithoutTestResultsInput
  testID: ID
}

input TestResultUpdateWithoutTestDataInput {
  student: UserUpdateOneRequiredWithoutTestResultsInput
  answer: String
  attempts: Int
  lesson: LessonUpdateOneWithoutTestResultsInput
  lessonID: ID
  testID: ID
}

input TestResultUpdateWithWhereUniqueWithoutLessonInput {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateWithoutLessonDataInput!
}

input TestResultUpdateWithWhereUniqueWithoutStudentInput {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateWithoutStudentDataInput!
}

input TestResultUpdateWithWhereUniqueWithoutTestInput {
  where: TestResultWhereUniqueInput!
  data: TestResultUpdateWithoutTestDataInput!
}

input TestResultUpsertWithWhereUniqueWithoutLessonInput {
  where: TestResultWhereUniqueInput!
  update: TestResultUpdateWithoutLessonDataInput!
  create: TestResultCreateWithoutLessonInput!
}

input TestResultUpsertWithWhereUniqueWithoutStudentInput {
  where: TestResultWhereUniqueInput!
  update: TestResultUpdateWithoutStudentDataInput!
  create: TestResultCreateWithoutStudentInput!
}

input TestResultUpsertWithWhereUniqueWithoutTestInput {
  where: TestResultWhereUniqueInput!
  update: TestResultUpdateWithoutTestDataInput!
  create: TestResultCreateWithoutTestInput!
}

input TestResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  test: NewTestWhereInput
  testID: ID
  testID_not: ID
  testID_in: [ID!]
  testID_not_in: [ID!]
  testID_lt: ID
  testID_lte: ID
  testID_gt: ID
  testID_gte: ID
  testID_contains: ID
  testID_not_contains: ID
  testID_starts_with: ID
  testID_not_starts_with: ID
  testID_ends_with: ID
  testID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TestResultWhereInput!]
  OR: [TestResultWhereInput!]
  NOT: [TestResultWhereInput!]
}

input TestResultWhereUniqueInput {
  id: ID
}

type TextEditor {
  id: ID!
  name: String!
  text: String!
  totalMistakes: Int
  user: User!
  lesson: Lesson!
  lessonID: ID!
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorConnection {
  pageInfo: PageInfo!
  edges: [TextEditorEdge]!
  aggregate: AggregateTextEditor!
}

input TextEditorCreateInput {
  id: ID
  name: String!
  text: String!
  totalMistakes: Int
  user: UserCreateOneWithoutTextEditorInput!
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
  textEditorResults: TextEditorResultCreateManyWithoutTextEditorInput
}

input TextEditorCreateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  connect: [TextEditorWhereUniqueInput!]
}

input TextEditorCreateOneWithoutTextEditorResultsInput {
  create: TextEditorCreateWithoutTextEditorResultsInput
  connect: TextEditorWhereUniqueInput
}

input TextEditorCreateWithoutLessonInput {
  id: ID
  name: String!
  text: String!
  totalMistakes: Int
  user: UserCreateOneWithoutTextEditorInput!
  lessonID: ID!
  textEditorResults: TextEditorResultCreateManyWithoutTextEditorInput
}

input TextEditorCreateWithoutTextEditorResultsInput {
  id: ID
  name: String!
  text: String!
  totalMistakes: Int
  user: UserCreateOneWithoutTextEditorInput!
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
}

input TextEditorCreateWithoutUserInput {
  id: ID
  name: String!
  text: String!
  totalMistakes: Int
  lesson: LessonCreateOneWithoutTexteditorsInput!
  lessonID: ID!
  textEditorResults: TextEditorResultCreateManyWithoutTextEditorInput
}

type TextEditorEdge {
  node: TextEditor!
  cursor: String!
}

enum TextEditorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  text_ASC
  text_DESC
  totalMistakes_ASC
  totalMistakes_DESC
  lessonID_ASC
  lessonID_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextEditorPreviousValues {
  id: ID!
  name: String!
  text: String!
  totalMistakes: Int
  lessonID: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorResult {
  id: ID!
  student: User!
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  lesson: Lesson
  textEditor: TextEditor
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextEditorResultConnection {
  pageInfo: PageInfo!
  edges: [TextEditorResultEdge]!
  aggregate: AggregateTextEditorResult!
}

input TextEditorResultCreateInput {
  id: ID
  student: UserCreateOneWithoutTextEditorResultsInput!
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  lesson: LessonCreateOneWithoutTextEditorResultsInput
  textEditor: TextEditorCreateOneWithoutTextEditorResultsInput
}

input TextEditorResultCreateManyWithoutLessonInput {
  create: [TextEditorResultCreateWithoutLessonInput!]
  connect: [TextEditorResultWhereUniqueInput!]
}

input TextEditorResultCreateManyWithoutStudentInput {
  create: [TextEditorResultCreateWithoutStudentInput!]
  connect: [TextEditorResultWhereUniqueInput!]
}

input TextEditorResultCreateManyWithoutTextEditorInput {
  create: [TextEditorResultCreateWithoutTextEditorInput!]
  connect: [TextEditorResultWhereUniqueInput!]
}

input TextEditorResultCreateWithoutLessonInput {
  id: ID
  student: UserCreateOneWithoutTextEditorResultsInput!
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  textEditor: TextEditorCreateOneWithoutTextEditorResultsInput
}

input TextEditorResultCreateWithoutStudentInput {
  id: ID
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  lesson: LessonCreateOneWithoutTextEditorResultsInput
  textEditor: TextEditorCreateOneWithoutTextEditorResultsInput
}

input TextEditorResultCreateWithoutTextEditorInput {
  id: ID
  student: UserCreateOneWithoutTextEditorResultsInput!
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  lesson: LessonCreateOneWithoutTextEditorResultsInput
}

type TextEditorResultEdge {
  node: TextEditorResult!
  cursor: String!
}

enum TextEditorResultOrderByInput {
  id_ASC
  id_DESC
  attempts_ASC
  attempts_DESC
  wrong_ASC
  wrong_DESC
  correct_ASC
  correct_DESC
  guess_ASC
  guess_DESC
  result_ASC
  result_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextEditorResultPreviousValues {
  id: ID!
  attempts: Int
  wrong: String!
  correct: String!
  guess: String!
  result: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TextEditorResultScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  wrong: String
  wrong_not: String
  wrong_in: [String!]
  wrong_not_in: [String!]
  wrong_lt: String
  wrong_lte: String
  wrong_gt: String
  wrong_gte: String
  wrong_contains: String
  wrong_not_contains: String
  wrong_starts_with: String
  wrong_not_starts_with: String
  wrong_ends_with: String
  wrong_not_ends_with: String
  correct: String
  correct_not: String
  correct_in: [String!]
  correct_not_in: [String!]
  correct_lt: String
  correct_lte: String
  correct_gt: String
  correct_gte: String
  correct_contains: String
  correct_not_contains: String
  correct_starts_with: String
  correct_not_starts_with: String
  correct_ends_with: String
  correct_not_ends_with: String
  guess: String
  guess_not: String
  guess_in: [String!]
  guess_not_in: [String!]
  guess_lt: String
  guess_lte: String
  guess_gt: String
  guess_gte: String
  guess_contains: String
  guess_not_contains: String
  guess_starts_with: String
  guess_not_starts_with: String
  guess_ends_with: String
  guess_not_ends_with: String
  result: Boolean
  result_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorResultScalarWhereInput!]
  OR: [TextEditorResultScalarWhereInput!]
  NOT: [TextEditorResultScalarWhereInput!]
}

type TextEditorResultSubscriptionPayload {
  mutation: MutationType!
  node: TextEditorResult
  updatedFields: [String!]
  previousValues: TextEditorResultPreviousValues
}

input TextEditorResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextEditorResultWhereInput
  AND: [TextEditorResultSubscriptionWhereInput!]
  OR: [TextEditorResultSubscriptionWhereInput!]
  NOT: [TextEditorResultSubscriptionWhereInput!]
}

input TextEditorResultUpdateInput {
  student: UserUpdateOneRequiredWithoutTextEditorResultsInput
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
  lesson: LessonUpdateOneWithoutTextEditorResultsInput
  textEditor: TextEditorUpdateOneWithoutTextEditorResultsInput
}

input TextEditorResultUpdateManyDataInput {
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
}

input TextEditorResultUpdateManyMutationInput {
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
}

input TextEditorResultUpdateManyWithoutLessonInput {
  create: [TextEditorResultCreateWithoutLessonInput!]
  delete: [TextEditorResultWhereUniqueInput!]
  connect: [TextEditorResultWhereUniqueInput!]
  set: [TextEditorResultWhereUniqueInput!]
  disconnect: [TextEditorResultWhereUniqueInput!]
  update: [TextEditorResultUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TextEditorResultUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TextEditorResultScalarWhereInput!]
  updateMany: [TextEditorResultUpdateManyWithWhereNestedInput!]
}

input TextEditorResultUpdateManyWithoutStudentInput {
  create: [TextEditorResultCreateWithoutStudentInput!]
  delete: [TextEditorResultWhereUniqueInput!]
  connect: [TextEditorResultWhereUniqueInput!]
  set: [TextEditorResultWhereUniqueInput!]
  disconnect: [TextEditorResultWhereUniqueInput!]
  update: [TextEditorResultUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [TextEditorResultUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [TextEditorResultScalarWhereInput!]
  updateMany: [TextEditorResultUpdateManyWithWhereNestedInput!]
}

input TextEditorResultUpdateManyWithoutTextEditorInput {
  create: [TextEditorResultCreateWithoutTextEditorInput!]
  delete: [TextEditorResultWhereUniqueInput!]
  connect: [TextEditorResultWhereUniqueInput!]
  set: [TextEditorResultWhereUniqueInput!]
  disconnect: [TextEditorResultWhereUniqueInput!]
  update: [TextEditorResultUpdateWithWhereUniqueWithoutTextEditorInput!]
  upsert: [TextEditorResultUpsertWithWhereUniqueWithoutTextEditorInput!]
  deleteMany: [TextEditorResultScalarWhereInput!]
  updateMany: [TextEditorResultUpdateManyWithWhereNestedInput!]
}

input TextEditorResultUpdateManyWithWhereNestedInput {
  where: TextEditorResultScalarWhereInput!
  data: TextEditorResultUpdateManyDataInput!
}

input TextEditorResultUpdateWithoutLessonDataInput {
  student: UserUpdateOneRequiredWithoutTextEditorResultsInput
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
  textEditor: TextEditorUpdateOneWithoutTextEditorResultsInput
}

input TextEditorResultUpdateWithoutStudentDataInput {
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
  lesson: LessonUpdateOneWithoutTextEditorResultsInput
  textEditor: TextEditorUpdateOneWithoutTextEditorResultsInput
}

input TextEditorResultUpdateWithoutTextEditorDataInput {
  student: UserUpdateOneRequiredWithoutTextEditorResultsInput
  attempts: Int
  wrong: String
  correct: String
  guess: String
  result: Boolean
  lesson: LessonUpdateOneWithoutTextEditorResultsInput
}

input TextEditorResultUpdateWithWhereUniqueWithoutLessonInput {
  where: TextEditorResultWhereUniqueInput!
  data: TextEditorResultUpdateWithoutLessonDataInput!
}

input TextEditorResultUpdateWithWhereUniqueWithoutStudentInput {
  where: TextEditorResultWhereUniqueInput!
  data: TextEditorResultUpdateWithoutStudentDataInput!
}

input TextEditorResultUpdateWithWhereUniqueWithoutTextEditorInput {
  where: TextEditorResultWhereUniqueInput!
  data: TextEditorResultUpdateWithoutTextEditorDataInput!
}

input TextEditorResultUpsertWithWhereUniqueWithoutLessonInput {
  where: TextEditorResultWhereUniqueInput!
  update: TextEditorResultUpdateWithoutLessonDataInput!
  create: TextEditorResultCreateWithoutLessonInput!
}

input TextEditorResultUpsertWithWhereUniqueWithoutStudentInput {
  where: TextEditorResultWhereUniqueInput!
  update: TextEditorResultUpdateWithoutStudentDataInput!
  create: TextEditorResultCreateWithoutStudentInput!
}

input TextEditorResultUpsertWithWhereUniqueWithoutTextEditorInput {
  where: TextEditorResultWhereUniqueInput!
  update: TextEditorResultUpdateWithoutTextEditorDataInput!
  create: TextEditorResultCreateWithoutTextEditorInput!
}

input TextEditorResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: UserWhereInput
  attempts: Int
  attempts_not: Int
  attempts_in: [Int!]
  attempts_not_in: [Int!]
  attempts_lt: Int
  attempts_lte: Int
  attempts_gt: Int
  attempts_gte: Int
  wrong: String
  wrong_not: String
  wrong_in: [String!]
  wrong_not_in: [String!]
  wrong_lt: String
  wrong_lte: String
  wrong_gt: String
  wrong_gte: String
  wrong_contains: String
  wrong_not_contains: String
  wrong_starts_with: String
  wrong_not_starts_with: String
  wrong_ends_with: String
  wrong_not_ends_with: String
  correct: String
  correct_not: String
  correct_in: [String!]
  correct_not_in: [String!]
  correct_lt: String
  correct_lte: String
  correct_gt: String
  correct_gte: String
  correct_contains: String
  correct_not_contains: String
  correct_starts_with: String
  correct_not_starts_with: String
  correct_ends_with: String
  correct_not_ends_with: String
  guess: String
  guess_not: String
  guess_in: [String!]
  guess_not_in: [String!]
  guess_lt: String
  guess_lte: String
  guess_gt: String
  guess_gte: String
  guess_contains: String
  guess_not_contains: String
  guess_starts_with: String
  guess_not_starts_with: String
  guess_ends_with: String
  guess_not_ends_with: String
  result: Boolean
  result_not: Boolean
  lesson: LessonWhereInput
  textEditor: TextEditorWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorResultWhereInput!]
  OR: [TextEditorResultWhereInput!]
  NOT: [TextEditorResultWhereInput!]
}

input TextEditorResultWhereUniqueInput {
  id: ID
}

input TextEditorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  totalMistakes: Int
  totalMistakes_not: Int
  totalMistakes_in: [Int!]
  totalMistakes_not_in: [Int!]
  totalMistakes_lt: Int
  totalMistakes_lte: Int
  totalMistakes_gt: Int
  totalMistakes_gte: Int
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorScalarWhereInput!]
  OR: [TextEditorScalarWhereInput!]
  NOT: [TextEditorScalarWhereInput!]
}

type TextEditorSubscriptionPayload {
  mutation: MutationType!
  node: TextEditor
  updatedFields: [String!]
  previousValues: TextEditorPreviousValues
}

input TextEditorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextEditorWhereInput
  AND: [TextEditorSubscriptionWhereInput!]
  OR: [TextEditorSubscriptionWhereInput!]
  NOT: [TextEditorSubscriptionWhereInput!]
}

input TextEditorUpdateInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
  textEditorResults: TextEditorResultUpdateManyWithoutTextEditorInput
}

input TextEditorUpdateManyDataInput {
  name: String
  text: String
  totalMistakes: Int
  lessonID: ID
}

input TextEditorUpdateManyMutationInput {
  name: String
  text: String
  totalMistakes: Int
  lessonID: ID
}

input TextEditorUpdateManyWithoutLessonInput {
  create: [TextEditorCreateWithoutLessonInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  set: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutLessonInput!]
  deleteMany: [TextEditorScalarWhereInput!]
  updateMany: [TextEditorUpdateManyWithWhereNestedInput!]
}

input TextEditorUpdateManyWithoutUserInput {
  create: [TextEditorCreateWithoutUserInput!]
  delete: [TextEditorWhereUniqueInput!]
  connect: [TextEditorWhereUniqueInput!]
  set: [TextEditorWhereUniqueInput!]
  disconnect: [TextEditorWhereUniqueInput!]
  update: [TextEditorUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TextEditorUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TextEditorScalarWhereInput!]
  updateMany: [TextEditorUpdateManyWithWhereNestedInput!]
}

input TextEditorUpdateManyWithWhereNestedInput {
  where: TextEditorScalarWhereInput!
  data: TextEditorUpdateManyDataInput!
}

input TextEditorUpdateOneWithoutTextEditorResultsInput {
  create: TextEditorCreateWithoutTextEditorResultsInput
  update: TextEditorUpdateWithoutTextEditorResultsDataInput
  upsert: TextEditorUpsertWithoutTextEditorResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: TextEditorWhereUniqueInput
}

input TextEditorUpdateWithoutLessonDataInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lessonID: ID
  textEditorResults: TextEditorResultUpdateManyWithoutTextEditorInput
}

input TextEditorUpdateWithoutTextEditorResultsDataInput {
  name: String
  text: String
  totalMistakes: Int
  user: UserUpdateOneRequiredWithoutTextEditorInput
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
}

input TextEditorUpdateWithoutUserDataInput {
  name: String
  text: String
  totalMistakes: Int
  lesson: LessonUpdateOneRequiredWithoutTexteditorsInput
  lessonID: ID
  textEditorResults: TextEditorResultUpdateManyWithoutTextEditorInput
}

input TextEditorUpdateWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutLessonDataInput!
}

input TextEditorUpdateWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  data: TextEditorUpdateWithoutUserDataInput!
}

input TextEditorUpsertWithoutTextEditorResultsInput {
  update: TextEditorUpdateWithoutTextEditorResultsDataInput!
  create: TextEditorCreateWithoutTextEditorResultsInput!
}

input TextEditorUpsertWithWhereUniqueWithoutLessonInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutLessonDataInput!
  create: TextEditorCreateWithoutLessonInput!
}

input TextEditorUpsertWithWhereUniqueWithoutUserInput {
  where: TextEditorWhereUniqueInput!
  update: TextEditorUpdateWithoutUserDataInput!
  create: TextEditorCreateWithoutUserInput!
}

input TextEditorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  totalMistakes: Int
  totalMistakes_not: Int
  totalMistakes_in: [Int!]
  totalMistakes_not_in: [Int!]
  totalMistakes_lt: Int
  totalMistakes_lte: Int
  totalMistakes_gt: Int
  totalMistakes_gte: Int
  user: UserWhereInput
  lesson: LessonWhereInput
  lessonID: ID
  lessonID_not: ID
  lessonID_in: [ID!]
  lessonID_not_in: [ID!]
  lessonID_lt: ID
  lessonID_lte: ID
  lessonID_gt: ID
  lessonID_gte: ID
  lessonID_contains: ID
  lessonID_not_contains: ID
  lessonID_starts_with: ID
  lessonID_not_starts_with: ID
  lessonID_ends_with: ID
  lessonID_not_ends_with: ID
  textEditorResults_every: TextEditorResultWhereInput
  textEditorResults_some: TextEditorResultWhereInput
  textEditorResults_none: TextEditorResultWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextEditorWhereInput!]
  OR: [TextEditorWhereInput!]
  NOT: [TextEditorWhereInput!]
}

input TextEditorWhereUniqueInput {
  id: ID
}

enum Type {
  STORY
  REGULAR
  CHALLENGE
}

type Uni {
  id: ID!
  title: String!
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  capacity: Int
  paidMonths: Int
  uniCoursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UniConnection {
  pageInfo: PageInfo!
  edges: [UniEdge]!
  aggregate: AggregateUni!
}

input UniCreateInput {
  id: ID
  title: String!
  teachers: UserCreateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageCreateManyWithoutUniInput
}

input UniCreateOneWithoutTeachersInput {
  create: UniCreateWithoutTeachersInput
  connect: UniWhereUniqueInput
}

input UniCreateOneWithoutUniCoursePagesInput {
  create: UniCreateWithoutUniCoursePagesInput
  connect: UniWhereUniqueInput
}

input UniCreateWithoutTeachersInput {
  id: ID
  title: String!
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageCreateManyWithoutUniInput
}

input UniCreateWithoutUniCoursePagesInput {
  id: ID
  title: String!
  teachers: UserCreateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
}

type UniEdge {
  node: Uni!
  cursor: String!
}

enum UniOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  capacity_ASC
  capacity_DESC
  paidMonths_ASC
  paidMonths_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UniPreviousValues {
  id: ID!
  title: String!
  capacity: Int
  paidMonths: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UniSubscriptionPayload {
  mutation: MutationType!
  node: Uni
  updatedFields: [String!]
  previousValues: UniPreviousValues
}

input UniSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UniWhereInput
  AND: [UniSubscriptionWhereInput!]
  OR: [UniSubscriptionWhereInput!]
  NOT: [UniSubscriptionWhereInput!]
}

input UniUpdateInput {
  title: String
  teachers: UserUpdateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageUpdateManyWithoutUniInput
}

input UniUpdateManyMutationInput {
  title: String
  capacity: Int
  paidMonths: Int
}

input UniUpdateOneWithoutTeachersInput {
  create: UniCreateWithoutTeachersInput
  update: UniUpdateWithoutTeachersDataInput
  upsert: UniUpsertWithoutTeachersInput
  delete: Boolean
  disconnect: Boolean
  connect: UniWhereUniqueInput
}

input UniUpdateOneWithoutUniCoursePagesInput {
  create: UniCreateWithoutUniCoursePagesInput
  update: UniUpdateWithoutUniCoursePagesDataInput
  upsert: UniUpsertWithoutUniCoursePagesInput
  delete: Boolean
  disconnect: Boolean
  connect: UniWhereUniqueInput
}

input UniUpdateWithoutTeachersDataInput {
  title: String
  capacity: Int
  paidMonths: Int
  uniCoursePages: CoursePageUpdateManyWithoutUniInput
}

input UniUpdateWithoutUniCoursePagesDataInput {
  title: String
  teachers: UserUpdateManyWithoutUniInput
  capacity: Int
  paidMonths: Int
}

input UniUpsertWithoutTeachersInput {
  update: UniUpdateWithoutTeachersDataInput!
  create: UniCreateWithoutTeachersInput!
}

input UniUpsertWithoutUniCoursePagesInput {
  update: UniUpdateWithoutUniCoursePagesDataInput!
  create: UniCreateWithoutUniCoursePagesInput!
}

input UniWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  capacity: Int
  capacity_not: Int
  capacity_in: [Int!]
  capacity_not_in: [Int!]
  capacity_lt: Int
  capacity_lte: Int
  capacity_gt: Int
  capacity_gte: Int
  paidMonths: Int
  paidMonths_not: Int
  paidMonths_in: [Int!]
  paidMonths_not_in: [Int!]
  paidMonths_lt: Int
  paidMonths_lte: Int
  paidMonths_gt: Int
  paidMonths_gte: Int
  uniCoursePages_every: CoursePageWhereInput
  uniCoursePages_some: CoursePageWhereInput
  uniCoursePages_none: CoursePageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UniWhereInput!]
  OR: [UniWhereInput!]
  NOT: [UniWhereInput!]
}

input UniWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolio
  uni: Uni
  company: Company
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrack
  careerTrackID: ID
  favourites: [ID!]!
  subjects: [ID!]!
  new_subjects(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  permissions: [Permission!]!
  coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  co_coursePages(where: CoursePageWhereInput, orderBy: CoursePageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CoursePage!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  newTests(where: NewTestWhereInput, orderBy: NewTestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewTest!]
  quizes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  lessonResults(where: LessonResultWhereInput, orderBy: LessonResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LessonResult!]
  testResults(where: TestResultWhereInput, orderBy: TestResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestResult!]
  quizResults(where: QuizResultWhereInput, orderBy: QuizResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizResult!]
  problemResults(where: ProblemResultWhereInput, orderBy: ProblemResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemResult!]
  textEditorResults(where: TextEditorResultWhereInput, orderBy: TextEditorResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditorResult!]
  constructionResults(where: ConstructionResultWhereInput, orderBy: ConstructionResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConstructionResult!]
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  construction(where: ConstructionWhereInput, orderBy: ConstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Construction!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  textEditor(where: TextEditorWhereInput, orderBy: TextEditorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextEditor!]
  isFamiliar: Boolean!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  shots(where: ShotWhereInput, orderBy: ShotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shot!]
  shotResults(where: ShotResultWhereInput, orderBy: ShotResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShotResult!]
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  teacherFeedback(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  studentFeedback(where: FeedbackWhereInput, orderBy: FeedbackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feedback!]
  forums(where: ForumWhereInput, orderBy: ForumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Forum!]
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement!]
  courseVisits(where: CourseVisitWhereInput, orderBy: CourseVisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseVisit!]
  documents(where: DocumentWhereInput, orderBy: DocumentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Document!]
  documentResults(where: DocumentResultWhereInput, orderBy: DocumentResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DocumentResult!]
  clauses(where: ClauseWhereInput, orderBy: ClauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clause!]
  challengeResults(where: ChallengeResultWhereInput, orderBy: ChallengeResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeResult!]
  level: UserLevel
  interests: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefavouritesInput {
  set: [ID!]
}

input UserCreateInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateinterestsInput {
  set: [String!]
}

input UserCreateManyWithoutCo_coursePagesInput {
  create: [UserCreateWithoutCo_coursePagesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutNew_subjectsInput {
  create: [UserCreateWithoutNew_subjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUniInput {
  create: [UserCreateWithoutUniInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCareerTrackInput {
  create: UserCreateWithoutCareerTrackInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengeResultsInput {
  create: UserCreateWithoutChallengeResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutClausesInput {
  create: UserCreateWithoutClausesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConstructionResultsInput {
  create: UserCreateWithoutConstructionResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCourseVisitsInput {
  create: UserCreateWithoutCourseVisitsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDocumentResultsInput {
  create: UserCreateWithoutDocumentResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDocumentsInput {
  create: UserCreateWithoutDocumentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutForumsInput {
  create: UserCreateWithoutForumsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLegalPortfolioInput {
  create: UserCreateWithoutLegalPortfolioInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonResultsInput {
  create: UserCreateWithoutLessonResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLevelInput {
  create: UserCreateWithoutLevelInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewTestsInput {
  create: UserCreateWithoutNewTestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProblemResultsInput {
  create: UserCreateWithoutProblemResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuizesInput {
  create: UserCreateWithoutQuizesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuizResultsInput {
  create: UserCreateWithoutQuizResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRatingsInput {
  create: UserCreateWithoutRatingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutShotResultsInput {
  create: UserCreateWithoutShotResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutShotsInput {
  create: UserCreateWithoutShotsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStatementsInput {
  create: UserCreateWithoutStatementsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStudentFeedbackInput {
  create: UserCreateWithoutStudentFeedbackInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTeacherFeedbackInput {
  create: UserCreateWithoutTeacherFeedbackInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestResultsInput {
  create: UserCreateWithoutTestResultsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTextEditorResultsInput {
  create: UserCreateWithoutTextEditorResultsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreatesubjectsInput {
  set: [ID!]
}

input UserCreateWithoutCareerTrackInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutChallengeResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutClausesInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutCo_coursePagesInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutCompanyInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutConstructionInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutConstructionResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutCoursePagesInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutCourseVisitsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutDocumentResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutDocumentsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutForumsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutLegalPortfolioInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutLessonResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutLessonsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutLevelInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutNew_subjectsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutNewTestsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutNotesInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutOrdersInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutProblemResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutProblemsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutQuizesInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutQuizResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutRatingsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutShotResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutShotsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutStatementsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutStudentFeedbackInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutTeacherFeedbackInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutTestResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutTextEditorInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutTextEditorResultsInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  uni: UniCreateOneWithoutTeachersInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

input UserCreateWithoutUniInput {
  id: ID
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioCreateOneWithoutUserInput
  company: CompanyCreateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackCreateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserCreatefavouritesInput
  subjects: UserCreatesubjectsInput
  new_subjects: CoursePageCreateManyWithoutNew_studentsInput
  permissions: UserCreatepermissionsInput
  coursePages: CoursePageCreateManyWithoutUserInput
  co_coursePages: CoursePageCreateManyWithoutAuthorsInput
  lessons: LessonCreateManyWithoutUserInput
  newTests: NewTestCreateManyWithoutUserInput
  quizes: QuizCreateManyWithoutUserInput
  lessonResults: LessonResultCreateManyWithoutStudentInput
  testResults: TestResultCreateManyWithoutStudentInput
  quizResults: QuizResultCreateManyWithoutStudentInput
  problemResults: ProblemResultCreateManyWithoutStudentInput
  textEditorResults: TextEditorResultCreateManyWithoutStudentInput
  constructionResults: ConstructionResultCreateManyWithoutStudentInput
  problems: ProblemCreateManyWithoutUserInput
  construction: ConstructionCreateManyWithoutUserInput
  orders: OrderCreateManyWithoutUserInput
  textEditor: TextEditorCreateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostCreateManyWithoutUserInput
  shots: ShotCreateManyWithoutUserInput
  shotResults: ShotResultCreateManyWithoutStudentInput
  notes: NoteCreateManyWithoutUserInput
  teacherFeedback: FeedbackCreateManyWithoutTeacherInput
  studentFeedback: FeedbackCreateManyWithoutStudentInput
  forums: ForumCreateManyWithoutUserInput
  ratings: RatingCreateManyWithoutUserInput
  statements: StatementCreateManyWithoutUserInput
  courseVisits: CourseVisitCreateManyWithoutStudentInput
  documents: DocumentCreateManyWithoutUserInput
  documentResults: DocumentResultCreateManyWithoutUserInput
  clauses: ClauseCreateManyWithoutUserInput
  challengeResults: ChallengeResultCreateManyWithoutStudentInput
  level: UserLevelCreateOneWithoutUserInput
  interests: UserCreateinterestsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserLevel {
  id: ID!
  level: Float
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserLevelConnection {
  pageInfo: PageInfo!
  edges: [UserLevelEdge]!
  aggregate: AggregateUserLevel!
}

input UserLevelCreateInput {
  id: ID
  level: Float
  user: UserCreateOneWithoutLevelInput
}

input UserLevelCreateOneWithoutUserInput {
  create: UserLevelCreateWithoutUserInput
  connect: UserLevelWhereUniqueInput
}

input UserLevelCreateWithoutUserInput {
  id: ID
  level: Float
}

type UserLevelEdge {
  node: UserLevel!
  cursor: String!
}

enum UserLevelOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserLevelPreviousValues {
  id: ID!
  level: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserLevelSubscriptionPayload {
  mutation: MutationType!
  node: UserLevel
  updatedFields: [String!]
  previousValues: UserLevelPreviousValues
}

input UserLevelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserLevelWhereInput
  AND: [UserLevelSubscriptionWhereInput!]
  OR: [UserLevelSubscriptionWhereInput!]
  NOT: [UserLevelSubscriptionWhereInput!]
}

input UserLevelUpdateInput {
  level: Float
  user: UserUpdateOneWithoutLevelInput
}

input UserLevelUpdateManyMutationInput {
  level: Float
}

input UserLevelUpdateOneWithoutUserInput {
  create: UserLevelCreateWithoutUserInput
  update: UserLevelUpdateWithoutUserDataInput
  upsert: UserLevelUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: UserLevelWhereUniqueInput
}

input UserLevelUpdateWithoutUserDataInput {
  level: Float
}

input UserLevelUpsertWithoutUserInput {
  update: UserLevelUpdateWithoutUserDataInput!
  create: UserLevelCreateWithoutUserInput!
}

input UserLevelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  level: Float
  level_not: Float
  level_in: [Float!]
  level_not_in: [Float!]
  level_lt: Float
  level_lte: Float
  level_gt: Float
  level_gte: Float
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserLevelWhereInput!]
  OR: [UserLevelWhereInput!]
  NOT: [UserLevelWhereInput!]
}

input UserLevelWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  image_ASC
  image_DESC
  status_ASC
  status_DESC
  uniID_ASC
  uniID_DESC
  description_ASC
  description_DESC
  resume_ASC
  resume_DESC
  coverLetter_ASC
  coverLetter_DESC
  careerTrackID_ASC
  careerTrackID_DESC
  isFamiliar_ASC
  isFamiliar_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  surname: String
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrackID: ID
  favourites: [ID!]!
  subjects: [ID!]!
  permissions: [Permission!]!
  isFamiliar: Boolean!
  interests: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  surname: String
  surname_not: String
  surname_in: [String!]
  surname_not_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_gt: String
  surname_gte: String
  surname_contains: String
  surname_not_contains: String
  surname_starts_with: String
  surname_not_starts_with: String
  surname_ends_with: String
  surname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  resume: String
  resume_not: String
  resume_in: [String!]
  resume_not_in: [String!]
  resume_lt: String
  resume_lte: String
  resume_gt: String
  resume_gte: String
  resume_contains: String
  resume_not_contains: String
  resume_starts_with: String
  resume_not_starts_with: String
  resume_ends_with: String
  resume_not_ends_with: String
  coverLetter: String
  coverLetter_not: String
  coverLetter_in: [String!]
  coverLetter_not_in: [String!]
  coverLetter_lt: String
  coverLetter_lte: String
  coverLetter_gt: String
  coverLetter_gte: String
  coverLetter_contains: String
  coverLetter_not_contains: String
  coverLetter_starts_with: String
  coverLetter_not_starts_with: String
  coverLetter_ends_with: String
  coverLetter_not_ends_with: String
  careerTrackID: ID
  careerTrackID_not: ID
  careerTrackID_in: [ID!]
  careerTrackID_not_in: [ID!]
  careerTrackID_lt: ID
  careerTrackID_lte: ID
  careerTrackID_gt: ID
  careerTrackID_gte: ID
  careerTrackID_contains: ID
  careerTrackID_not_contains: ID
  careerTrackID_starts_with: ID
  careerTrackID_not_starts_with: ID
  careerTrackID_ends_with: ID
  careerTrackID_not_ends_with: ID
  isFamiliar: Boolean
  isFamiliar_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdatefavouritesInput {
  set: [ID!]
}

input UserUpdateInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateinterestsInput {
  set: [String!]
}

input UserUpdateManyDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  permissions: UserUpdatepermissionsInput
  isFamiliar: Boolean
  interests: UserUpdateinterestsInput
}

input UserUpdateManyMutationInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  permissions: UserUpdatepermissionsInput
  isFamiliar: Boolean
  interests: UserUpdateinterestsInput
}

input UserUpdateManyWithoutCo_coursePagesInput {
  create: [UserCreateWithoutCo_coursePagesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCo_coursePagesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCo_coursePagesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutCompanyInput {
  create: [UserCreateWithoutCompanyInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutNew_subjectsInput {
  create: [UserCreateWithoutNew_subjectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutNew_subjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutNew_subjectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUniInput {
  create: [UserCreateWithoutUniInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUniInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUniInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutChallengeResultsInput {
  create: UserCreateWithoutChallengeResultsInput
  update: UserUpdateWithoutChallengeResultsDataInput
  upsert: UserUpsertWithoutChallengeResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutClausesInput {
  create: UserCreateWithoutClausesInput
  update: UserUpdateWithoutClausesDataInput
  upsert: UserUpsertWithoutClausesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConstructionInput {
  create: UserCreateWithoutConstructionInput
  update: UserUpdateWithoutConstructionDataInput
  upsert: UserUpsertWithoutConstructionInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConstructionResultsInput {
  create: UserCreateWithoutConstructionResultsInput
  update: UserUpdateWithoutConstructionResultsDataInput
  upsert: UserUpsertWithoutConstructionResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCoursePagesInput {
  create: UserCreateWithoutCoursePagesInput
  update: UserUpdateWithoutCoursePagesDataInput
  upsert: UserUpsertWithoutCoursePagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCourseVisitsInput {
  create: UserCreateWithoutCourseVisitsInput
  update: UserUpdateWithoutCourseVisitsDataInput
  upsert: UserUpsertWithoutCourseVisitsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutDocumentsInput {
  create: UserCreateWithoutDocumentsInput
  update: UserUpdateWithoutDocumentsDataInput
  upsert: UserUpsertWithoutDocumentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLegalPortfolioInput {
  create: UserCreateWithoutLegalPortfolioInput
  update: UserUpdateWithoutLegalPortfolioDataInput
  upsert: UserUpsertWithoutLegalPortfolioInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLessonResultsInput {
  create: UserCreateWithoutLessonResultsInput
  update: UserUpdateWithoutLessonResultsDataInput
  upsert: UserUpsertWithoutLessonResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLessonsInput {
  create: UserCreateWithoutLessonsInput
  update: UserUpdateWithoutLessonsDataInput
  upsert: UserUpsertWithoutLessonsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNewTestsInput {
  create: UserCreateWithoutNewTestsInput
  update: UserUpdateWithoutNewTestsDataInput
  upsert: UserUpsertWithoutNewTestsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProblemResultsInput {
  create: UserCreateWithoutProblemResultsInput
  update: UserUpdateWithoutProblemResultsDataInput
  upsert: UserUpsertWithoutProblemResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProblemsInput {
  create: UserCreateWithoutProblemsInput
  update: UserUpdateWithoutProblemsDataInput
  upsert: UserUpsertWithoutProblemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuizesInput {
  create: UserCreateWithoutQuizesInput
  update: UserUpdateWithoutQuizesDataInput
  upsert: UserUpsertWithoutQuizesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutQuizResultsInput {
  create: UserCreateWithoutQuizResultsInput
  update: UserUpdateWithoutQuizResultsDataInput
  upsert: UserUpsertWithoutQuizResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutShotResultsInput {
  create: UserCreateWithoutShotResultsInput
  update: UserUpdateWithoutShotResultsDataInput
  upsert: UserUpsertWithoutShotResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutShotsInput {
  create: UserCreateWithoutShotsInput
  update: UserUpdateWithoutShotsDataInput
  upsert: UserUpsertWithoutShotsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutStudentFeedbackInput {
  create: UserCreateWithoutStudentFeedbackInput
  update: UserUpdateWithoutStudentFeedbackDataInput
  upsert: UserUpsertWithoutStudentFeedbackInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTeacherFeedbackInput {
  create: UserCreateWithoutTeacherFeedbackInput
  update: UserUpdateWithoutTeacherFeedbackDataInput
  upsert: UserUpsertWithoutTeacherFeedbackInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTestResultsInput {
  create: UserCreateWithoutTestResultsInput
  update: UserUpdateWithoutTestResultsDataInput
  upsert: UserUpsertWithoutTestResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextEditorInput {
  create: UserCreateWithoutTextEditorInput
  update: UserUpdateWithoutTextEditorDataInput
  upsert: UserUpsertWithoutTextEditorInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTextEditorResultsInput {
  create: UserCreateWithoutTextEditorResultsInput
  update: UserUpdateWithoutTextEditorResultsDataInput
  upsert: UserUpsertWithoutTextEditorResultsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCareerTrackInput {
  create: UserCreateWithoutCareerTrackInput
  update: UserUpdateWithoutCareerTrackDataInput
  upsert: UserUpsertWithoutCareerTrackInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutDocumentResultsInput {
  create: UserCreateWithoutDocumentResultsInput
  update: UserUpdateWithoutDocumentResultsDataInput
  upsert: UserUpsertWithoutDocumentResultsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutForumsInput {
  create: UserCreateWithoutForumsInput
  update: UserUpdateWithoutForumsDataInput
  upsert: UserUpsertWithoutForumsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLevelInput {
  create: UserCreateWithoutLevelInput
  update: UserUpdateWithoutLevelDataInput
  upsert: UserUpsertWithoutLevelInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutRatingsInput {
  create: UserCreateWithoutRatingsInput
  update: UserUpdateWithoutRatingsDataInput
  upsert: UserUpsertWithoutRatingsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutStatementsInput {
  create: UserCreateWithoutStatementsInput
  update: UserUpdateWithoutStatementsDataInput
  upsert: UserUpsertWithoutStatementsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdatesubjectsInput {
  set: [ID!]
}

input UserUpdateWithoutCareerTrackDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutChallengeResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutClausesDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutCo_coursePagesDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutCompanyDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutConstructionDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutConstructionResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutCoursePagesDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutCourseVisitsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutDocumentResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutDocumentsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutForumsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutLegalPortfolioDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutLessonResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutLessonsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutLevelDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutNew_subjectsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutNewTestsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutNotesDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutOrdersDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutProblemResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutProblemsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutQuizesDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutQuizResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutRatingsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutShotResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutShotsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutStatementsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutStudentFeedbackDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutTeacherFeedbackDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutTestResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutTextEditorDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutTextEditorResultsDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  uni: UniUpdateOneWithoutTeachersInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithoutUniDataInput {
  name: String
  surname: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  image: String
  status: Status
  legalPortfolio: LegalPortfolioUpdateOneWithoutUserInput
  company: CompanyUpdateOneWithoutHrsInput
  uniID: ID
  description: String
  resume: String
  coverLetter: String
  careerTrack: CareerTrackUpdateOneWithoutMembersInput
  careerTrackID: ID
  favourites: UserUpdatefavouritesInput
  subjects: UserUpdatesubjectsInput
  new_subjects: CoursePageUpdateManyWithoutNew_studentsInput
  permissions: UserUpdatepermissionsInput
  coursePages: CoursePageUpdateManyWithoutUserInput
  co_coursePages: CoursePageUpdateManyWithoutAuthorsInput
  lessons: LessonUpdateManyWithoutUserInput
  newTests: NewTestUpdateManyWithoutUserInput
  quizes: QuizUpdateManyWithoutUserInput
  lessonResults: LessonResultUpdateManyWithoutStudentInput
  testResults: TestResultUpdateManyWithoutStudentInput
  quizResults: QuizResultUpdateManyWithoutStudentInput
  problemResults: ProblemResultUpdateManyWithoutStudentInput
  textEditorResults: TextEditorResultUpdateManyWithoutStudentInput
  constructionResults: ConstructionResultUpdateManyWithoutStudentInput
  problems: ProblemUpdateManyWithoutUserInput
  construction: ConstructionUpdateManyWithoutUserInput
  orders: OrderUpdateManyWithoutUserInput
  textEditor: TextEditorUpdateManyWithoutUserInput
  isFamiliar: Boolean
  posts: PostUpdateManyWithoutUserInput
  shots: ShotUpdateManyWithoutUserInput
  shotResults: ShotResultUpdateManyWithoutStudentInput
  notes: NoteUpdateManyWithoutUserInput
  teacherFeedback: FeedbackUpdateManyWithoutTeacherInput
  studentFeedback: FeedbackUpdateManyWithoutStudentInput
  forums: ForumUpdateManyWithoutUserInput
  ratings: RatingUpdateManyWithoutUserInput
  statements: StatementUpdateManyWithoutUserInput
  courseVisits: CourseVisitUpdateManyWithoutStudentInput
  documents: DocumentUpdateManyWithoutUserInput
  documentResults: DocumentResultUpdateManyWithoutUserInput
  clauses: ClauseUpdateManyWithoutUserInput
  challengeResults: ChallengeResultUpdateManyWithoutStudentInput
  level: UserLevelUpdateOneWithoutUserInput
  interests: UserUpdateinterestsInput
}

input UserUpdateWithWhereUniqueWithoutCo_coursePagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCo_coursePagesDataInput!
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCompanyDataInput!
}

input UserUpdateWithWhereUniqueWithoutNew_subjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNew_subjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutUniInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUniDataInput!
}

input UserUpsertWithoutCareerTrackInput {
  update: UserUpdateWithoutCareerTrackDataInput!
  create: UserCreateWithoutCareerTrackInput!
}

input UserUpsertWithoutChallengeResultsInput {
  update: UserUpdateWithoutChallengeResultsDataInput!
  create: UserCreateWithoutChallengeResultsInput!
}

input UserUpsertWithoutClausesInput {
  update: UserUpdateWithoutClausesDataInput!
  create: UserCreateWithoutClausesInput!
}

input UserUpsertWithoutConstructionInput {
  update: UserUpdateWithoutConstructionDataInput!
  create: UserCreateWithoutConstructionInput!
}

input UserUpsertWithoutConstructionResultsInput {
  update: UserUpdateWithoutConstructionResultsDataInput!
  create: UserCreateWithoutConstructionResultsInput!
}

input UserUpsertWithoutCoursePagesInput {
  update: UserUpdateWithoutCoursePagesDataInput!
  create: UserCreateWithoutCoursePagesInput!
}

input UserUpsertWithoutCourseVisitsInput {
  update: UserUpdateWithoutCourseVisitsDataInput!
  create: UserCreateWithoutCourseVisitsInput!
}

input UserUpsertWithoutDocumentResultsInput {
  update: UserUpdateWithoutDocumentResultsDataInput!
  create: UserCreateWithoutDocumentResultsInput!
}

input UserUpsertWithoutDocumentsInput {
  update: UserUpdateWithoutDocumentsDataInput!
  create: UserCreateWithoutDocumentsInput!
}

input UserUpsertWithoutForumsInput {
  update: UserUpdateWithoutForumsDataInput!
  create: UserCreateWithoutForumsInput!
}

input UserUpsertWithoutLegalPortfolioInput {
  update: UserUpdateWithoutLegalPortfolioDataInput!
  create: UserCreateWithoutLegalPortfolioInput!
}

input UserUpsertWithoutLessonResultsInput {
  update: UserUpdateWithoutLessonResultsDataInput!
  create: UserCreateWithoutLessonResultsInput!
}

input UserUpsertWithoutLessonsInput {
  update: UserUpdateWithoutLessonsDataInput!
  create: UserCreateWithoutLessonsInput!
}

input UserUpsertWithoutLevelInput {
  update: UserUpdateWithoutLevelDataInput!
  create: UserCreateWithoutLevelInput!
}

input UserUpsertWithoutNewTestsInput {
  update: UserUpdateWithoutNewTestsDataInput!
  create: UserCreateWithoutNewTestsInput!
}

input UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput!
  create: UserCreateWithoutNotesInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutProblemResultsInput {
  update: UserUpdateWithoutProblemResultsDataInput!
  create: UserCreateWithoutProblemResultsInput!
}

input UserUpsertWithoutProblemsInput {
  update: UserUpdateWithoutProblemsDataInput!
  create: UserCreateWithoutProblemsInput!
}

input UserUpsertWithoutQuizesInput {
  update: UserUpdateWithoutQuizesDataInput!
  create: UserCreateWithoutQuizesInput!
}

input UserUpsertWithoutQuizResultsInput {
  update: UserUpdateWithoutQuizResultsDataInput!
  create: UserCreateWithoutQuizResultsInput!
}

input UserUpsertWithoutRatingsInput {
  update: UserUpdateWithoutRatingsDataInput!
  create: UserCreateWithoutRatingsInput!
}

input UserUpsertWithoutShotResultsInput {
  update: UserUpdateWithoutShotResultsDataInput!
  create: UserCreateWithoutShotResultsInput!
}

input UserUpsertWithoutShotsInput {
  update: UserUpdateWithoutShotsDataInput!
  create: UserCreateWithoutShotsInput!
}

input UserUpsertWithoutStatementsInput {
  update: UserUpdateWithoutStatementsDataInput!
  create: UserCreateWithoutStatementsInput!
}

input UserUpsertWithoutStudentFeedbackInput {
  update: UserUpdateWithoutStudentFeedbackDataInput!
  create: UserCreateWithoutStudentFeedbackInput!
}

input UserUpsertWithoutTeacherFeedbackInput {
  update: UserUpdateWithoutTeacherFeedbackDataInput!
  create: UserCreateWithoutTeacherFeedbackInput!
}

input UserUpsertWithoutTestResultsInput {
  update: UserUpdateWithoutTestResultsDataInput!
  create: UserCreateWithoutTestResultsInput!
}

input UserUpsertWithoutTextEditorInput {
  update: UserUpdateWithoutTextEditorDataInput!
  create: UserCreateWithoutTextEditorInput!
}

input UserUpsertWithoutTextEditorResultsInput {
  update: UserUpdateWithoutTextEditorResultsDataInput!
  create: UserCreateWithoutTextEditorResultsInput!
}

input UserUpsertWithWhereUniqueWithoutCo_coursePagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCo_coursePagesDataInput!
  create: UserCreateWithoutCo_coursePagesInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutNew_subjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNew_subjectsDataInput!
  create: UserCreateWithoutNew_subjectsInput!
}

input UserUpsertWithWhereUniqueWithoutUniInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUniDataInput!
  create: UserCreateWithoutUniInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  surname: String
  surname_not: String
  surname_in: [String!]
  surname_not_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_gt: String
  surname_gte: String
  surname_contains: String
  surname_not_contains: String
  surname_starts_with: String
  surname_not_starts_with: String
  surname_ends_with: String
  surname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  legalPortfolio: LegalPortfolioWhereInput
  uni: UniWhereInput
  company: CompanyWhereInput
  uniID: ID
  uniID_not: ID
  uniID_in: [ID!]
  uniID_not_in: [ID!]
  uniID_lt: ID
  uniID_lte: ID
  uniID_gt: ID
  uniID_gte: ID
  uniID_contains: ID
  uniID_not_contains: ID
  uniID_starts_with: ID
  uniID_not_starts_with: ID
  uniID_ends_with: ID
  uniID_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  resume: String
  resume_not: String
  resume_in: [String!]
  resume_not_in: [String!]
  resume_lt: String
  resume_lte: String
  resume_gt: String
  resume_gte: String
  resume_contains: String
  resume_not_contains: String
  resume_starts_with: String
  resume_not_starts_with: String
  resume_ends_with: String
  resume_not_ends_with: String
  coverLetter: String
  coverLetter_not: String
  coverLetter_in: [String!]
  coverLetter_not_in: [String!]
  coverLetter_lt: String
  coverLetter_lte: String
  coverLetter_gt: String
  coverLetter_gte: String
  coverLetter_contains: String
  coverLetter_not_contains: String
  coverLetter_starts_with: String
  coverLetter_not_starts_with: String
  coverLetter_ends_with: String
  coverLetter_not_ends_with: String
  careerTrack: CareerTrackWhereInput
  careerTrackID: ID
  careerTrackID_not: ID
  careerTrackID_in: [ID!]
  careerTrackID_not_in: [ID!]
  careerTrackID_lt: ID
  careerTrackID_lte: ID
  careerTrackID_gt: ID
  careerTrackID_gte: ID
  careerTrackID_contains: ID
  careerTrackID_not_contains: ID
  careerTrackID_starts_with: ID
  careerTrackID_not_starts_with: ID
  careerTrackID_ends_with: ID
  careerTrackID_not_ends_with: ID
  new_subjects_every: CoursePageWhereInput
  new_subjects_some: CoursePageWhereInput
  new_subjects_none: CoursePageWhereInput
  coursePages_every: CoursePageWhereInput
  coursePages_some: CoursePageWhereInput
  coursePages_none: CoursePageWhereInput
  co_coursePages_every: CoursePageWhereInput
  co_coursePages_some: CoursePageWhereInput
  co_coursePages_none: CoursePageWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  newTests_every: NewTestWhereInput
  newTests_some: NewTestWhereInput
  newTests_none: NewTestWhereInput
  quizes_every: QuizWhereInput
  quizes_some: QuizWhereInput
  quizes_none: QuizWhereInput
  lessonResults_every: LessonResultWhereInput
  lessonResults_some: LessonResultWhereInput
  lessonResults_none: LessonResultWhereInput
  testResults_every: TestResultWhereInput
  testResults_some: TestResultWhereInput
  testResults_none: TestResultWhereInput
  quizResults_every: QuizResultWhereInput
  quizResults_some: QuizResultWhereInput
  quizResults_none: QuizResultWhereInput
  problemResults_every: ProblemResultWhereInput
  problemResults_some: ProblemResultWhereInput
  problemResults_none: ProblemResultWhereInput
  textEditorResults_every: TextEditorResultWhereInput
  textEditorResults_some: TextEditorResultWhereInput
  textEditorResults_none: TextEditorResultWhereInput
  constructionResults_every: ConstructionResultWhereInput
  constructionResults_some: ConstructionResultWhereInput
  constructionResults_none: ConstructionResultWhereInput
  problems_every: ProblemWhereInput
  problems_some: ProblemWhereInput
  problems_none: ProblemWhereInput
  construction_every: ConstructionWhereInput
  construction_some: ConstructionWhereInput
  construction_none: ConstructionWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  textEditor_every: TextEditorWhereInput
  textEditor_some: TextEditorWhereInput
  textEditor_none: TextEditorWhereInput
  isFamiliar: Boolean
  isFamiliar_not: Boolean
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  shots_every: ShotWhereInput
  shots_some: ShotWhereInput
  shots_none: ShotWhereInput
  shotResults_every: ShotResultWhereInput
  shotResults_some: ShotResultWhereInput
  shotResults_none: ShotResultWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  teacherFeedback_every: FeedbackWhereInput
  teacherFeedback_some: FeedbackWhereInput
  teacherFeedback_none: FeedbackWhereInput
  studentFeedback_every: FeedbackWhereInput
  studentFeedback_some: FeedbackWhereInput
  studentFeedback_none: FeedbackWhereInput
  forums_every: ForumWhereInput
  forums_some: ForumWhereInput
  forums_none: ForumWhereInput
  ratings_every: RatingWhereInput
  ratings_some: RatingWhereInput
  ratings_none: RatingWhereInput
  statements_every: StatementWhereInput
  statements_some: StatementWhereInput
  statements_none: StatementWhereInput
  courseVisits_every: CourseVisitWhereInput
  courseVisits_some: CourseVisitWhereInput
  courseVisits_none: CourseVisitWhereInput
  documents_every: DocumentWhereInput
  documents_some: DocumentWhereInput
  documents_none: DocumentWhereInput
  documentResults_every: DocumentResultWhereInput
  documentResults_some: DocumentResultWhereInput
  documentResults_none: DocumentResultWhereInput
  clauses_every: ClauseWhereInput
  clauses_some: ClauseWhereInput
  clauses_none: ClauseWhereInput
  challengeResults_every: ChallengeResultWhereInput
  challengeResults_some: ChallengeResultWhereInput
  challengeResults_none: ChallengeResultWhereInput
  level: UserLevelWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
